#![allow(warnings)]
/* automatically generated by rust-bindgen */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub unsafe fn as_ptr(&self) -> *const T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut_ptr(&mut self) -> *mut T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
impl<T> ::std::clone::Clone for __IncompleteArrayField<T> {
    #[inline]
    fn clone(&self) -> Self {
        Self::new()
    }
}
pub const _SYS_TIME_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 27;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const __time_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __FD_ZERO_STOS: &'static [u8; 6usize] = b"stosq\0";
pub const __sigset_t_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _SYS_UIO_H: u32 = 1;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SYSMACROS_H: u32 = 1;
pub const _BITS_SYSMACROS_H: u32 = 1;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const __PTHREAD_MUTEX_LOCK_ELISION: u32 = 1;
pub const __PTHREAD_MUTEX_NUSERS_AFTER_KIND: u32 = 0;
pub const __PTHREAD_MUTEX_USE_UNION: u32 = 0;
pub const __PTHREAD_RWLOCK_INT_FLAGS_SHARED: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const _BITS_UIO_LIM_H: u32 = 1;
pub const __IOV_MAX: u32 = 1024;
pub const UIO_MAXIOV: u32 = 1024;
pub const EVENT__HAVE_ACCEPT4: u32 = 1;
pub const EVENT__HAVE_ARPA_INET_H: u32 = 1;
pub const EVENT__HAVE_CLOCK_GETTIME: u32 = 1;
pub const EVENT__HAVE_DECL_CTL_KERN: u32 = 1;
pub const EVENT__HAVE_DECL_KERN_ARND: u32 = 0;
pub const EVENT__HAVE_DECL_KERN_RANDOM: u32 = 1;
pub const EVENT__HAVE_DECL_RANDOM_UUID: u32 = 1;
pub const EVENT__HAVE_DLFCN_H: u32 = 1;
pub const EVENT__HAVE_EPOLL: u32 = 1;
pub const EVENT__HAVE_EPOLL_CREATE1: u32 = 1;
pub const EVENT__HAVE_EPOLL_CTL: u32 = 1;
pub const EVENT__HAVE_ERRNO_H: u32 = 1;
pub const EVENT__HAVE_ERR_REMOVE_THREAD_STATE: u32 = 1;
pub const EVENT__HAVE_EVENTFD: u32 = 1;
pub const EVENT__HAVE_FCNTL: u32 = 1;
pub const EVENT__HAVE_FCNTL_H: u32 = 1;
pub const EVENT__HAVE_FD_MASK: u32 = 1;
pub const EVENT__HAVE_GETADDRINFO: u32 = 1;
pub const EVENT__HAVE_GETEGID: u32 = 1;
pub const EVENT__HAVE_GETEUID: u32 = 1;
pub const EVENT__HAVE_GETIFADDRS: u32 = 1;
pub const EVENT__HAVE_GETNAMEINFO: u32 = 1;
pub const EVENT__HAVE_GETPROTOBYNUMBER: u32 = 1;
pub const EVENT__HAVE_GETSERVBYNAME: u32 = 1;
pub const EVENT__HAVE_GETTIMEOFDAY: u32 = 1;
pub const EVENT__HAVE_IFADDRS_H: u32 = 1;
pub const EVENT__HAVE_INET_NTOP: u32 = 1;
pub const EVENT__HAVE_INET_PTON: u32 = 1;
pub const EVENT__HAVE_INTTYPES_H: u32 = 1;
pub const EVENT__HAVE_LIBZ: u32 = 1;
pub const EVENT__HAVE_MEMORY_H: u32 = 1;
pub const EVENT__HAVE_MMAP: u32 = 1;
pub const EVENT__HAVE_NANOSLEEP: u32 = 1;
pub const EVENT__HAVE_NETDB_H: u32 = 1;
pub const EVENT__HAVE_NETINET_IN_H: u32 = 1;
pub const EVENT__HAVE_NETINET_TCP_H: u32 = 1;
pub const EVENT__HAVE_OPENSSL: u32 = 1;
pub const EVENT__HAVE_PIPE: u32 = 1;
pub const EVENT__HAVE_PIPE2: u32 = 1;
pub const EVENT__HAVE_POLL: u32 = 1;
pub const EVENT__HAVE_POLL_H: u32 = 1;
pub const EVENT__HAVE_PTHREADS: u32 = 1;
pub const EVENT__HAVE_PUTENV: u32 = 1;
pub const EVENT__HAVE_SA_FAMILY_T: u32 = 1;
pub const EVENT__HAVE_SELECT: u32 = 1;
pub const EVENT__HAVE_SENDFILE: u32 = 1;
pub const EVENT__HAVE_SETENV: u32 = 1;
pub const EVENT__HAVE_SETFD: u32 = 1;
pub const EVENT__HAVE_SETRLIMIT: u32 = 1;
pub const EVENT__HAVE_SIGACTION: u32 = 1;
pub const EVENT__HAVE_SIGNAL: u32 = 1;
pub const EVENT__HAVE_SPLICE: u32 = 1;
pub const EVENT__HAVE_STDARG_H: u32 = 1;
pub const EVENT__HAVE_STDDEF_H: u32 = 1;
pub const EVENT__HAVE_STDINT_H: u32 = 1;
pub const EVENT__HAVE_STDLIB_H: u32 = 1;
pub const EVENT__HAVE_STRINGS_H: u32 = 1;
pub const EVENT__HAVE_STRING_H: u32 = 1;
pub const EVENT__HAVE_STRSEP: u32 = 1;
pub const EVENT__HAVE_STRTOK_R: u32 = 1;
pub const EVENT__HAVE_STRTOLL: u32 = 1;
pub const EVENT__HAVE_STRUCT_ADDRINFO: u32 = 1;
pub const EVENT__HAVE_STRUCT_IN6_ADDR: u32 = 1;
pub const EVENT__HAVE_STRUCT_IN6_ADDR_S6_ADDR16: u32 = 1;
pub const EVENT__HAVE_STRUCT_IN6_ADDR_S6_ADDR32: u32 = 1;
pub const EVENT__HAVE_STRUCT_SOCKADDR_IN6: u32 = 1;
pub const EVENT__HAVE_STRUCT_SOCKADDR_STORAGE: u32 = 1;
pub const EVENT__HAVE_STRUCT_SOCKADDR_STORAGE_SS_FAMILY: u32 = 1;
pub const EVENT__HAVE_SYSCTL: u32 = 1;
pub const EVENT__HAVE_SYS_EPOLL_H: u32 = 1;
pub const EVENT__HAVE_SYS_EVENTFD_H: u32 = 1;
pub const EVENT__HAVE_SYS_IOCTL_H: u32 = 1;
pub const EVENT__HAVE_SYS_MMAN_H: u32 = 1;
pub const EVENT__HAVE_SYS_PARAM_H: u32 = 1;
pub const EVENT__HAVE_SYS_QUEUE_H: u32 = 1;
pub const EVENT__HAVE_SYS_RESOURCE_H: u32 = 1;
pub const EVENT__HAVE_SYS_SELECT_H: u32 = 1;
pub const EVENT__HAVE_SYS_SENDFILE_H: u32 = 1;
pub const EVENT__HAVE_SYS_SOCKET_H: u32 = 1;
pub const EVENT__HAVE_SYS_STAT_H: u32 = 1;
pub const EVENT__HAVE_SYS_SYSCTL_H: u32 = 1;
pub const EVENT__HAVE_SYS_TIMERFD_H: u32 = 1;
pub const EVENT__HAVE_SYS_TIME_H: u32 = 1;
pub const EVENT__HAVE_SYS_TYPES_H: u32 = 1;
pub const EVENT__HAVE_SYS_UIO_H: u32 = 1;
pub const EVENT__HAVE_SYS_WAIT_H: u32 = 1;
pub const EVENT__HAVE_TAILQFOREACH: u32 = 1;
pub const EVENT__HAVE_TIMERADD: u32 = 1;
pub const EVENT__HAVE_TIMERCLEAR: u32 = 1;
pub const EVENT__HAVE_TIMERCMP: u32 = 1;
pub const EVENT__HAVE_TIMERFD_CREATE: u32 = 1;
pub const EVENT__HAVE_TIMERISSET: u32 = 1;
pub const EVENT__HAVE_UINT16_T: u32 = 1;
pub const EVENT__HAVE_UINT32_T: u32 = 1;
pub const EVENT__HAVE_UINT64_T: u32 = 1;
pub const EVENT__HAVE_UINT8_T: u32 = 1;
pub const EVENT__HAVE_UINTPTR_T: u32 = 1;
pub const EVENT__HAVE_UMASK: u32 = 1;
pub const EVENT__HAVE_UNISTD_H: u32 = 1;
pub const EVENT__HAVE_UNSETENV: u32 = 1;
pub const EVENT__HAVE_USLEEP: u32 = 1;
pub const EVENT__HAVE_VASPRINTF: u32 = 1;
pub const EVENT__HAVE_ZLIB_H: u32 = 1;
pub const EVENT__LT_OBJDIR: &'static [u8; 7usize] = b".libs/\0";
pub const EVENT__NUMERIC_VERSION: u32 = 33622016;
pub const EVENT__PACKAGE: &'static [u8; 9usize] = b"libevent\0";
pub const EVENT__PACKAGE_BUGREPORT: &'static [u8; 1usize] = b"\0";
pub const EVENT__PACKAGE_NAME: &'static [u8; 9usize] = b"libevent\0";
pub const EVENT__PACKAGE_STRING: &'static [u8; 22usize] = b"libevent 2.1.8-stable\0";
pub const EVENT__PACKAGE_TARNAME: &'static [u8; 9usize] = b"libevent\0";
pub const EVENT__PACKAGE_URL: &'static [u8; 1usize] = b"\0";
pub const EVENT__PACKAGE_VERSION: &'static [u8; 13usize] = b"2.1.8-stable\0";
pub const EVENT__SIZEOF_INT: u32 = 4;
pub const EVENT__SIZEOF_LONG: u32 = 8;
pub const EVENT__SIZEOF_LONG_LONG: u32 = 8;
pub const EVENT__SIZEOF_OFF_T: u32 = 8;
pub const EVENT__SIZEOF_PTHREAD_T: u32 = 8;
pub const EVENT__SIZEOF_SHORT: u32 = 2;
pub const EVENT__SIZEOF_SIZE_T: u32 = 8;
pub const EVENT__SIZEOF_VOID_P: u32 = 8;
pub const EVENT__STDC_HEADERS: u32 = 1;
pub const EVENT__TIME_WITH_SYS_TIME: u32 = 1;
pub const EVENT___ALL_SOURCE: u32 = 1;
pub const EVENT___GNU_SOURCE: u32 = 1;
pub const EVENT___POSIX_PTHREAD_SEMANTICS: u32 = 1;
pub const EVENT___TANDEM_SOURCE: u32 = 1;
pub const EVENT____EXTENSIONS__: u32 = 1;
pub const EVENT__VERSION: &'static [u8; 13usize] = b"2.1.8-stable\0";
pub const EVENT___DARWIN_USE_64_BIT_INODE: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _NETDB_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_MAX: u32 = 44;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_MAX: u32 = 44;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOMAXCONN: u32 = 128;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP: u32 = 35078;
pub const SIOCGSTAMPNS: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SO_MARK: u32 = 36;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const _RPC_NETDB_H: u32 = 1;
pub const _PATH_HEQUIV: &'static [u8; 17usize] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &'static [u8; 11usize] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &'static [u8; 14usize] = b"/etc/networks\0";
pub const _PATH_NSSWITCH_CONF: &'static [u8; 19usize] = b"/etc/nsswitch.conf\0";
pub const _PATH_PROTOCOLS: &'static [u8; 15usize] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &'static [u8; 14usize] = b"/etc/services\0";
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const NO_ADDRESS: u32 = 4;
pub const IPPORT_RESERVED: u32 = 1024;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_V4MAPPED: u32 = 8;
pub const AI_ALL: u32 = 16;
pub const AI_ADDRCONFIG: u32 = 32;
pub const AI_NUMERICSERV: u32 = 1024;
pub const EAI_BADFLAGS: i32 = -1;
pub const EAI_NONAME: i32 = -2;
pub const EAI_AGAIN: i32 = -3;
pub const EAI_FAIL: i32 = -4;
pub const EAI_FAMILY: i32 = -6;
pub const EAI_SOCKTYPE: i32 = -7;
pub const EAI_SERVICE: i32 = -8;
pub const EAI_MEMORY: i32 = -10;
pub const EAI_SYSTEM: i32 = -11;
pub const EAI_OVERFLOW: i32 = -12;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NUMERICHOST: u32 = 1;
pub const NI_NUMERICSERV: u32 = 2;
pub const NI_NOFQDN: u32 = 4;
pub const NI_NAMEREQD: u32 = 8;
pub const NI_DGRAM: u32 = 16;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const EV_UINT32_MAX: u32 = 4294967295;
pub const EV_INT32_MAX: u32 = 2147483647;
pub const EV_INT32_MIN: i32 = -2147483648;
pub const EV_UINT16_MAX: u32 = 65535;
pub const EV_INT16_MAX: u32 = 32767;
pub const EV_UINT8_MAX: u32 = 255;
pub const EV_INT8_MAX: u32 = 127;
pub const EV_INT8_MIN: i32 = -128;
pub const EV_MONOT_PRECISE: u32 = 1;
pub const EV_MONOT_FALLBACK: u32 = 2;
pub const EVUTIL_EAI_ADDRFAMILY: i32 = -901;
pub const EVUTIL_EAI_AGAIN: i32 = -3;
pub const EVUTIL_EAI_BADFLAGS: i32 = -1;
pub const EVUTIL_EAI_FAIL: i32 = -4;
pub const EVUTIL_EAI_FAMILY: i32 = -6;
pub const EVUTIL_EAI_MEMORY: i32 = -10;
pub const EVUTIL_EAI_NODATA: i32 = -907;
pub const EVUTIL_EAI_NONAME: i32 = -2;
pub const EVUTIL_EAI_SERVICE: i32 = -8;
pub const EVUTIL_EAI_SOCKTYPE: i32 = -7;
pub const EVUTIL_EAI_SYSTEM: i32 = -11;
pub const EVUTIL_EAI_CANCEL: i32 = -90001;
pub const EVUTIL_AI_PASSIVE: u32 = 1;
pub const EVUTIL_AI_CANONNAME: u32 = 2;
pub const EVUTIL_AI_NUMERICHOST: u32 = 4;
pub const EVUTIL_AI_NUMERICSERV: u32 = 1024;
pub const EVUTIL_AI_V4MAPPED: u32 = 8;
pub const EVUTIL_AI_ALL: u32 = 16;
pub const EVUTIL_AI_ADDRCONFIG: u32 = 32;
pub const EVLIST_TIMEOUT: u32 = 1;
pub const EVLIST_INSERTED: u32 = 2;
pub const EVLIST_SIGNAL: u32 = 4;
pub const EVLIST_ACTIVE: u32 = 8;
pub const EVLIST_INTERNAL: u32 = 16;
pub const EVLIST_ACTIVE_LATER: u32 = 32;
pub const EVLIST_FINALIZING: u32 = 64;
pub const EVLIST_INIT: u32 = 128;
pub const EVLIST_ALL: u32 = 255;
pub const _STDIO_H: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const _BITS_LIBIO_H: u32 = 1;
pub const _BITS_G_CONFIG_H: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _G_HAVE_MMAP: u32 = 1;
pub const _G_HAVE_MREMAP: u32 = 1;
pub const _G_IO_IO_FILE_VERSION: u32 = 131073;
pub const _G_BUFSIZ: u32 = 8192;
pub const _IO_BUFSIZ: u32 = 8192;
pub const _IO_UNIFIED_JUMPTABLES: u32 = 1;
pub const EOF: i32 = -1;
pub const _IOS_INPUT: u32 = 1;
pub const _IOS_OUTPUT: u32 = 2;
pub const _IOS_ATEND: u32 = 4;
pub const _IOS_APPEND: u32 = 8;
pub const _IOS_TRUNC: u32 = 16;
pub const _IOS_NOCREATE: u32 = 32;
pub const _IOS_NOREPLACE: u32 = 64;
pub const _IOS_BIN: u32 = 128;
pub const _IO_MAGIC: u32 = 4222418944;
pub const _OLD_STDIO_MAGIC: u32 = 4206624768;
pub const _IO_MAGIC_MASK: u32 = 4294901760;
pub const _IO_USER_BUF: u32 = 1;
pub const _IO_UNBUFFERED: u32 = 2;
pub const _IO_NO_READS: u32 = 4;
pub const _IO_NO_WRITES: u32 = 8;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_DELETE_DONT_CLOSE: u32 = 64;
pub const _IO_LINKED: u32 = 128;
pub const _IO_IN_BACKUP: u32 = 256;
pub const _IO_LINE_BUF: u32 = 512;
pub const _IO_TIED_PUT_GET: u32 = 1024;
pub const _IO_CURRENTLY_PUTTING: u32 = 2048;
pub const _IO_IS_APPENDING: u32 = 4096;
pub const _IO_IS_FILEBUF: u32 = 8192;
pub const _IO_BAD_SEEN: u32 = 16384;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IO_FLAGS2_MMAP: u32 = 1;
pub const _IO_FLAGS2_NOTCANCEL: u32 = 2;
pub const _IO_FLAGS2_USER_WBUF: u32 = 8;
pub const _IO_SKIPWS: u32 = 1;
pub const _IO_LEFT: u32 = 2;
pub const _IO_RIGHT: u32 = 4;
pub const _IO_INTERNAL: u32 = 8;
pub const _IO_DEC: u32 = 16;
pub const _IO_OCT: u32 = 32;
pub const _IO_HEX: u32 = 64;
pub const _IO_SHOWBASE: u32 = 128;
pub const _IO_SHOWPOINT: u32 = 256;
pub const _IO_UPPERCASE: u32 = 512;
pub const _IO_SHOWPOS: u32 = 1024;
pub const _IO_SCIENTIFIC: u32 = 2048;
pub const _IO_FIXED: u32 = 4096;
pub const _IO_UNITBUF: u32 = 8192;
pub const _IO_STDIO: u32 = 16384;
pub const _IO_DONT_CLOSE: u32 = 32768;
pub const _IO_BOOLALPHA: u32 = 65536;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &'static [u8; 5usize] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const EVENT_BASE_COUNT_ACTIVE: u32 = 1;
pub const EVENT_BASE_COUNT_VIRTUAL: u32 = 2;
pub const EVENT_BASE_COUNT_ADDED: u32 = 4;
pub const EVENT_LOG_DEBUG: u32 = 0;
pub const EVENT_LOG_MSG: u32 = 1;
pub const EVENT_LOG_WARN: u32 = 2;
pub const EVENT_LOG_ERR: u32 = 3;
pub const _EVENT_LOG_DEBUG: u32 = 0;
pub const _EVENT_LOG_MSG: u32 = 1;
pub const _EVENT_LOG_WARN: u32 = 2;
pub const _EVENT_LOG_ERR: u32 = 3;
pub const EVENT_DBG_ALL: u32 = 4294967295;
pub const EVENT_DBG_NONE: u32 = 0;
pub const EVLOOP_ONCE: u32 = 1;
pub const EVLOOP_NONBLOCK: u32 = 2;
pub const EVLOOP_NO_EXIT_ON_EMPTY: u32 = 4;
pub const EV_TIMEOUT: u32 = 1;
pub const EV_READ: u32 = 2;
pub const EV_WRITE: u32 = 4;
pub const EV_SIGNAL: u32 = 8;
pub const EV_PERSIST: u32 = 16;
pub const EV_ET: u32 = 32;
pub const EV_FINALIZE: u32 = 64;
pub const EV_CLOSED: u32 = 128;
pub const LIBEVENT_VERSION: &'static [u8; 13usize] = b"2.1.8-stable\0";
pub const LIBEVENT_VERSION_NUMBER: u32 = 33622016;
pub const EVENT_MAX_PRIORITIES: u32 = 256;
pub const EVBUFFER_FLAG_DRAINS_TO_FD: u32 = 1;
pub const EVBUF_FS_CLOSE_ON_FREE: u32 = 1;
pub const EVBUF_FS_DISABLE_MMAP: u32 = 2;
pub const EVBUF_FS_DISABLE_SENDFILE: u32 = 4;
pub const EVBUF_FS_DISABLE_LOCKING: u32 = 8;
pub const EVBUFFER_CB_ENABLED: u32 = 1;
pub const BEV_EVENT_READING: u32 = 1;
pub const BEV_EVENT_WRITING: u32 = 2;
pub const BEV_EVENT_EOF: u32 = 16;
pub const BEV_EVENT_ERROR: u32 = 32;
pub const BEV_EVENT_TIMEOUT: u32 = 64;
pub const BEV_EVENT_CONNECTED: u32 = 128;
pub const EVBUFFER_READ: u32 = 1;
pub const EVBUFFER_WRITE: u32 = 2;
pub const EVBUFFER_EOF: u32 = 16;
pub const EVBUFFER_ERROR: u32 = 32;
pub const EVBUFFER_TIMEOUT: u32 = 64;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _TERMIOS_H: u32 = 1;
pub const NCCS: u32 = 32;
pub const _HAVE_STRUCT_TERMIOS_C_ISPEED: u32 = 1;
pub const _HAVE_STRUCT_TERMIOS_C_OSPEED: u32 = 1;
pub const VINTR: u32 = 0;
pub const VQUIT: u32 = 1;
pub const VERASE: u32 = 2;
pub const VKILL: u32 = 3;
pub const VEOF: u32 = 4;
pub const VTIME: u32 = 5;
pub const VMIN: u32 = 6;
pub const VSWTC: u32 = 7;
pub const VSTART: u32 = 8;
pub const VSTOP: u32 = 9;
pub const VSUSP: u32 = 10;
pub const VEOL: u32 = 11;
pub const VREPRINT: u32 = 12;
pub const VDISCARD: u32 = 13;
pub const VWERASE: u32 = 14;
pub const VLNEXT: u32 = 15;
pub const VEOL2: u32 = 16;
pub const IGNBRK: u32 = 1;
pub const BRKINT: u32 = 2;
pub const IGNPAR: u32 = 4;
pub const PARMRK: u32 = 8;
pub const INPCK: u32 = 16;
pub const ISTRIP: u32 = 32;
pub const INLCR: u32 = 64;
pub const IGNCR: u32 = 128;
pub const ICRNL: u32 = 256;
pub const IUCLC: u32 = 512;
pub const IXON: u32 = 1024;
pub const IXANY: u32 = 2048;
pub const IXOFF: u32 = 4096;
pub const IMAXBEL: u32 = 8192;
pub const IUTF8: u32 = 16384;
pub const OPOST: u32 = 1;
pub const OLCUC: u32 = 2;
pub const ONLCR: u32 = 4;
pub const OCRNL: u32 = 8;
pub const ONOCR: u32 = 16;
pub const ONLRET: u32 = 32;
pub const OFILL: u32 = 64;
pub const OFDEL: u32 = 128;
pub const NLDLY: u32 = 256;
pub const NL0: u32 = 0;
pub const NL1: u32 = 256;
pub const CRDLY: u32 = 1536;
pub const CR0: u32 = 0;
pub const CR1: u32 = 512;
pub const CR2: u32 = 1024;
pub const CR3: u32 = 1536;
pub const TABDLY: u32 = 6144;
pub const TAB0: u32 = 0;
pub const TAB1: u32 = 2048;
pub const TAB2: u32 = 4096;
pub const TAB3: u32 = 6144;
pub const BSDLY: u32 = 8192;
pub const BS0: u32 = 0;
pub const BS1: u32 = 8192;
pub const FFDLY: u32 = 32768;
pub const FF0: u32 = 0;
pub const FF1: u32 = 32768;
pub const VTDLY: u32 = 16384;
pub const VT0: u32 = 0;
pub const VT1: u32 = 16384;
pub const XTABS: u32 = 6144;
pub const CBAUD: u32 = 4111;
pub const B0: u32 = 0;
pub const B50: u32 = 1;
pub const B75: u32 = 2;
pub const B110: u32 = 3;
pub const B134: u32 = 4;
pub const B150: u32 = 5;
pub const B200: u32 = 6;
pub const B300: u32 = 7;
pub const B600: u32 = 8;
pub const B1200: u32 = 9;
pub const B1800: u32 = 10;
pub const B2400: u32 = 11;
pub const B4800: u32 = 12;
pub const B9600: u32 = 13;
pub const B19200: u32 = 14;
pub const B38400: u32 = 15;
pub const EXTA: u32 = 14;
pub const EXTB: u32 = 15;
pub const CSIZE: u32 = 48;
pub const CS5: u32 = 0;
pub const CS6: u32 = 16;
pub const CS7: u32 = 32;
pub const CS8: u32 = 48;
pub const CSTOPB: u32 = 64;
pub const CREAD: u32 = 128;
pub const PARENB: u32 = 256;
pub const PARODD: u32 = 512;
pub const HUPCL: u32 = 1024;
pub const CLOCAL: u32 = 2048;
pub const CBAUDEX: u32 = 4096;
pub const B57600: u32 = 4097;
pub const B115200: u32 = 4098;
pub const B230400: u32 = 4099;
pub const B460800: u32 = 4100;
pub const B500000: u32 = 4101;
pub const B576000: u32 = 4102;
pub const B921600: u32 = 4103;
pub const B1000000: u32 = 4104;
pub const B1152000: u32 = 4105;
pub const B1500000: u32 = 4106;
pub const B2000000: u32 = 4107;
pub const B2500000: u32 = 4108;
pub const B3000000: u32 = 4109;
pub const B3500000: u32 = 4110;
pub const B4000000: u32 = 4111;
pub const __MAX_BAUD: u32 = 4111;
pub const CIBAUD: u32 = 269418496;
pub const CMSPAR: u32 = 1073741824;
pub const CRTSCTS: u32 = 2147483648;
pub const ISIG: u32 = 1;
pub const ICANON: u32 = 2;
pub const XCASE: u32 = 4;
pub const ECHO: u32 = 8;
pub const ECHOE: u32 = 16;
pub const ECHOK: u32 = 32;
pub const ECHONL: u32 = 64;
pub const NOFLSH: u32 = 128;
pub const TOSTOP: u32 = 256;
pub const ECHOCTL: u32 = 512;
pub const ECHOPRT: u32 = 1024;
pub const ECHOKE: u32 = 2048;
pub const FLUSHO: u32 = 4096;
pub const PENDIN: u32 = 16384;
pub const IEXTEN: u32 = 32768;
pub const EXTPROC: u32 = 65536;
pub const TCOOFF: u32 = 0;
pub const TCOON: u32 = 1;
pub const TCIOFF: u32 = 2;
pub const TCION: u32 = 3;
pub const TCIFLUSH: u32 = 0;
pub const TCOFLUSH: u32 = 1;
pub const TCIOFLUSH: u32 = 2;
pub const TCSANOW: u32 = 0;
pub const TCSADRAIN: u32 = 1;
pub const TCSAFLUSH: u32 = 2;
pub const TTYDEF_IFLAG: u32 = 11554;
pub const TTYDEF_OFLAG: u32 = 6149;
pub const TTYDEF_LFLAG: u32 = 35355;
pub const TTYDEF_CFLAG: u32 = 1440;
pub const TTYDEF_SPEED: u32 = 13;
pub const CEOL: u8 = 0u8;
pub const CERASE: u32 = 127;
pub const CSTATUS: u8 = 0u8;
pub const CMIN: u32 = 1;
pub const CQUIT: u32 = 28;
pub const CTIME: u32 = 0;
pub const CBRK: u8 = 0u8;
pub const _WCHAR_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __wint_t_defined: u32 = 1;
pub const _WINT_T: u32 = 1;
pub const __mbstate_t_defined: u32 = 1;
pub const WEOF: u32 = 4294967295;
pub const _SYS_IOCTL_H: u32 = 1;
pub const _IOC_NRBITS: u32 = 8;
pub const _IOC_TYPEBITS: u32 = 8;
pub const _IOC_SIZEBITS: u32 = 14;
pub const _IOC_DIRBITS: u32 = 2;
pub const _IOC_NRMASK: u32 = 255;
pub const _IOC_TYPEMASK: u32 = 255;
pub const _IOC_SIZEMASK: u32 = 16383;
pub const _IOC_DIRMASK: u32 = 3;
pub const _IOC_NRSHIFT: u32 = 0;
pub const _IOC_TYPESHIFT: u32 = 8;
pub const _IOC_SIZESHIFT: u32 = 16;
pub const _IOC_DIRSHIFT: u32 = 30;
pub const _IOC_NONE: u32 = 0;
pub const _IOC_WRITE: u32 = 1;
pub const _IOC_READ: u32 = 2;
pub const IOC_IN: u32 = 1073741824;
pub const IOC_OUT: u32 = 2147483648;
pub const IOC_INOUT: u32 = 3221225472;
pub const IOCSIZE_MASK: u32 = 1073676288;
pub const IOCSIZE_SHIFT: u32 = 16;
pub const TCGETS: u32 = 21505;
pub const TCSETS: u32 = 21506;
pub const TCSETSW: u32 = 21507;
pub const TCSETSF: u32 = 21508;
pub const TCGETA: u32 = 21509;
pub const TCSETA: u32 = 21510;
pub const TCSETAW: u32 = 21511;
pub const TCSETAF: u32 = 21512;
pub const TCSBRK: u32 = 21513;
pub const TCXONC: u32 = 21514;
pub const TCFLSH: u32 = 21515;
pub const TIOCEXCL: u32 = 21516;
pub const TIOCNXCL: u32 = 21517;
pub const TIOCSCTTY: u32 = 21518;
pub const TIOCGPGRP: u32 = 21519;
pub const TIOCSPGRP: u32 = 21520;
pub const TIOCOUTQ: u32 = 21521;
pub const TIOCSTI: u32 = 21522;
pub const TIOCGWINSZ: u32 = 21523;
pub const TIOCSWINSZ: u32 = 21524;
pub const TIOCMGET: u32 = 21525;
pub const TIOCMBIS: u32 = 21526;
pub const TIOCMBIC: u32 = 21527;
pub const TIOCMSET: u32 = 21528;
pub const TIOCGSOFTCAR: u32 = 21529;
pub const TIOCSSOFTCAR: u32 = 21530;
pub const FIONREAD: u32 = 21531;
pub const TIOCINQ: u32 = 21531;
pub const TIOCLINUX: u32 = 21532;
pub const TIOCCONS: u32 = 21533;
pub const TIOCGSERIAL: u32 = 21534;
pub const TIOCSSERIAL: u32 = 21535;
pub const TIOCPKT: u32 = 21536;
pub const FIONBIO: u32 = 21537;
pub const TIOCNOTTY: u32 = 21538;
pub const TIOCSETD: u32 = 21539;
pub const TIOCGETD: u32 = 21540;
pub const TCSBRKP: u32 = 21541;
pub const TIOCSBRK: u32 = 21543;
pub const TIOCCBRK: u32 = 21544;
pub const TIOCGSID: u32 = 21545;
pub const TIOCGRS485: u32 = 21550;
pub const TIOCSRS485: u32 = 21551;
pub const TCGETX: u32 = 21554;
pub const TCSETX: u32 = 21555;
pub const TCSETXF: u32 = 21556;
pub const TCSETXW: u32 = 21557;
pub const TIOCVHANGUP: u32 = 21559;
pub const FIONCLEX: u32 = 21584;
pub const FIOCLEX: u32 = 21585;
pub const FIOASYNC: u32 = 21586;
pub const TIOCSERCONFIG: u32 = 21587;
pub const TIOCSERGWILD: u32 = 21588;
pub const TIOCSERSWILD: u32 = 21589;
pub const TIOCGLCKTRMIOS: u32 = 21590;
pub const TIOCSLCKTRMIOS: u32 = 21591;
pub const TIOCSERGSTRUCT: u32 = 21592;
pub const TIOCSERGETLSR: u32 = 21593;
pub const TIOCSERGETMULTI: u32 = 21594;
pub const TIOCSERSETMULTI: u32 = 21595;
pub const TIOCMIWAIT: u32 = 21596;
pub const TIOCGICOUNT: u32 = 21597;
pub const FIOQSIZE: u32 = 21600;
pub const TIOCPKT_DATA: u32 = 0;
pub const TIOCPKT_FLUSHREAD: u32 = 1;
pub const TIOCPKT_FLUSHWRITE: u32 = 2;
pub const TIOCPKT_STOP: u32 = 4;
pub const TIOCPKT_START: u32 = 8;
pub const TIOCPKT_NOSTOP: u32 = 16;
pub const TIOCPKT_DOSTOP: u32 = 32;
pub const TIOCPKT_IOCTL: u32 = 64;
pub const TIOCSER_TEMT: u32 = 1;
pub const SIOCADDRT: u32 = 35083;
pub const SIOCDELRT: u32 = 35084;
pub const SIOCRTMSG: u32 = 35085;
pub const SIOCGIFNAME: u32 = 35088;
pub const SIOCSIFLINK: u32 = 35089;
pub const SIOCGIFCONF: u32 = 35090;
pub const SIOCGIFFLAGS: u32 = 35091;
pub const SIOCSIFFLAGS: u32 = 35092;
pub const SIOCGIFADDR: u32 = 35093;
pub const SIOCSIFADDR: u32 = 35094;
pub const SIOCGIFDSTADDR: u32 = 35095;
pub const SIOCSIFDSTADDR: u32 = 35096;
pub const SIOCGIFBRDADDR: u32 = 35097;
pub const SIOCSIFBRDADDR: u32 = 35098;
pub const SIOCGIFNETMASK: u32 = 35099;
pub const SIOCSIFNETMASK: u32 = 35100;
pub const SIOCGIFMETRIC: u32 = 35101;
pub const SIOCSIFMETRIC: u32 = 35102;
pub const SIOCGIFMEM: u32 = 35103;
pub const SIOCSIFMEM: u32 = 35104;
pub const SIOCGIFMTU: u32 = 35105;
pub const SIOCSIFMTU: u32 = 35106;
pub const SIOCSIFNAME: u32 = 35107;
pub const SIOCSIFHWADDR: u32 = 35108;
pub const SIOCGIFENCAP: u32 = 35109;
pub const SIOCSIFENCAP: u32 = 35110;
pub const SIOCGIFHWADDR: u32 = 35111;
pub const SIOCGIFSLAVE: u32 = 35113;
pub const SIOCSIFSLAVE: u32 = 35120;
pub const SIOCADDMULTI: u32 = 35121;
pub const SIOCDELMULTI: u32 = 35122;
pub const SIOCGIFINDEX: u32 = 35123;
pub const SIOGIFINDEX: u32 = 35123;
pub const SIOCSIFPFLAGS: u32 = 35124;
pub const SIOCGIFPFLAGS: u32 = 35125;
pub const SIOCDIFADDR: u32 = 35126;
pub const SIOCSIFHWBROADCAST: u32 = 35127;
pub const SIOCGIFCOUNT: u32 = 35128;
pub const SIOCGIFBR: u32 = 35136;
pub const SIOCSIFBR: u32 = 35137;
pub const SIOCGIFTXQLEN: u32 = 35138;
pub const SIOCSIFTXQLEN: u32 = 35139;
pub const SIOCDARP: u32 = 35155;
pub const SIOCGARP: u32 = 35156;
pub const SIOCSARP: u32 = 35157;
pub const SIOCDRARP: u32 = 35168;
pub const SIOCGRARP: u32 = 35169;
pub const SIOCSRARP: u32 = 35170;
pub const SIOCGIFMAP: u32 = 35184;
pub const SIOCSIFMAP: u32 = 35185;
pub const SIOCADDDLCI: u32 = 35200;
pub const SIOCDELDLCI: u32 = 35201;
pub const SIOCDEVPRIVATE: u32 = 35312;
pub const SIOCPROTOPRIVATE: u32 = 35296;
pub const NCC: u32 = 8;
pub const TIOCM_LE: u32 = 1;
pub const TIOCM_DTR: u32 = 2;
pub const TIOCM_RTS: u32 = 4;
pub const TIOCM_ST: u32 = 8;
pub const TIOCM_SR: u32 = 16;
pub const TIOCM_CTS: u32 = 32;
pub const TIOCM_CAR: u32 = 64;
pub const TIOCM_RNG: u32 = 128;
pub const TIOCM_DSR: u32 = 256;
pub const TIOCM_CD: u32 = 64;
pub const TIOCM_RI: u32 = 128;
pub const N_TTY: u32 = 0;
pub const N_SLIP: u32 = 1;
pub const N_MOUSE: u32 = 2;
pub const N_PPP: u32 = 3;
pub const N_STRIP: u32 = 4;
pub const N_AX25: u32 = 5;
pub const N_X25: u32 = 6;
pub const N_6PACK: u32 = 7;
pub const N_MASC: u32 = 8;
pub const N_R3964: u32 = 9;
pub const N_PROFIBUS_FDL: u32 = 10;
pub const N_IRDA: u32 = 11;
pub const N_SMSBLOCK: u32 = 12;
pub const N_HDLC: u32 = 13;
pub const N_SYNC_PPP: u32 = 14;
pub const N_HCI: u32 = 15;
pub const _PATH_BSHELL: &'static [u8; 8usize] = b"/bin/sh\0";
pub const _PATH_TMP: &'static [u8; 6usize] = b"/tmp/\0";
pub const _PATH_DEVNULL: &'static [u8; 10usize] = b"/dev/null\0";
pub const _PATH_TTY: &'static [u8; 9usize] = b"/dev/tty\0";
pub const _PATH_DEV: &'static [u8; 6usize] = b"/dev/\0";
pub const _PATH_DEFPATH: &'static [u8; 14usize] = b"/usr/bin:/bin\0";
pub const _INTTYPES_H: u32 = 1;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const __PRIPTR_PREFIX: &'static [u8; 2usize] = b"l\0";
pub const PRId8: &'static [u8; 2usize] = b"d\0";
pub const PRId16: &'static [u8; 2usize] = b"d\0";
pub const PRId32: &'static [u8; 2usize] = b"d\0";
pub const PRId64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdLEAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST16: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const PRIdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST8: &'static [u8; 2usize] = b"d\0";
pub const PRIdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const PRIdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const PRIi8: &'static [u8; 2usize] = b"i\0";
pub const PRIi16: &'static [u8; 2usize] = b"i\0";
pub const PRIi32: &'static [u8; 2usize] = b"i\0";
pub const PRIi64: &'static [u8; 3usize] = b"li\0";
pub const PRIiLEAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST16: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const PRIiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST8: &'static [u8; 2usize] = b"i\0";
pub const PRIiFAST16: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST32: &'static [u8; 3usize] = b"li\0";
pub const PRIiFAST64: &'static [u8; 3usize] = b"li\0";
pub const PRIo8: &'static [u8; 2usize] = b"o\0";
pub const PRIo16: &'static [u8; 2usize] = b"o\0";
pub const PRIo32: &'static [u8; 2usize] = b"o\0";
pub const PRIo64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoLEAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST16: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const PRIoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST8: &'static [u8; 2usize] = b"o\0";
pub const PRIoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const PRIoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const PRIu8: &'static [u8; 2usize] = b"u\0";
pub const PRIu16: &'static [u8; 2usize] = b"u\0";
pub const PRIu32: &'static [u8; 2usize] = b"u\0";
pub const PRIu64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuLEAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST16: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const PRIuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST8: &'static [u8; 2usize] = b"u\0";
pub const PRIuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const PRIuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const PRIx8: &'static [u8; 2usize] = b"x\0";
pub const PRIx16: &'static [u8; 2usize] = b"x\0";
pub const PRIx32: &'static [u8; 2usize] = b"x\0";
pub const PRIx64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxLEAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST16: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const PRIxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST8: &'static [u8; 2usize] = b"x\0";
pub const PRIxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const PRIxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const PRIX8: &'static [u8; 2usize] = b"X\0";
pub const PRIX16: &'static [u8; 2usize] = b"X\0";
pub const PRIX32: &'static [u8; 2usize] = b"X\0";
pub const PRIX64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXLEAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST16: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST32: &'static [u8; 2usize] = b"X\0";
pub const PRIXLEAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST8: &'static [u8; 2usize] = b"X\0";
pub const PRIXFAST16: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST32: &'static [u8; 3usize] = b"lX\0";
pub const PRIXFAST64: &'static [u8; 3usize] = b"lX\0";
pub const PRIdMAX: &'static [u8; 3usize] = b"ld\0";
pub const PRIiMAX: &'static [u8; 3usize] = b"li\0";
pub const PRIoMAX: &'static [u8; 3usize] = b"lo\0";
pub const PRIuMAX: &'static [u8; 3usize] = b"lu\0";
pub const PRIxMAX: &'static [u8; 3usize] = b"lx\0";
pub const PRIXMAX: &'static [u8; 3usize] = b"lX\0";
pub const PRIdPTR: &'static [u8; 3usize] = b"ld\0";
pub const PRIiPTR: &'static [u8; 3usize] = b"li\0";
pub const PRIoPTR: &'static [u8; 3usize] = b"lo\0";
pub const PRIuPTR: &'static [u8; 3usize] = b"lu\0";
pub const PRIxPTR: &'static [u8; 3usize] = b"lx\0";
pub const PRIXPTR: &'static [u8; 3usize] = b"lX\0";
pub const SCNd8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNd16: &'static [u8; 3usize] = b"hd\0";
pub const SCNd32: &'static [u8; 2usize] = b"d\0";
pub const SCNd64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdLEAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdLEAST16: &'static [u8; 3usize] = b"hd\0";
pub const SCNdLEAST32: &'static [u8; 2usize] = b"d\0";
pub const SCNdLEAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST8: &'static [u8; 4usize] = b"hhd\0";
pub const SCNdFAST16: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST32: &'static [u8; 3usize] = b"ld\0";
pub const SCNdFAST64: &'static [u8; 3usize] = b"ld\0";
pub const SCNi8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNi16: &'static [u8; 3usize] = b"hi\0";
pub const SCNi32: &'static [u8; 2usize] = b"i\0";
pub const SCNi64: &'static [u8; 3usize] = b"li\0";
pub const SCNiLEAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiLEAST16: &'static [u8; 3usize] = b"hi\0";
pub const SCNiLEAST32: &'static [u8; 2usize] = b"i\0";
pub const SCNiLEAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST8: &'static [u8; 4usize] = b"hhi\0";
pub const SCNiFAST16: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST32: &'static [u8; 3usize] = b"li\0";
pub const SCNiFAST64: &'static [u8; 3usize] = b"li\0";
pub const SCNu8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNu16: &'static [u8; 3usize] = b"hu\0";
pub const SCNu32: &'static [u8; 2usize] = b"u\0";
pub const SCNu64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuLEAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuLEAST16: &'static [u8; 3usize] = b"hu\0";
pub const SCNuLEAST32: &'static [u8; 2usize] = b"u\0";
pub const SCNuLEAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST8: &'static [u8; 4usize] = b"hhu\0";
pub const SCNuFAST16: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST32: &'static [u8; 3usize] = b"lu\0";
pub const SCNuFAST64: &'static [u8; 3usize] = b"lu\0";
pub const SCNo8: &'static [u8; 4usize] = b"hho\0";
pub const SCNo16: &'static [u8; 3usize] = b"ho\0";
pub const SCNo32: &'static [u8; 2usize] = b"o\0";
pub const SCNo64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoLEAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoLEAST16: &'static [u8; 3usize] = b"ho\0";
pub const SCNoLEAST32: &'static [u8; 2usize] = b"o\0";
pub const SCNoLEAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST8: &'static [u8; 4usize] = b"hho\0";
pub const SCNoFAST16: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST32: &'static [u8; 3usize] = b"lo\0";
pub const SCNoFAST64: &'static [u8; 3usize] = b"lo\0";
pub const SCNx8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNx16: &'static [u8; 3usize] = b"hx\0";
pub const SCNx32: &'static [u8; 2usize] = b"x\0";
pub const SCNx64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxLEAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxLEAST16: &'static [u8; 3usize] = b"hx\0";
pub const SCNxLEAST32: &'static [u8; 2usize] = b"x\0";
pub const SCNxLEAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST8: &'static [u8; 4usize] = b"hhx\0";
pub const SCNxFAST16: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST32: &'static [u8; 3usize] = b"lx\0";
pub const SCNxFAST64: &'static [u8; 3usize] = b"lx\0";
pub const SCNdMAX: &'static [u8; 3usize] = b"ld\0";
pub const SCNiMAX: &'static [u8; 3usize] = b"li\0";
pub const SCNoMAX: &'static [u8; 3usize] = b"lo\0";
pub const SCNuMAX: &'static [u8; 3usize] = b"lu\0";
pub const SCNxMAX: &'static [u8; 3usize] = b"lx\0";
pub const SCNdPTR: &'static [u8; 3usize] = b"ld\0";
pub const SCNiPTR: &'static [u8; 3usize] = b"li\0";
pub const SCNoPTR: &'static [u8; 3usize] = b"lo\0";
pub const SCNuPTR: &'static [u8; 3usize] = b"lu\0";
pub const SCNxPTR: &'static [u8; 3usize] = b"lx\0";
pub const SPLAY_NEGINF: i32 = -1;
pub const SPLAY_INF: u32 = 1;
pub const RB_BLACK: u32 = 0;
pub const RB_RED: u32 = 1;
pub const RB_NEGINF: i32 = -1;
pub const RB_INF: u32 = 1;
pub const VIS_OCTAL: u32 = 1;
pub const VIS_CSTYLE: u32 = 2;
pub const VIS_SP: u32 = 4;
pub const VIS_TAB: u32 = 8;
pub const VIS_NL: u32 = 16;
pub const VIS_WHITE: u32 = 28;
pub const VIS_SAFE: u32 = 32;
pub const VIS_DQ: u32 = 512;
pub const VIS_ALL: u32 = 1024;
pub const VIS_NOSLASH: u32 = 64;
pub const VIS_GLOB: u32 = 256;
pub const UNVIS_VALID: u32 = 1;
pub const UNVIS_VALIDPUSH: u32 = 2;
pub const UNVIS_NOCHAR: u32 = 3;
pub const UNVIS_SYNBAD: i32 = -1;
pub const UNVIS_ERROR: i32 = -2;
pub const UNVIS_END: u32 = 1;
pub const IBUF_READ_SIZE: u32 = 65535;
pub const MAX_IMSGSIZE: u32 = 16384;
pub const IMSGF_HASFD: u32 = 1;
pub const O_DIRECTORY: u32 = 0;
pub const INFTIM: i32 = -1;
pub const WAIT_ANY: i32 = -1;
pub const LOCK_SH: u32 = 0;
pub const LOCK_EX: u32 = 0;
pub const LOCK_NB: u32 = 0;
pub const PROTOCOL_VERSION: u32 = 8;
pub const TMUX_CONF: &'static [u8; 15usize] = b"/etc/tmux.conf\0";
pub const PANE_MINIMUM: u32 = 1;
pub const WINDOW_MINIMUM: u32 = 1;
pub const WINDOW_MAXIMUM: u32 = 10000;
pub const NAME_INTERVAL: u32 = 500000;
pub const READ_SIZE: u32 = 4096;
pub const ALERT_NONE: u32 = 0;
pub const ALERT_ANY: u32 = 1;
pub const ALERT_CURRENT: u32 = 2;
pub const ALERT_OTHER: u32 = 3;
pub const VISUAL_OFF: u32 = 0;
pub const VISUAL_ON: u32 = 1;
pub const VISUAL_BOTH: u32 = 2;
pub const KEYC_NONE: u64 = 281470681743360;
pub const KEYC_UNKNOWN: u64 = 281466386776064;
pub const KEYC_BASE: u32 = 268435456;
pub const KEYC_USER: u32 = 536870912;
pub const KEYC_NUSER: u32 = 1000;
pub const KEYC_ESCAPE: u64 = 35184372088832;
pub const KEYC_CTRL: u64 = 70368744177664;
pub const KEYC_SHIFT: u64 = 140737488355328;
pub const KEYC_XTERM: u64 = 281474976710656;
pub const KEYC_MASK_MOD: u64 = 527765581332480;
pub const KEYC_MASK_KEY: i64 = -527765581332481;
pub const KEYC_CLICK_TIMEOUT: u32 = 300;
pub const MODEKEY_EMACS: u32 = 0;
pub const MODEKEY_VI: u32 = 1;
pub const MODE_CURSOR: u32 = 1;
pub const MODE_INSERT: u32 = 2;
pub const MODE_KCURSOR: u32 = 4;
pub const MODE_KKEYPAD: u32 = 8;
pub const MODE_WRAP: u32 = 16;
pub const MODE_MOUSE_STANDARD: u32 = 32;
pub const MODE_MOUSE_BUTTON: u32 = 64;
pub const MODE_BLINKING: u32 = 128;
pub const MODE_MOUSE_UTF8: u32 = 256;
pub const MODE_MOUSE_SGR: u32 = 512;
pub const MODE_BRACKETPASTE: u32 = 1024;
pub const MODE_FOCUSON: u32 = 2048;
pub const MODE_MOUSE_ALL: u32 = 4096;
pub const MODE_ORIGIN: u32 = 8192;
pub const ALL_MODES: u32 = 16777215;
pub const ALL_MOUSE_MODES: u32 = 4192;
pub const UTF8_SIZE: u32 = 18;
pub const COLOUR_FLAG_256: u32 = 16777216;
pub const COLOUR_FLAG_RGB: u32 = 33554432;
pub const GRID_ATTR_BRIGHT: u32 = 1;
pub const GRID_ATTR_DIM: u32 = 2;
pub const GRID_ATTR_UNDERSCORE: u32 = 4;
pub const GRID_ATTR_BLINK: u32 = 8;
pub const GRID_ATTR_REVERSE: u32 = 16;
pub const GRID_ATTR_HIDDEN: u32 = 32;
pub const GRID_ATTR_ITALICS: u32 = 64;
pub const GRID_ATTR_CHARSET: u32 = 128;
pub const GRID_ATTR_STRIKETHROUGH: u32 = 256;
pub const GRID_ATTR_UNDERSCORE_2: u32 = 512;
pub const GRID_ATTR_UNDERSCORE_3: u32 = 1024;
pub const GRID_ATTR_UNDERSCORE_4: u32 = 2048;
pub const GRID_ATTR_UNDERSCORE_5: u32 = 4096;
pub const GRID_ATTR_ALL_UNDERSCORE: u32 = 7684;
pub const GRID_FLAG_FG256: u32 = 1;
pub const GRID_FLAG_BG256: u32 = 2;
pub const GRID_FLAG_PADDING: u32 = 4;
pub const GRID_FLAG_EXTENDED: u32 = 8;
pub const GRID_FLAG_SELECTED: u32 = 16;
pub const GRID_FLAG_NOPALETTE: u32 = 32;
pub const GRID_FLAG_CLEARED: u32 = 64;
pub const GRID_LINE_WRAPPED: u32 = 1;
pub const GRID_LINE_EXTENDED: u32 = 2;
pub const GRID_LINE_DEAD: u32 = 4;
pub const GRID_HISTORY: u32 = 1;
pub const WINDOW_MODE_TIMEOUT: u32 = 180;
pub const PANE_REDRAW: u32 = 1;
pub const PANE_DROP: u32 = 2;
pub const PANE_FOCUSED: u32 = 4;
pub const PANE_RESIZE: u32 = 8;
pub const PANE_RESIZEFORCE: u32 = 16;
pub const PANE_FOCUSPUSH: u32 = 32;
pub const PANE_INPUTOFF: u32 = 64;
pub const PANE_CHANGED: u32 = 128;
pub const PANE_EXITED: u32 = 256;
pub const PANE_STATUSREADY: u32 = 512;
pub const PANE_STATUSDRAWN: u32 = 1024;
pub const WINDOW_BELL: u32 = 1;
pub const WINDOW_ACTIVITY: u32 = 2;
pub const WINDOW_SILENCE: u32 = 4;
pub const WINDOW_ZOOMED: u32 = 8;
pub const WINDOW_STYLECHANGED: u32 = 16;
pub const WINDOW_ALERTFLAGS: u32 = 7;
pub const WINLINK_BELL: u32 = 1;
pub const WINLINK_ACTIVITY: u32 = 2;
pub const WINLINK_SILENCE: u32 = 4;
pub const WINLINK_ALERTFLAGS: u32 = 7;
pub const WINDOW_SIZE_LARGEST: u32 = 0;
pub const WINDOW_SIZE_SMALLEST: u32 = 1;
pub const WINDOW_SIZE_MANUAL: u32 = 2;
pub const SESSION_PASTING: u32 = 1;
pub const SESSION_ALERTED: u32 = 2;
pub const MOUSE_MASK_BUTTONS: u32 = 3;
pub const MOUSE_MASK_SHIFT: u32 = 4;
pub const MOUSE_MASK_META: u32 = 8;
pub const MOUSE_MASK_CTRL: u32 = 16;
pub const MOUSE_MASK_DRAG: u32 = 32;
pub const MOUSE_MASK_WHEEL: u32 = 64;
pub const MOUSE_WHEEL_UP: u32 = 0;
pub const MOUSE_WHEEL_DOWN: u32 = 1;
pub const TERM_256COLOURS: u32 = 1;
pub const TERM_EARLYWRAP: u32 = 2;
pub const TTY_NOCURSOR: u32 = 1;
pub const TTY_FREEZE: u32 = 2;
pub const TTY_TIMER: u32 = 4;
pub const TTY_UTF8: u32 = 8;
pub const TTY_STARTED: u32 = 16;
pub const TTY_OPENED: u32 = 32;
pub const TTY_FOCUS: u32 = 64;
pub const TTY_BLOCK: u32 = 128;
pub const CMD_FIND_PREFER_UNATTACHED: u32 = 1;
pub const CMD_FIND_QUIET: u32 = 2;
pub const CMD_FIND_WINDOW_INDEX: u32 = 4;
pub const CMD_FIND_DEFAULT_MARKED: u32 = 8;
pub const CMD_FIND_EXACT_SESSION: u32 = 16;
pub const CMD_FIND_EXACT_WINDOW: u32 = 32;
pub const CMD_FIND_CANFAIL: u32 = 64;
pub const CMD_CONTROL: u32 = 1;
pub const CMDQ_SHARED_REPEAT: u32 = 1;
pub const CMDQ_FIRED: u32 = 1;
pub const CMDQ_WAITING: u32 = 2;
pub const CMDQ_NOHOOKS: u32 = 4;
pub const CMD_STARTSERVER: u32 = 1;
pub const CMD_READONLY: u32 = 2;
pub const CMD_AFTERHOOK: u32 = 4;
pub const STATUS_LINES_LIMIT: u32 = 5;
pub const CLIENT_TERMINAL: u32 = 1;
pub const CLIENT_LOGIN: u32 = 2;
pub const CLIENT_EXIT: u32 = 4;
pub const CLIENT_REDRAWWINDOW: u32 = 8;
pub const CLIENT_REDRAWSTATUS: u32 = 16;
pub const CLIENT_REPEAT: u32 = 32;
pub const CLIENT_SUSPENDED: u32 = 64;
pub const CLIENT_ATTACHED: u32 = 128;
pub const CLIENT_IDENTIFY: u32 = 256;
pub const CLIENT_DEAD: u32 = 512;
pub const CLIENT_REDRAWBORDERS: u32 = 1024;
pub const CLIENT_READONLY: u32 = 2048;
pub const CLIENT_DETACHING: u32 = 4096;
pub const CLIENT_CONTROL: u32 = 8192;
pub const CLIENT_CONTROLCONTROL: u32 = 16384;
pub const CLIENT_FOCUSED: u32 = 32768;
pub const CLIENT_UTF8: u32 = 65536;
pub const CLIENT_256COLOURS: u32 = 131072;
pub const CLIENT_IDENTIFIED: u32 = 262144;
pub const CLIENT_STATUSFORCE: u32 = 524288;
pub const CLIENT_DOUBLECLICK: u32 = 1048576;
pub const CLIENT_TRIPLECLICK: u32 = 2097152;
pub const CLIENT_SIZECHANGED: u32 = 4194304;
pub const CLIENT_STATUSOFF: u32 = 8388608;
pub const CLIENT_REDRAWSTATUSALWAYS: u32 = 16777216;
pub const CLIENT_ALLREDRAWFLAGS: u32 = 16778264;
pub const CLIENT_NOSIZEFLAGS: u32 = 4672;
pub const PROMPT_SINGLE: u32 = 1;
pub const PROMPT_NUMERIC: u32 = 2;
pub const PROMPT_INCREMENTAL: u32 = 4;
pub const PROMPT_NOFORMAT: u32 = 8;
pub const KEY_BINDING_REPEAT: u32 = 1;
pub const OPTIONS_TABLE_IS_ARRAY: u32 = 1;
pub const CMD_TARGET_PANE_USAGE: &'static [u8; 17usize] = b"[-t target-pane]\0";
pub const CMD_TARGET_WINDOW_USAGE: &'static [u8; 19usize] = b"[-t target-window]\0";
pub const CMD_TARGET_SESSION_USAGE: &'static [u8; 20usize] = b"[-t target-session]\0";
pub const CMD_TARGET_CLIENT_USAGE: &'static [u8; 19usize] = b"[-t target-client]\0";
pub const CMD_SRCDST_PANE_USAGE: &'static [u8; 28usize] = b"[-s src-pane] [-t dst-pane]\0";
pub const CMD_SRCDST_WINDOW_USAGE: &'static [u8; 32usize] = b"[-s src-window] [-t dst-window]\0";
pub const CMD_SRCDST_SESSION_USAGE: &'static [u8; 34usize] = b"[-s src-session] [-t dst-session]\0";
pub const CMD_SRCDST_CLIENT_USAGE: &'static [u8; 32usize] = b"[-s src-client] [-t dst-client]\0";
pub const CMD_BUFFER_USAGE: &'static [u8; 17usize] = b"[-b buffer-name]\0";
pub const SPAWN_KILL: u32 = 1;
pub const SPAWN_DETACHED: u32 = 2;
pub const SPAWN_RESPAWN: u32 = 4;
pub const SPAWN_BEFORE: u32 = 8;
pub const SPAWN_NONOTIFY: u32 = 16;
pub const SPAWN_FULLSIZE: u32 = 32;
pub const FORMAT_STATUS: u32 = 1;
pub const FORMAT_FORCE: u32 = 2;
pub const FORMAT_NOJOBS: u32 = 4;
pub const FORMAT_VERBOSE: u32 = 8;
pub const FORMAT_NONE: u32 = 0;
pub const FORMAT_PANE: u32 = 2147483648;
pub const FORMAT_WINDOW: u32 = 1073741824;
pub const JOB_NOWAIT: u32 = 1;
pub const FORMAT_PLUGIN: u32 = 1;
pub const FORMAT_FUNCTION_PLUGIN: u32 = 2;
pub const CMD_PLUGIN: u32 = 3;
pub const NOTIFICATION_PLUGIN: u32 = 4;
pub const MULTI_PLUGIN: u32 = 5;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__fsid_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(
        ::std::mem::size_of::<timeval>(),
        16usize,
        concat!("Size of: ", stringify!(timeval))
    );
    assert_eq!(
        ::std::mem::align_of::<timeval>(),
        8usize,
        concat!("Alignment of ", stringify!(timeval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timeval>())).tv_usec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timeval),
            "::",
            stringify!(tv_usec)
        )
    );
}
pub type suseconds_t = __suseconds_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(
        ::std::mem::size_of::<__sigset_t>(),
        128usize,
        concat!("Size of: ", stringify!(__sigset_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__sigset_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__sigset_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__sigset_t>())).__val as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__sigset_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(
        ::std::mem::size_of::<timespec>(),
        16usize,
        concat!("Size of: ", stringify!(timespec))
    );
    assert_eq!(
        ::std::mem::align_of::<timespec>(),
        8usize,
        concat!("Alignment of ", stringify!(timespec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timespec>())).tv_nsec as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(timespec),
            "::",
            stringify!(tv_nsec)
        )
    );
}
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(
        ::std::mem::size_of::<fd_set>(),
        128usize,
        concat!("Size of: ", stringify!(fd_set))
    );
    assert_eq!(
        ::std::mem::align_of::<fd_set>(),
        8usize,
        concat!("Alignment of ", stringify!(fd_set))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<fd_set>())).__fds_bits as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(fd_set),
            "::",
            stringify!(__fds_bits)
        )
    );
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: ::std::os::raw::c_int,
    pub tz_dsttime: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_timezone() {
    assert_eq!(
        ::std::mem::size_of::<timezone>(),
        8usize,
        concat!("Size of: ", stringify!(timezone))
    );
    assert_eq!(
        ::std::mem::align_of::<timezone>(),
        4usize,
        concat!("Alignment of ", stringify!(timezone))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_minuteswest as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_minuteswest)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<timezone>())).tz_dsttime as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(timezone),
            "::",
            stringify!(tz_dsttime)
        )
    );
}
pub type __timezone_ptr_t = *mut timezone;
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: __timezone_ptr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> ::std::os::raw::c_int;
}
pub const __itimer_which_ITIMER_REAL: __itimer_which = 0;
pub const __itimer_which_ITIMER_VIRTUAL: __itimer_which = 1;
pub const __itimer_which_ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
#[test]
fn bindgen_test_layout_itimerval() {
    assert_eq!(
        ::std::mem::size_of::<itimerval>(),
        32usize,
        concat!("Size of: ", stringify!(itimerval))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerval>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerval>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerval),
            "::",
            stringify!(it_value)
        )
    );
}
pub type __itimer_which_t = ::std::os::raw::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lutimes(
        __file: *const ::std::os::raw::c_char,
        __tvp: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn futimes(__fd: ::std::os::raw::c_int, __tvp: *const timeval) -> ::std::os::raw::c_int;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
extern "C" {
    pub fn gnu_dev_major(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: __dev_t) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(
        __major: ::std::os::raw::c_uint,
        __minor: ::std::os::raw::c_uint,
    ) -> __dev_t;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_rwlock_arch_t() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_rwlock_arch_t>(),
        56usize,
        concat!("Size of: ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_rwlock_arch_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_rwlock_arch_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__readers as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__readers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__wrphase_futex as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__wrphase_futex)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__writers_futex as *const _ as usize
        },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__writers_futex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad3 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad4 as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__cur_writer as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__cur_writer)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__shared as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__shared)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__rwelision as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__rwelision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad1 as *const _ as usize },
        33usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__pad2 as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_rwlock_arch_t>())).__flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_rwlock_arch_t),
            "::",
            stringify!(__flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
    pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_1 {
    pub __wseq: ::std::os::raw::c_ulonglong,
    pub __wseq32: __pthread_cond_s__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_1__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_1>())).__wseq32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_1),
            "::",
            stringify!(__wseq32)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __pthread_cond_s__bindgen_ty_2 {
    pub __g1_start: ::std::os::raw::c_ulonglong,
    pub __g1_start32: __pthread_cond_s__bindgen_ty_2__bindgen_ty_1,
    _bindgen_union_align: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cond_s__bindgen_ty_2__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Size of: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__low
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__low)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2__bindgen_ty_1>())).__high
                as *const _ as usize
        },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(__high)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__pthread_cond_s__bindgen_ty_2>())).__g1_start32 as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s__bindgen_ty_2),
            "::",
            stringify!(__g1_start32)
        )
    );
}
#[test]
fn bindgen_test_layout___pthread_cond_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_cond_s>(),
        48usize,
        concat!("Size of: ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_cond_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_cond_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_refs as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_refs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g1_orig_size as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g1_orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__wrefs as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__wrefs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_cond_s>())).__g_signals as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_cond_s),
            "::",
            stringify!(__g_signals)
        )
    );
}
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutexattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutexattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutexattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_condattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_condattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_condattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_condattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_condattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_attr_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_attr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_attr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 6usize],
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_cond_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_cond_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlock_t>(),
        56usize,
        concat!("Size of: ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlock_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlock_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Size of: ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_rwlockattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_rwlockattr_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrier_t>(),
        32usize,
        concat!("Size of: ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrier_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_barrier_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrier_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrier_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Size of: ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_barrierattr_t>(),
        4usize,
        concat!("Alignment of ", stringify!(pthread_barrierattr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_barrierattr_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_barrierattr_t),
            "::",
            stringify!(__align)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[test]
fn bindgen_test_layout_iovec() {
    assert_eq!(
        ::std::mem::size_of::<iovec>(),
        16usize,
        concat!("Size of: ", stringify!(iovec))
    );
    assert_eq!(
        ::std::mem::align_of::<iovec>(),
        8usize,
        concat!("Alignment of ", stringify!(iovec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<iovec>())).iov_len as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(iovec),
            "::",
            stringify!(iov_len)
        )
    );
}
extern "C" {
    pub fn readv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn writev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn preadv(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
extern "C" {
    pub fn pwritev(
        __fd: ::std::os::raw::c_int,
        __iovec: *const iovec,
        __count: ::std::os::raw::c_int,
        __offset: __off_t,
    ) -> isize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = u32;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[test]
fn bindgen_test_layout_sockaddr() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(sockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[test]
fn bindgen_test_layout_sockaddr_storage() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_storage>(),
        128usize,
        concat!("Size of: ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_storage>(),
        8usize,
        concat!("Alignment of ", stringify!(sockaddr_storage))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).ss_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(ss_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_padding as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_padding)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_storage>())).__ss_align as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_storage),
            "::",
            stringify!(__ss_align)
        )
    );
}
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_BATCH: _bindgen_ty_1 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_1 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msghdr() {
    assert_eq!(
        ::std::mem::size_of::<msghdr>(),
        56usize,
        concat!("Size of: ", stringify!(msghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<msghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(msghdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_namelen as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_namelen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iov as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iov)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_iovlen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_iovlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_control as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_control)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_controllen as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_controllen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msghdr>())).msg_flags as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(msghdr),
            "::",
            stringify!(msg_flags)
        )
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[test]
fn bindgen_test_layout_cmsghdr() {
    assert_eq!(
        ::std::mem::size_of::<cmsghdr>(),
        16usize,
        concat!("Size of: ", stringify!(cmsghdr))
    );
    assert_eq!(
        ::std::mem::align_of::<cmsghdr>(),
        8usize,
        concat!("Alignment of ", stringify!(cmsghdr))
    );
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_linger() {
    assert_eq!(
        ::std::mem::size_of::<linger>(),
        8usize,
        concat!("Size of: ", stringify!(linger))
    );
    assert_eq!(
        ::std::mem::align_of::<linger>(),
        4usize,
        concat!("Alignment of ", stringify!(linger))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_onoff as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_onoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<linger>())).l_linger as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(linger),
            "::",
            stringify!(l_linger)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[test]
fn bindgen_test_layout_osockaddr() {
    assert_eq!(
        ::std::mem::size_of::<osockaddr>(),
        16usize,
        concat!("Size of: ", stringify!(osockaddr))
    );
    assert_eq!(
        ::std::mem::align_of::<osockaddr>(),
        2usize,
        concat!("Alignment of ", stringify!(osockaddr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<osockaddr>())).sa_data as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(osockaddr),
            "::",
            stringify!(sa_data)
        )
    );
}
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = u32;
extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[test]
fn bindgen_test_layout_in_addr() {
    assert_eq!(
        ::std::mem::size_of::<in_addr>(),
        4usize,
        concat!("Size of: ", stringify!(in_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_addr>())).s_addr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_addr),
            "::",
            stringify!(s_addr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout_ip_opts() {
    assert_eq!(
        ::std::mem::size_of::<ip_opts>(),
        44usize,
        concat!("Size of: ", stringify!(ip_opts))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_opts>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_opts))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_dst as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_opts>())).ip_opts as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_opts),
            "::",
            stringify!(ip_opts)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ip_mreqn() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreqn>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreqn))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreqn>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreqn))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_address as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_address)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreqn>())).imr_ifindex as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreqn),
            "::",
            stringify!(imr_ifindex)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[test]
fn bindgen_test_layout_in_pktinfo() {
    assert_eq!(
        ::std::mem::size_of::<in_pktinfo>(),
        12usize,
        concat!("Size of: ", stringify!(in_pktinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<in_pktinfo>(),
        4usize,
        concat!("Alignment of ", stringify!(in_pktinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_ifindex as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_ifindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_spec_dst as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_spec_dst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in_pktinfo>())).ipi_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(in_pktinfo),
            "::",
            stringify!(ipi_addr)
        )
    );
}
pub const IPPROTO_IP: _bindgen_ty_4 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_4 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_4 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_4 = 4;
pub const IPPROTO_TCP: _bindgen_ty_4 = 6;
pub const IPPROTO_EGP: _bindgen_ty_4 = 8;
pub const IPPROTO_PUP: _bindgen_ty_4 = 12;
pub const IPPROTO_UDP: _bindgen_ty_4 = 17;
pub const IPPROTO_IDP: _bindgen_ty_4 = 22;
pub const IPPROTO_TP: _bindgen_ty_4 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_4 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_4 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_4 = 46;
pub const IPPROTO_GRE: _bindgen_ty_4 = 47;
pub const IPPROTO_ESP: _bindgen_ty_4 = 50;
pub const IPPROTO_AH: _bindgen_ty_4 = 51;
pub const IPPROTO_MTP: _bindgen_ty_4 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_4 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_4 = 98;
pub const IPPROTO_PIM: _bindgen_ty_4 = 103;
pub const IPPROTO_COMP: _bindgen_ty_4 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_4 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_4 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_4 = 137;
pub const IPPROTO_RAW: _bindgen_ty_4 = 255;
pub const IPPROTO_MAX: _bindgen_ty_4 = 256;
pub type _bindgen_ty_4 = u32;
pub const IPPROTO_HOPOPTS: _bindgen_ty_5 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_5 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_5 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_5 = 58;
pub const IPPROTO_NONE: _bindgen_ty_5 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_5 = 60;
pub const IPPROTO_MH: _bindgen_ty_5 = 135;
pub type _bindgen_ty_5 = u32;
pub type in_port_t = u16;
pub mod _bindgen_ty_6 {
    pub type Type = u32;
    pub const IPPORT_ECHO: Type = 7;
    pub const IPPORT_DISCARD: Type = 9;
    pub const IPPORT_SYSTAT: Type = 11;
    pub const IPPORT_DAYTIME: Type = 13;
    pub const IPPORT_NETSTAT: Type = 15;
    pub const IPPORT_FTP: Type = 21;
    pub const IPPORT_TELNET: Type = 23;
    pub const IPPORT_SMTP: Type = 25;
    pub const IPPORT_TIMESERVER: Type = 37;
    pub const IPPORT_NAMESERVER: Type = 42;
    pub const IPPORT_WHOIS: Type = 43;
    pub const IPPORT_MTP: Type = 57;
    pub const IPPORT_TFTP: Type = 69;
    pub const IPPORT_RJE: Type = 77;
    pub const IPPORT_FINGER: Type = 79;
    pub const IPPORT_TTYLINK: Type = 87;
    pub const IPPORT_SUPDUP: Type = 95;
    pub const IPPORT_EXECSERVER: Type = 512;
    pub const IPPORT_LOGINSERVER: Type = 513;
    pub const IPPORT_CMDSERVER: Type = 514;
    pub const IPPORT_EFSSERVER: Type = 520;
    pub const IPPORT_BIFFUDP: Type = 512;
    pub const IPPORT_WHOSERVER: Type = 513;
    pub const IPPORT_ROUTESERVER: Type = 520;
    pub const IPPORT_RESERVED: Type = 1024;
    pub const IPPORT_USERRESERVED: Type = 5000;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
    _bindgen_union_align: [u32; 4usize],
}
#[test]
fn bindgen_test_layout_in6_addr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr8 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr8)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr16 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr16)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<in6_addr__bindgen_ty_1>())).__u6_addr32 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr__bindgen_ty_1),
            "::",
            stringify!(__u6_addr32)
        )
    );
}
#[test]
fn bindgen_test_layout_in6_addr() {
    assert_eq!(
        ::std::mem::size_of::<in6_addr>(),
        16usize,
        concat!("Size of: ", stringify!(in6_addr))
    );
    assert_eq!(
        ::std::mem::align_of::<in6_addr>(),
        4usize,
        concat!("Alignment of ", stringify!(in6_addr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<in6_addr>())).__in6_u as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(in6_addr),
            "::",
            stringify!(__in6_u)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}in6addr_any"]
    pub static in6addr_any: in6_addr;
}
extern "C" {
    #[link_name = "\u{1}in6addr_loopback"]
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_sockaddr_in() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in>(),
        16usize,
        concat!("Size of: ", stringify!(sockaddr_in))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_addr as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in>())).sin_zero as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in),
            "::",
            stringify!(sin_zero)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[test]
fn bindgen_test_layout_sockaddr_in6() {
    assert_eq!(
        ::std::mem::size_of::<sockaddr_in6>(),
        28usize,
        concat!("Size of: ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        ::std::mem::align_of::<sockaddr_in6>(),
        4usize,
        concat!("Alignment of ", stringify!(sockaddr_in6))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_family as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_port as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_flowinfo as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_flowinfo)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_addr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sockaddr_in6>())).sin6_scope_id as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(sockaddr_in6),
            "::",
            stringify!(sin6_scope_id)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq>(),
        8usize,
        concat!("Size of: ", stringify!(ip_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq),
            "::",
            stringify!(imr_interface)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[test]
fn bindgen_test_layout_ip_mreq_source() {
    assert_eq!(
        ::std::mem::size_of::<ip_mreq_source>(),
        12usize,
        concat!("Size of: ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_mreq_source>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_mreq_source))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_mreq_source>())).imr_sourceaddr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_mreq_source),
            "::",
            stringify!(imr_sourceaddr)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_ipv6_mreq() {
    assert_eq!(
        ::std::mem::size_of::<ipv6_mreq>(),
        20usize,
        concat!("Size of: ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        ::std::mem::align_of::<ipv6_mreq>(),
        4usize,
        concat!("Alignment of ", stringify!(ipv6_mreq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ipv6_mreq>())).ipv6mr_interface as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ipv6_mreq),
            "::",
            stringify!(ipv6mr_interface)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_req() {
    assert_eq!(
        ::std::mem::size_of::<group_req>(),
        136usize,
        concat!("Size of: ", stringify!(group_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_req>())).gr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_req),
            "::",
            stringify!(gr_group)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[test]
fn bindgen_test_layout_group_source_req() {
    assert_eq!(
        ::std::mem::size_of::<group_source_req>(),
        264usize,
        concat!("Size of: ", stringify!(group_source_req))
    );
    assert_eq!(
        ::std::mem::align_of::<group_source_req>(),
        8usize,
        concat!("Alignment of ", stringify!(group_source_req))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_source_req>())).gsr_source as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_source_req),
            "::",
            stringify!(gsr_source)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[test]
fn bindgen_test_layout_ip_msfilter() {
    assert_eq!(
        ::std::mem::size_of::<ip_msfilter>(),
        20usize,
        concat!("Size of: ", stringify!(ip_msfilter))
    );
    assert_eq!(
        ::std::mem::align_of::<ip_msfilter>(),
        4usize,
        concat!("Alignment of ", stringify!(ip_msfilter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_multiaddr as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_multiaddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_interface as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_fmode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_numsrc as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ip_msfilter>())).imsf_slist as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ip_msfilter),
            "::",
            stringify!(imsf_slist)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[test]
fn bindgen_test_layout_group_filter() {
    assert_eq!(
        ::std::mem::size_of::<group_filter>(),
        272usize,
        concat!("Size of: ", stringify!(group_filter))
    );
    assert_eq!(
        ::std::mem::align_of::<group_filter>(),
        8usize,
        concat!("Alignment of ", stringify!(group_filter))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_interface as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_interface)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_group as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_fmode as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_fmode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_numsrc as *const _ as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_numsrc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<group_filter>())).gf_slist as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(group_filter),
            "::",
            stringify!(gf_slist)
        )
    );
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut ::std::os::raw::c_char,
    pub r_aliases: *mut *mut ::std::os::raw::c_char,
    pub r_number: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_rpcent() {
    assert_eq!(
        ::std::mem::size_of::<rpcent>(),
        24usize,
        concat!("Size of: ", stringify!(rpcent))
    );
    assert_eq!(
        ::std::mem::align_of::<rpcent>(),
        8usize,
        concat!("Alignment of ", stringify!(rpcent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<rpcent>())).r_number as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(rpcent),
            "::",
            stringify!(r_number)
        )
    );
}
extern "C" {
    pub fn setrpcent(__stayopen: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn getrpcbyname(__name: *const ::std::os::raw::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(__number: ::std::os::raw::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcbynumber_r(
        __number: ::std::os::raw::c_int,
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrpcent_r(
        __result_buf: *mut rpcent,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut ::std::os::raw::c_char,
    pub n_aliases: *mut *mut ::std::os::raw::c_char,
    pub n_addrtype: ::std::os::raw::c_int,
    pub n_net: u32,
}
#[test]
fn bindgen_test_layout_netent() {
    assert_eq!(
        ::std::mem::size_of::<netent>(),
        24usize,
        concat!("Size of: ", stringify!(netent))
    );
    assert_eq!(
        ::std::mem::align_of::<netent>(),
        8usize,
        concat!("Alignment of ", stringify!(netent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<netent>())).n_net as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(netent),
            "::",
            stringify!(n_net)
        )
    );
}
extern "C" {
    pub fn __h_errno_location() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn herror(__str: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hstrerror(__err_num: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut ::std::os::raw::c_char,
    pub h_aliases: *mut *mut ::std::os::raw::c_char,
    pub h_addrtype: ::std::os::raw::c_int,
    pub h_length: ::std::os::raw::c_int,
    pub h_addr_list: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_hostent() {
    assert_eq!(
        ::std::mem::size_of::<hostent>(),
        32usize,
        concat!("Size of: ", stringify!(hostent))
    );
    assert_eq!(
        ::std::mem::align_of::<hostent>(),
        8usize,
        concat!("Alignment of ", stringify!(hostent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_addrtype as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addrtype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hostent>())).h_addr_list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hostent),
            "::",
            stringify!(h_addr_list)
        )
    );
}
extern "C" {
    pub fn sethostent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn gethostbyaddr(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(__name: *const ::std::os::raw::c_char) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname2(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostent_r(
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyaddr_r(
        __addr: *const ::std::os::raw::c_void,
        __len: __socklen_t,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gethostbyname2_r(
        __name: *const ::std::os::raw::c_char,
        __af: ::std::os::raw::c_int,
        __result_buf: *mut hostent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getnetbyaddr(__net: u32, __type: ::std::os::raw::c_int) -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(__name: *const ::std::os::raw::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent_r(
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyaddr_r(
        __net: u32,
        __type: ::std::os::raw::c_int,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetbyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut netent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut ::std::os::raw::c_char,
    pub s_aliases: *mut *mut ::std::os::raw::c_char,
    pub s_port: ::std::os::raw::c_int,
    pub s_proto: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_servent() {
    assert_eq!(
        ::std::mem::size_of::<servent>(),
        32usize,
        concat!("Size of: ", stringify!(servent))
    );
    assert_eq!(
        ::std::mem::align_of::<servent>(),
        8usize,
        concat!("Alignment of ", stringify!(servent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_port as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_port)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<servent>())).s_proto as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(servent),
            "::",
            stringify!(s_proto)
        )
    );
}
extern "C" {
    pub fn setservent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn getservbyname(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservbyport(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
    ) -> *mut servent;
}
extern "C" {
    pub fn getservent_r(
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyname_r(
        __name: *const ::std::os::raw::c_char,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getservbyport_r(
        __port: ::std::os::raw::c_int,
        __proto: *const ::std::os::raw::c_char,
        __result_buf: *mut servent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut ::std::os::raw::c_char,
    pub p_aliases: *mut *mut ::std::os::raw::c_char,
    pub p_proto: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_protoent() {
    assert_eq!(
        ::std::mem::size_of::<protoent>(),
        24usize,
        concat!("Size of: ", stringify!(protoent))
    );
    assert_eq!(
        ::std::mem::align_of::<protoent>(),
        8usize,
        concat!("Alignment of ", stringify!(protoent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_aliases as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_aliases)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<protoent>())).p_proto as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(protoent),
            "::",
            stringify!(p_proto)
        )
    );
}
extern "C" {
    pub fn setprotoent(__stay_open: ::std::os::raw::c_int);
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getprotobyname(__name: *const ::std::os::raw::c_char) -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(__proto: ::std::os::raw::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent_r(
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobyname_r(
        __name: *const ::std::os::raw::c_char,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprotobynumber_r(
        __proto: ::std::os::raw::c_int,
        __result_buf: *mut protoent,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setnetgrent(__netgroup: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn getnetgrent(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn innetgr(
        __netgroup: *const ::std::os::raw::c_char,
        __host: *const ::std::os::raw::c_char,
        __user: *const ::std::os::raw::c_char,
        __domain: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getnetgrent_r(
        __hostp: *mut *mut ::std::os::raw::c_char,
        __userp: *mut *mut ::std::os::raw::c_char,
        __domainp: *mut *mut ::std::os::raw::c_char,
        __buffer: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rcmd_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_ushort,
        __locuser: *const ::std::os::raw::c_char,
        __remuser: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rexec_af(
        __ahost: *mut *mut ::std::os::raw::c_char,
        __rport: ::std::os::raw::c_int,
        __name: *const ::std::os::raw::c_char,
        __pass: *const ::std::os::raw::c_char,
        __cmd: *const ::std::os::raw::c_char,
        __fd2p: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ruserok_af(
        __rhost: *const ::std::os::raw::c_char,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok(
        __raddr: u32,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn iruserok_af(
        __raddr: *const ::std::os::raw::c_void,
        __suser: ::std::os::raw::c_int,
        __remuser: *const ::std::os::raw::c_char,
        __locuser: *const ::std::os::raw::c_char,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport(__alport: *mut ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rresvport_af(
        __alport: *mut ::std::os::raw::c_int,
        __af: sa_family_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: ::std::os::raw::c_int,
    pub ai_family: ::std::os::raw::c_int,
    pub ai_socktype: ::std::os::raw::c_int,
    pub ai_protocol: ::std::os::raw::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut ::std::os::raw::c_char,
    pub ai_next: *mut addrinfo,
}
#[test]
fn bindgen_test_layout_addrinfo() {
    assert_eq!(
        ::std::mem::size_of::<addrinfo>(),
        48usize,
        concat!("Size of: ", stringify!(addrinfo))
    );
    assert_eq!(
        ::std::mem::align_of::<addrinfo>(),
        8usize,
        concat!("Alignment of ", stringify!(addrinfo))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_family as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_family)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_socktype as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_socktype)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_protocol as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_protocol)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addrlen as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addrlen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_addr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_addr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_canonname as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_canonname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<addrinfo>())).ai_next as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(addrinfo),
            "::",
            stringify!(ai_next)
        )
    );
}
extern "C" {
    pub fn getaddrinfo(
        __name: *const ::std::os::raw::c_char,
        __service: *const ::std::os::raw::c_char,
        __req: *const addrinfo,
        __pai: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freeaddrinfo(__ai: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(__ecode: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn getnameinfo(
        __sa: *const sockaddr,
        __salen: socklen_t,
        __host: *mut ::std::os::raw::c_char,
        __hostlen: socklen_t,
        __serv: *mut ::std::os::raw::c_char,
        __servlen: socklen_t,
        __flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __errno_location() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(
        ::std::mem::size_of::<tm>(),
        56usize,
        concat!("Size of: ", stringify!(tm))
    );
    assert_eq!(
        ::std::mem::align_of::<tm>(),
        8usize,
        concat!("Alignment of ", stringify!(tm))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_sec as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_sec)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_min as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_hour as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_hour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mday as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_mon as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_mon)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_year as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_year)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_wday as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_wday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_yday as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_yday)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_isdst as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_isdst)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_gmtoff as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_gmtoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tm>())).tm_zone as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tm),
            "::",
            stringify!(tm_zone)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(
        ::std::mem::size_of::<itimerspec>(),
        32usize,
        concat!("Size of: ", stringify!(itimerspec))
    );
    assert_eq!(
        ::std::mem::align_of::<itimerspec>(),
        8usize,
        concat!("Alignment of ", stringify!(itimerspec))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_interval as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_interval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<itimerspec>())).it_value as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(itimerspec),
            "::",
            stringify!(it_value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        232usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        8usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__locales as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_b as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_tolower as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__ctype_toupper as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__locale_struct>())).__names as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut ::std::os::raw::c_char,
        __maxsize: usize,
        __format: *const ::std::os::raw::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(
        __tp: *const tm,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        __timer: *const time_t,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "\u{1}__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "\u{1}daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(
        __requested_time: *const timespec,
        __remaining: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: ::std::os::raw::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: ::std::os::raw::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(
        __ts: *mut timespec,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evutil_monotonic_timer {
    _unused: [u8; 0],
}
extern "C" {
    pub fn evutil_date_rfc1123(
        date: *mut ::std::os::raw::c_char,
        datelen: usize,
        tm: *const tm,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_monotonic_timer_new() -> *mut evutil_monotonic_timer;
}
extern "C" {
    pub fn evutil_monotonic_timer_free(timer: *mut evutil_monotonic_timer);
}
extern "C" {
    pub fn evutil_configure_monotonic_time(
        timer: *mut evutil_monotonic_timer,
        flags: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_gettime_monotonic(
        timer: *mut evutil_monotonic_timer,
        tp: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_socketpair(
        d: ::std::os::raw::c_int,
        type_: ::std::os::raw::c_int,
        protocol: ::std::os::raw::c_int,
        sv: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_make_socket_nonblocking(sock: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_make_listen_socket_reuseable(
        sock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_make_listen_socket_reuseable_port(
        sock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_make_socket_closeonexec(sock: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_closesocket(sock: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_make_tcp_listen_socket_deferred(
        sock: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_strtoll(
        s: *const ::std::os::raw::c_char,
        endptr: *mut *mut ::std::os::raw::c_char,
        base: ::std::os::raw::c_int,
    ) -> i64;
}
extern "C" {
    pub fn evutil_snprintf(
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
        format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_vsnprintf(
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
        format: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_inet_ntop(
        af: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_void,
        dst: *mut ::std::os::raw::c_char,
        len: usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn evutil_inet_pton(
        af: ::std::os::raw::c_int,
        src: *const ::std::os::raw::c_char,
        dst: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_parse_sockaddr_port(
        str: *const ::std::os::raw::c_char,
        out: *mut sockaddr,
        outlen: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_sockaddr_cmp(
        sa1: *const sockaddr,
        sa2: *const sockaddr,
        include_port: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_ascii_strcasecmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_ascii_strncasecmp(
        str1: *const ::std::os::raw::c_char,
        str2: *const ::std::os::raw::c_char,
        n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_getaddrinfo(
        nodename: *const ::std::os::raw::c_char,
        servname: *const ::std::os::raw::c_char,
        hints_in: *const addrinfo,
        res: *mut *mut addrinfo,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_freeaddrinfo(ai: *mut addrinfo);
}
extern "C" {
    pub fn evutil_gai_strerror(err: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn evutil_secure_rng_get_bytes(buf: *mut ::std::os::raw::c_void, n: usize);
}
extern "C" {
    pub fn evutil_secure_rng_init() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_secure_rng_set_urandom_device_file(
        fname: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evutil_secure_rng_add_bytes(dat: *const ::std::os::raw::c_char, datlen: usize);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evkeyval {
    pub next: evkeyval__bindgen_ty_1,
    pub key: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evkeyval__bindgen_ty_1 {
    pub tqe_next: *mut evkeyval,
    pub tqe_prev: *mut *mut evkeyval,
}
#[test]
fn bindgen_test_layout_evkeyval__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<evkeyval__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(evkeyval__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<evkeyval__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(evkeyval__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evkeyval__bindgen_ty_1>())).tqe_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evkeyval__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evkeyval__bindgen_ty_1>())).tqe_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evkeyval__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_evkeyval() {
    assert_eq!(
        ::std::mem::size_of::<evkeyval>(),
        32usize,
        concat!("Size of: ", stringify!(evkeyval))
    );
    assert_eq!(
        ::std::mem::align_of::<evkeyval>(),
        8usize,
        concat!("Alignment of ", stringify!(evkeyval))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evkeyval>())).next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evkeyval),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evkeyval>())).key as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(evkeyval),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evkeyval>())).value as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(evkeyval),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evkeyvalq {
    pub tqh_first: *mut evkeyval,
    pub tqh_last: *mut *mut evkeyval,
}
#[test]
fn bindgen_test_layout_evkeyvalq() {
    assert_eq!(
        ::std::mem::size_of::<evkeyvalq>(),
        16usize,
        concat!("Size of: ", stringify!(evkeyvalq))
    );
    assert_eq!(
        ::std::mem::align_of::<evkeyvalq>(),
        8usize,
        concat!("Alignment of ", stringify!(evkeyvalq))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evkeyvalq>())).tqh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evkeyvalq),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evkeyvalq>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evkeyvalq),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct event_callback {
    pub evcb_active_next: event_callback__bindgen_ty_1,
    pub evcb_flags: ::std::os::raw::c_short,
    pub evcb_pri: u8,
    pub evcb_closure: u8,
    pub evcb_cb_union: event_callback__bindgen_ty_2,
    pub evcb_arg: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event_callback__bindgen_ty_1 {
    pub tqe_next: *mut event_callback,
    pub tqe_prev: *mut *mut event_callback,
}
#[test]
fn bindgen_test_layout_event_callback__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<event_callback__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(event_callback__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<event_callback__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(event_callback__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event_callback__bindgen_ty_1>())).tqe_next as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event_callback__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event_callback__bindgen_ty_1>())).tqe_prev as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(event_callback__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union event_callback__bindgen_ty_2 {
    pub evcb_callback: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_short,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    pub evcb_selfcb: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut event_callback, arg2: *mut ::std::os::raw::c_void),
    >,
    pub evcb_evfinalize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut event, arg2: *mut ::std::os::raw::c_void),
    >,
    pub evcb_cbfinalize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut event_callback, arg2: *mut ::std::os::raw::c_void),
    >,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout_event_callback__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<event_callback__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(event_callback__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<event_callback__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(event_callback__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event_callback__bindgen_ty_2>())).evcb_callback as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event_callback__bindgen_ty_2),
            "::",
            stringify!(evcb_callback)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event_callback__bindgen_ty_2>())).evcb_selfcb as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event_callback__bindgen_ty_2),
            "::",
            stringify!(evcb_selfcb)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event_callback__bindgen_ty_2>())).evcb_evfinalize as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event_callback__bindgen_ty_2),
            "::",
            stringify!(evcb_evfinalize)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event_callback__bindgen_ty_2>())).evcb_cbfinalize as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event_callback__bindgen_ty_2),
            "::",
            stringify!(evcb_cbfinalize)
        )
    );
}
#[test]
fn bindgen_test_layout_event_callback() {
    assert_eq!(
        ::std::mem::size_of::<event_callback>(),
        40usize,
        concat!("Size of: ", stringify!(event_callback))
    );
    assert_eq!(
        ::std::mem::align_of::<event_callback>(),
        8usize,
        concat!("Alignment of ", stringify!(event_callback))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event_callback>())).evcb_active_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event_callback),
            "::",
            stringify!(evcb_active_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event_callback>())).evcb_flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(event_callback),
            "::",
            stringify!(evcb_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event_callback>())).evcb_pri as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(event_callback),
            "::",
            stringify!(evcb_pri)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event_callback>())).evcb_closure as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(event_callback),
            "::",
            stringify!(evcb_closure)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event_callback>())).evcb_cb_union as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(event_callback),
            "::",
            stringify!(evcb_cb_union)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event_callback>())).evcb_arg as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(event_callback),
            "::",
            stringify!(evcb_arg)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event_base {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct event {
    pub ev_evcallback: event_callback,
    pub ev_timeout_pos: event__bindgen_ty_1,
    pub ev_fd: ::std::os::raw::c_int,
    pub ev_base: *mut event_base,
    pub ev_: event__bindgen_ty_2,
    pub ev_events: ::std::os::raw::c_short,
    pub ev_res: ::std::os::raw::c_short,
    pub ev_timeout: timeval,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union event__bindgen_ty_1 {
    pub ev_next_with_common_timeout: event__bindgen_ty_1__bindgen_ty_1,
    pub min_heap_idx: ::std::os::raw::c_int,
    _bindgen_union_align: [u64; 2usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event__bindgen_ty_1__bindgen_ty_1 {
    pub tqe_next: *mut event,
    pub tqe_prev: *mut *mut event,
}
#[test]
fn bindgen_test_layout_event__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<event__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(event__bindgen_ty_1__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<event__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(event__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_1__bindgen_ty_1>())).tqe_next as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_1__bindgen_ty_1>())).tqe_prev as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_event__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<event__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(event__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<event__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(event__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_1>())).ev_next_with_common_timeout as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_1),
            "::",
            stringify!(ev_next_with_common_timeout)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_1>())).min_heap_idx as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_1),
            "::",
            stringify!(min_heap_idx)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union event__bindgen_ty_2 {
    pub ev_io: event__bindgen_ty_2__bindgen_ty_1,
    pub ev_signal: event__bindgen_ty_2__bindgen_ty_2,
    _bindgen_union_align: [u64; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event__bindgen_ty_2__bindgen_ty_1 {
    pub ev_io_next: event__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1,
    pub ev_timeout: timeval,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1 {
    pub le_next: *mut event,
    pub le_prev: *mut *mut event,
}
#[test]
fn bindgen_test_layout_event__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<event__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(event__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<event__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(event__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>())).le_next
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(le_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1>())).le_prev
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_2__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(le_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_event__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<event__bindgen_ty_2__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(event__bindgen_ty_2__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<event__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(event__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_2__bindgen_ty_1>())).ev_io_next as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(ev_io_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_2__bindgen_ty_1>())).ev_timeout as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(ev_timeout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event__bindgen_ty_2__bindgen_ty_2 {
    pub ev_signal_next: event__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1,
    pub ev_ncalls: ::std::os::raw::c_short,
    pub ev_pncalls: *mut ::std::os::raw::c_short,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1 {
    pub le_next: *mut event,
    pub le_prev: *mut *mut event,
}
#[test]
fn bindgen_test_layout_event__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<event__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1>(),
        16usize,
        concat!(
            "Size of: ",
            stringify!(event__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<event__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(event__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1>())).le_next
                as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(le_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1>())).le_prev
                as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_2__bindgen_ty_2__bindgen_ty_1),
            "::",
            stringify!(le_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_event__bindgen_ty_2__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<event__bindgen_ty_2__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(event__bindgen_ty_2__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<event__bindgen_ty_2__bindgen_ty_2>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(event__bindgen_ty_2__bindgen_ty_2)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_2__bindgen_ty_2>())).ev_signal_next as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(ev_signal_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_2__bindgen_ty_2>())).ev_ncalls as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(ev_ncalls)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<event__bindgen_ty_2__bindgen_ty_2>())).ev_pncalls as *const _
                as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_2__bindgen_ty_2),
            "::",
            stringify!(ev_pncalls)
        )
    );
}
#[test]
fn bindgen_test_layout_event__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<event__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(event__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<event__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(event__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event__bindgen_ty_2>())).ev_io as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_2),
            "::",
            stringify!(ev_io)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event__bindgen_ty_2>())).ev_signal as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event__bindgen_ty_2),
            "::",
            stringify!(ev_signal)
        )
    );
}
#[test]
fn bindgen_test_layout_event() {
    assert_eq!(
        ::std::mem::size_of::<event>(),
        128usize,
        concat!("Size of: ", stringify!(event))
    );
    assert_eq!(
        ::std::mem::align_of::<event>(),
        8usize,
        concat!("Alignment of ", stringify!(event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).ev_evcallback as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(ev_evcallback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).ev_timeout_pos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(ev_timeout_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).ev_fd as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(ev_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).ev_base as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(ev_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).ev_ as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(ev_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).ev_events as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(ev_events)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).ev_res as *const _ as usize },
        106usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(ev_res)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event>())).ev_timeout as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(event),
            "::",
            stringify!(ev_timeout)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event_list {
    pub tqh_first: *mut event,
    pub tqh_last: *mut *mut event,
}
#[test]
fn bindgen_test_layout_event_list() {
    assert_eq!(
        ::std::mem::size_of::<event_list>(),
        16usize,
        concat!("Size of: ", stringify!(event_list))
    );
    assert_eq!(
        ::std::mem::align_of::<event_list>(),
        8usize,
        concat!("Alignment of ", stringify!(event_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event_list>())).tqh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event_list),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event_list>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(event_list),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event_dlist {
    pub lh_first: *mut event,
}
#[test]
fn bindgen_test_layout_event_dlist() {
    assert_eq!(
        ::std::mem::size_of::<event_dlist>(),
        8usize,
        concat!("Size of: ", stringify!(event_dlist))
    );
    assert_eq!(
        ::std::mem::align_of::<event_dlist>(),
        8usize,
        concat!("Alignment of ", stringify!(event_dlist))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event_dlist>())).lh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event_dlist),
            "::",
            stringify!(lh_first)
        )
    );
}
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
    _bindgen_union_align: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wch)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__mbstate_t__bindgen_ty_1>())).__wchb as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t__bindgen_ty_1),
            "::",
            stringify!(__wchb)
        )
    );
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        8usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(
        ::std::mem::size_of::<_G_fpos64_t>(),
        16usize,
        concat!("Size of: ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_G_fpos64_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_G_fpos64_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_G_fpos64_t>())).__state as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_G_fpos64_t),
            "::",
            stringify!(__state)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(
        ::std::mem::size_of::<_IO_marker>(),
        24usize,
        concat!("Size of: ", stringify!(_IO_marker))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_marker>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_marker))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._sbuf as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_sbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_marker>()))._pos as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_marker),
            "::",
            stringify!(_pos)
        )
    );
}
pub const __codecvt_result___codecvt_ok: __codecvt_result = 0;
pub const __codecvt_result___codecvt_partial: __codecvt_result = 1;
pub const __codecvt_result___codecvt_error: __codecvt_result = 2;
pub const __codecvt_result___codecvt_noconv: __codecvt_result = 3;
pub type __codecvt_result = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(
        ::std::mem::size_of::<_IO_FILE>(),
        216usize,
        concat!("Size of: ", stringify!(_IO_FILE))
    );
    assert_eq!(
        ::std::mem::align_of::<_IO_FILE>(),
        8usize,
        concat!("Alignment of ", stringify!(_IO_FILE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_ptr as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_end as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_read_base as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_read_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_base as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_ptr as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_write_end as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_write_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_base as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_buf_end as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_buf_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_base as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_backup_base as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_backup_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._IO_save_end as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_IO_save_end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._markers as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_markers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._chain as *const _ as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_chain)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._fileno as *const _ as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_fileno)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._flags2 as *const _ as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_flags2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._old_offset as *const _ as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_old_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._cur_column as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_cur_column)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._vtable_offset as *const _ as usize },
        130usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_vtable_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._shortbuf as *const _ as usize },
        131usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_shortbuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._lock as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._offset as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad1 as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad1)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad2 as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad2)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad3 as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad3)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad4 as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad4)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>())).__pad5 as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(__pad5)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._mode as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_IO_FILE>()))._unused2 as *const _ as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(_IO_FILE),
            "::",
            stringify!(_unused2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "\u{1}_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *mut ::std::os::raw::c_char,
        __nbytes: usize,
    ) -> __ssize_t,
>;
pub type __io_write_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __buf: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> __ssize_t,
>;
pub type __io_seek_fn = ::std::option::Option<
    unsafe extern "C" fn(
        __cookie: *mut ::std::os::raw::c_void,
        __pos: *mut __off64_t,
        __w: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type __io_close_fn = ::std::option::Option<
    unsafe extern "C" fn(__cookie: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
        arg4: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(
        arg1: *mut _IO_FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int, arg3: __ssize_t)
        -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void, arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(
        arg1: *mut _IO_FILE,
        arg2: __off64_t,
        arg3: ::std::os::raw::c_int,
    ) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "\u{1}stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "\u{1}stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __s: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event_config {
    _unused: [u8; 0],
}
extern "C" {
    pub fn event_enable_debug_mode();
}
extern "C" {
    pub fn event_debug_unassign(arg1: *mut event);
}
extern "C" {
    pub fn event_base_new() -> *mut event_base;
}
extern "C" {
    pub fn event_reinit(base: *mut event_base) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_dispatch(arg1: *mut event_base) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_get_method(arg1: *const event_base) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn event_get_supported_methods() -> *mut *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn event_gettime_monotonic(
        base: *mut event_base,
        tp: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_get_num_events(
        arg1: *mut event_base,
        arg2: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_get_max_events(
        arg1: *mut event_base,
        arg2: ::std::os::raw::c_uint,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_config_new() -> *mut event_config;
}
extern "C" {
    pub fn event_config_free(cfg: *mut event_config);
}
extern "C" {
    pub fn event_config_avoid_method(
        cfg: *mut event_config,
        method: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const event_method_feature_EV_FEATURE_ET: event_method_feature = 1;
pub const event_method_feature_EV_FEATURE_O1: event_method_feature = 2;
pub const event_method_feature_EV_FEATURE_FDS: event_method_feature = 4;
pub const event_method_feature_EV_FEATURE_EARLY_CLOSE: event_method_feature = 8;
pub type event_method_feature = u32;
pub const event_base_config_flag_EVENT_BASE_FLAG_NOLOCK: event_base_config_flag = 1;
pub const event_base_config_flag_EVENT_BASE_FLAG_IGNORE_ENV: event_base_config_flag = 2;
pub const event_base_config_flag_EVENT_BASE_FLAG_STARTUP_IOCP: event_base_config_flag = 4;
pub const event_base_config_flag_EVENT_BASE_FLAG_NO_CACHE_TIME: event_base_config_flag = 8;
pub const event_base_config_flag_EVENT_BASE_FLAG_EPOLL_USE_CHANGELIST: event_base_config_flag = 16;
pub const event_base_config_flag_EVENT_BASE_FLAG_PRECISE_TIMER: event_base_config_flag = 32;
pub type event_base_config_flag = u32;
extern "C" {
    pub fn event_base_get_features(base: *const event_base) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_config_require_features(
        cfg: *mut event_config,
        feature: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_config_set_flag(
        cfg: *mut event_config,
        flag: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_config_set_num_cpus_hint(
        cfg: *mut event_config,
        cpus: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_config_set_max_dispatch_interval(
        cfg: *mut event_config,
        max_interval: *const timeval,
        max_callbacks: ::std::os::raw::c_int,
        min_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_new_with_config(arg1: *const event_config) -> *mut event_base;
}
extern "C" {
    pub fn event_base_free(arg1: *mut event_base);
}
extern "C" {
    pub fn event_base_free_nofinalize(arg1: *mut event_base);
}
pub type event_log_cb = ::std::option::Option<
    unsafe extern "C" fn(severity: ::std::os::raw::c_int, msg: *const ::std::os::raw::c_char),
>;
extern "C" {
    pub fn event_set_log_callback(cb: event_log_cb);
}
pub type event_fatal_cb = ::std::option::Option<unsafe extern "C" fn(err: ::std::os::raw::c_int)>;
extern "C" {
    pub fn event_set_fatal_callback(cb: event_fatal_cb);
}
extern "C" {
    pub fn event_enable_debug_logging(which: u32);
}
extern "C" {
    pub fn event_base_set(arg1: *mut event_base, arg2: *mut event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_loop(
        arg1: *mut event_base,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_loopexit(
        arg1: *mut event_base,
        arg2: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_loopbreak(arg1: *mut event_base) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_loopcontinue(arg1: *mut event_base) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_got_exit(arg1: *mut event_base) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_got_break(arg1: *mut event_base) -> ::std::os::raw::c_int;
}
pub type event_callback_fn = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_short,
        arg3: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn event_self_cbarg() -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn event_new(
        arg1: *mut event_base,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_short,
        arg4: event_callback_fn,
        arg5: *mut ::std::os::raw::c_void,
    ) -> *mut event;
}
extern "C" {
    pub fn event_assign(
        arg1: *mut event,
        arg2: *mut event_base,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_short,
        arg5: event_callback_fn,
        arg6: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_free(arg1: *mut event);
}
pub type event_finalize_callback_fn = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut event, arg2: *mut ::std::os::raw::c_void),
>;
extern "C" {
    pub fn event_finalize(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut event,
        arg3: event_finalize_callback_fn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_free_finalize(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut event,
        arg3: event_finalize_callback_fn,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_once(
        arg1: *mut event_base,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_short,
        arg4: event_callback_fn,
        arg5: *mut ::std::os::raw::c_void,
        arg6: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_add(ev: *mut event, timeout: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_remove_timer(ev: *mut event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_del(arg1: *mut event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_del_noblock(ev: *mut event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_del_block(ev: *mut event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_active(
        ev: *mut event,
        res: ::std::os::raw::c_int,
        ncalls: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn event_pending(
        ev: *const event,
        events: ::std::os::raw::c_short,
        tv: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_get_running_event(base: *mut event_base) -> *mut event;
}
extern "C" {
    pub fn event_initialized(ev: *const event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_get_fd(ev: *const event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_get_base(ev: *const event) -> *mut event_base;
}
extern "C" {
    pub fn event_get_events(ev: *const event) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn event_get_callback(ev: *const event) -> event_callback_fn;
}
extern "C" {
    pub fn event_get_callback_arg(ev: *const event) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn event_get_priority(ev: *const event) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_get_assignment(
        event: *const event,
        base_out: *mut *mut event_base,
        fd_out: *mut ::std::os::raw::c_int,
        events_out: *mut ::std::os::raw::c_short,
        callback_out: *mut event_callback_fn,
        arg_out: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn event_get_struct_event_size() -> usize;
}
extern "C" {
    pub fn event_get_version() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn event_get_version_number() -> u32;
}
extern "C" {
    pub fn event_base_priority_init(
        arg1: *mut event_base,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_get_npriorities(eb: *mut event_base) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_priority_set(
        arg1: *mut event,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_init_common_timeout(
        base: *mut event_base,
        duration: *const timeval,
    ) -> *const timeval;
}
extern "C" {
    pub fn event_set_mem_functions(
        malloc_fn: ::std::option::Option<
            unsafe extern "C" fn(sz: usize) -> *mut ::std::os::raw::c_void,
        >,
        realloc_fn: ::std::option::Option<
            unsafe extern "C" fn(
                ptr: *mut ::std::os::raw::c_void,
                sz: usize,
            ) -> *mut ::std::os::raw::c_void,
        >,
        free_fn: ::std::option::Option<unsafe extern "C" fn(ptr: *mut ::std::os::raw::c_void)>,
    );
}
extern "C" {
    pub fn event_base_dump_events(arg1: *mut event_base, arg2: *mut FILE);
}
extern "C" {
    pub fn event_base_active_by_fd(
        base: *mut event_base,
        fd: ::std::os::raw::c_int,
        events: ::std::os::raw::c_short,
    );
}
extern "C" {
    pub fn event_base_active_by_signal(base: *mut event_base, sig: ::std::os::raw::c_int);
}
pub type event_base_foreach_event_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const event_base,
        arg2: *const event,
        arg3: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn event_base_foreach_event(
        base: *mut event_base,
        fn_: event_base_foreach_event_cb,
        arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_gettimeofday_cached(
        base: *mut event_base,
        tv: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_base_update_cache_time(base: *mut event_base) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn libevent_global_shutdown();
}
extern "C" {
    pub fn event_init() -> *mut event_base;
}
extern "C" {
    pub fn event_dispatch() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_loop(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_loopexit(arg1: *const timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_loopbreak() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_once(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_short,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_short,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        arg4: *mut ::std::os::raw::c_void,
        arg5: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_get_method() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn event_priority_init(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn event_set(
        arg1: *mut event,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_short,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::os::raw::c_short,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        arg5: *mut ::std::os::raw::c_void,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evbuffer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evbuffer_ptr {
    pub pos: isize,
    pub internal_: evbuffer_ptr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evbuffer_ptr__bindgen_ty_1 {
    pub chain: *mut ::std::os::raw::c_void,
    pub pos_in_chain: usize,
}
#[test]
fn bindgen_test_layout_evbuffer_ptr__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<evbuffer_ptr__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(evbuffer_ptr__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<evbuffer_ptr__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(evbuffer_ptr__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evbuffer_ptr__bindgen_ty_1>())).chain as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evbuffer_ptr__bindgen_ty_1),
            "::",
            stringify!(chain)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<evbuffer_ptr__bindgen_ty_1>())).pos_in_chain as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evbuffer_ptr__bindgen_ty_1),
            "::",
            stringify!(pos_in_chain)
        )
    );
}
#[test]
fn bindgen_test_layout_evbuffer_ptr() {
    assert_eq!(
        ::std::mem::size_of::<evbuffer_ptr>(),
        24usize,
        concat!("Size of: ", stringify!(evbuffer_ptr))
    );
    assert_eq!(
        ::std::mem::align_of::<evbuffer_ptr>(),
        8usize,
        concat!("Alignment of ", stringify!(evbuffer_ptr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evbuffer_ptr>())).pos as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evbuffer_ptr),
            "::",
            stringify!(pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evbuffer_ptr>())).internal_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evbuffer_ptr),
            "::",
            stringify!(internal_)
        )
    );
}
extern "C" {
    pub fn evbuffer_new() -> *mut evbuffer;
}
extern "C" {
    pub fn evbuffer_free(buf: *mut evbuffer);
}
extern "C" {
    pub fn evbuffer_enable_locking(
        buf: *mut evbuffer,
        lock: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_lock(buf: *mut evbuffer);
}
extern "C" {
    pub fn evbuffer_unlock(buf: *mut evbuffer);
}
extern "C" {
    pub fn evbuffer_set_flags(buf: *mut evbuffer, flags: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_clear_flags(buf: *mut evbuffer, flags: u64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_get_length(buf: *const evbuffer) -> usize;
}
extern "C" {
    pub fn evbuffer_get_contiguous_space(buf: *const evbuffer) -> usize;
}
extern "C" {
    pub fn evbuffer_expand(buf: *mut evbuffer, datlen: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_reserve_space(
        buf: *mut evbuffer,
        size: isize,
        vec: *mut iovec,
        n_vec: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_commit_space(
        buf: *mut evbuffer,
        vec: *mut iovec,
        n_vecs: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_add(
        buf: *mut evbuffer,
        data: *const ::std::os::raw::c_void,
        datlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_remove(
        buf: *mut evbuffer,
        data: *mut ::std::os::raw::c_void,
        datlen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_copyout(
        buf: *mut evbuffer,
        data_out: *mut ::std::os::raw::c_void,
        datlen: usize,
    ) -> isize;
}
extern "C" {
    pub fn evbuffer_copyout_from(
        buf: *mut evbuffer,
        pos: *const evbuffer_ptr,
        data_out: *mut ::std::os::raw::c_void,
        datlen: usize,
    ) -> isize;
}
extern "C" {
    pub fn evbuffer_remove_buffer(
        src: *mut evbuffer,
        dst: *mut evbuffer,
        datlen: usize,
    ) -> ::std::os::raw::c_int;
}
pub const evbuffer_eol_style_EVBUFFER_EOL_ANY: evbuffer_eol_style = 0;
pub const evbuffer_eol_style_EVBUFFER_EOL_CRLF: evbuffer_eol_style = 1;
pub const evbuffer_eol_style_EVBUFFER_EOL_CRLF_STRICT: evbuffer_eol_style = 2;
pub const evbuffer_eol_style_EVBUFFER_EOL_LF: evbuffer_eol_style = 3;
pub const evbuffer_eol_style_EVBUFFER_EOL_NUL: evbuffer_eol_style = 4;
pub type evbuffer_eol_style = u32;
extern "C" {
    pub fn evbuffer_readln(
        buffer: *mut evbuffer,
        n_read_out: *mut usize,
        eol_style: evbuffer_eol_style,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn evbuffer_add_buffer(
        outbuf: *mut evbuffer,
        inbuf: *mut evbuffer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_add_buffer_reference(
        outbuf: *mut evbuffer,
        inbuf: *mut evbuffer,
    ) -> ::std::os::raw::c_int;
}
pub type evbuffer_ref_cleanup_cb = ::std::option::Option<
    unsafe extern "C" fn(
        data: *const ::std::os::raw::c_void,
        datalen: usize,
        extra: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn evbuffer_add_reference(
        outbuf: *mut evbuffer,
        data: *const ::std::os::raw::c_void,
        datlen: usize,
        cleanupfn: evbuffer_ref_cleanup_cb,
        cleanupfn_arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_add_file(
        outbuf: *mut evbuffer,
        fd: ::std::os::raw::c_int,
        offset: i64,
        length: i64,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evbuffer_file_segment {
    _unused: [u8; 0],
}
pub type evbuffer_file_segment_cleanup_cb = ::std::option::Option<
    unsafe extern "C" fn(
        seg: *const evbuffer_file_segment,
        flags: ::std::os::raw::c_int,
        arg: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn evbuffer_file_segment_new(
        fd: ::std::os::raw::c_int,
        offset: i64,
        length: i64,
        flags: ::std::os::raw::c_uint,
    ) -> *mut evbuffer_file_segment;
}
extern "C" {
    pub fn evbuffer_file_segment_free(seg: *mut evbuffer_file_segment);
}
extern "C" {
    pub fn evbuffer_file_segment_add_cleanup_cb(
        seg: *mut evbuffer_file_segment,
        cb: evbuffer_file_segment_cleanup_cb,
        arg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn evbuffer_add_file_segment(
        buf: *mut evbuffer,
        seg: *mut evbuffer_file_segment,
        offset: i64,
        length: i64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_add_printf(
        buf: *mut evbuffer,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_add_vprintf(
        buf: *mut evbuffer,
        fmt: *const ::std::os::raw::c_char,
        ap: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_drain(buf: *mut evbuffer, len: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_write(
        buffer: *mut evbuffer,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_write_atmost(
        buffer: *mut evbuffer,
        fd: ::std::os::raw::c_int,
        howmuch: isize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_read(
        buffer: *mut evbuffer,
        fd: ::std::os::raw::c_int,
        howmuch: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_search(
        buffer: *mut evbuffer,
        what: *const ::std::os::raw::c_char,
        len: usize,
        start: *const evbuffer_ptr,
    ) -> evbuffer_ptr;
}
extern "C" {
    pub fn evbuffer_search_range(
        buffer: *mut evbuffer,
        what: *const ::std::os::raw::c_char,
        len: usize,
        start: *const evbuffer_ptr,
        end: *const evbuffer_ptr,
    ) -> evbuffer_ptr;
}
pub const evbuffer_ptr_how_EVBUFFER_PTR_SET: evbuffer_ptr_how = 0;
pub const evbuffer_ptr_how_EVBUFFER_PTR_ADD: evbuffer_ptr_how = 1;
pub type evbuffer_ptr_how = u32;
extern "C" {
    pub fn evbuffer_ptr_set(
        buffer: *mut evbuffer,
        ptr: *mut evbuffer_ptr,
        position: usize,
        how: evbuffer_ptr_how,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_search_eol(
        buffer: *mut evbuffer,
        start: *mut evbuffer_ptr,
        eol_len_out: *mut usize,
        eol_style: evbuffer_eol_style,
    ) -> evbuffer_ptr;
}
extern "C" {
    pub fn evbuffer_peek(
        buffer: *mut evbuffer,
        len: isize,
        start_at: *mut evbuffer_ptr,
        vec_out: *mut iovec,
        n_vec: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evbuffer_cb_info {
    pub orig_size: usize,
    pub n_added: usize,
    pub n_deleted: usize,
}
#[test]
fn bindgen_test_layout_evbuffer_cb_info() {
    assert_eq!(
        ::std::mem::size_of::<evbuffer_cb_info>(),
        24usize,
        concat!("Size of: ", stringify!(evbuffer_cb_info))
    );
    assert_eq!(
        ::std::mem::align_of::<evbuffer_cb_info>(),
        8usize,
        concat!("Alignment of ", stringify!(evbuffer_cb_info))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evbuffer_cb_info>())).orig_size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(evbuffer_cb_info),
            "::",
            stringify!(orig_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evbuffer_cb_info>())).n_added as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(evbuffer_cb_info),
            "::",
            stringify!(n_added)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<evbuffer_cb_info>())).n_deleted as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(evbuffer_cb_info),
            "::",
            stringify!(n_deleted)
        )
    );
}
pub type evbuffer_cb_func = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *mut evbuffer,
        info: *const evbuffer_cb_info,
        arg: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evbuffer_cb_entry {
    _unused: [u8; 0],
}
extern "C" {
    pub fn evbuffer_add_cb(
        buffer: *mut evbuffer,
        cb: evbuffer_cb_func,
        cbarg: *mut ::std::os::raw::c_void,
    ) -> *mut evbuffer_cb_entry;
}
extern "C" {
    pub fn evbuffer_remove_cb_entry(
        buffer: *mut evbuffer,
        ent: *mut evbuffer_cb_entry,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_remove_cb(
        buffer: *mut evbuffer,
        cb: evbuffer_cb_func,
        cbarg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_cb_set_flags(
        buffer: *mut evbuffer,
        cb: *mut evbuffer_cb_entry,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_cb_clear_flags(
        buffer: *mut evbuffer,
        cb: *mut evbuffer_cb_entry,
        flags: u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_pullup(buf: *mut evbuffer, size: isize) -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn evbuffer_prepend(
        buf: *mut evbuffer,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_prepend_buffer(dst: *mut evbuffer, src: *mut evbuffer)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_freeze(
        buf: *mut evbuffer,
        at_front: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_unfreeze(
        buf: *mut evbuffer,
        at_front: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_defer_callbacks(
        buffer: *mut evbuffer,
        base: *mut event_base,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evbuffer_add_iovec(
        buffer: *mut evbuffer,
        vec: *mut iovec,
        n_vec: ::std::os::raw::c_int,
    ) -> usize;
}
extern "C" {
    pub fn evbuffer_readline(buffer: *mut evbuffer) -> *mut ::std::os::raw::c_char;
}
pub type evbuffer_cb = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *mut evbuffer,
        old_len: usize,
        new_len: usize,
        arg: *mut ::std::os::raw::c_void,
    ),
>;
extern "C" {
    pub fn evbuffer_setcb(
        buffer: *mut evbuffer,
        cb: evbuffer_cb,
        cbarg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn evbuffer_find(
        buffer: *mut evbuffer,
        what: *const ::std::os::raw::c_uchar,
        len: usize,
    ) -> *mut ::std::os::raw::c_uchar;
}
pub type bufferevent_data_cb = ::std::option::Option<
    unsafe extern "C" fn(bev: *mut bufferevent, ctx: *mut ::std::os::raw::c_void),
>;
pub type bufferevent_event_cb = ::std::option::Option<
    unsafe extern "C" fn(
        bev: *mut bufferevent,
        what: ::std::os::raw::c_short,
        ctx: *mut ::std::os::raw::c_void,
    ),
>;
pub const bufferevent_options_BEV_OPT_CLOSE_ON_FREE: bufferevent_options = 1;
pub const bufferevent_options_BEV_OPT_THREADSAFE: bufferevent_options = 2;
pub const bufferevent_options_BEV_OPT_DEFER_CALLBACKS: bufferevent_options = 4;
pub const bufferevent_options_BEV_OPT_UNLOCK_CALLBACKS: bufferevent_options = 8;
pub type bufferevent_options = u32;
extern "C" {
    pub fn bufferevent_socket_new(
        base: *mut event_base,
        fd: ::std::os::raw::c_int,
        options: ::std::os::raw::c_int,
    ) -> *mut bufferevent;
}
extern "C" {
    pub fn bufferevent_socket_connect(
        arg1: *mut bufferevent,
        arg2: *const sockaddr,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct evdns_base {
    _unused: [u8; 0],
}
extern "C" {
    pub fn bufferevent_socket_connect_hostname(
        arg1: *mut bufferevent,
        arg2: *mut evdns_base,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_socket_get_dns_error(bev: *mut bufferevent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_base_set(
        base: *mut event_base,
        bufev: *mut bufferevent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_get_base(bev: *mut bufferevent) -> *mut event_base;
}
extern "C" {
    pub fn bufferevent_priority_set(
        bufev: *mut bufferevent,
        pri: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_get_priority(bufev: *const bufferevent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_free(bufev: *mut bufferevent);
}
extern "C" {
    pub fn bufferevent_setcb(
        bufev: *mut bufferevent,
        readcb: bufferevent_data_cb,
        writecb: bufferevent_data_cb,
        eventcb: bufferevent_event_cb,
        cbarg: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bufferevent_getcb(
        bufev: *mut bufferevent,
        readcb_ptr: *mut bufferevent_data_cb,
        writecb_ptr: *mut bufferevent_data_cb,
        eventcb_ptr: *mut bufferevent_event_cb,
        cbarg_ptr: *mut *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn bufferevent_setfd(
        bufev: *mut bufferevent,
        fd: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_getfd(bufev: *mut bufferevent) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_get_underlying(bufev: *mut bufferevent) -> *mut bufferevent;
}
extern "C" {
    pub fn bufferevent_write(
        bufev: *mut bufferevent,
        data: *const ::std::os::raw::c_void,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_write_buffer(
        bufev: *mut bufferevent,
        buf: *mut evbuffer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_read(
        bufev: *mut bufferevent,
        data: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> usize;
}
extern "C" {
    pub fn bufferevent_read_buffer(
        bufev: *mut bufferevent,
        buf: *mut evbuffer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_get_input(bufev: *mut bufferevent) -> *mut evbuffer;
}
extern "C" {
    pub fn bufferevent_get_output(bufev: *mut bufferevent) -> *mut evbuffer;
}
extern "C" {
    pub fn bufferevent_enable(
        bufev: *mut bufferevent,
        event: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_disable(
        bufev: *mut bufferevent,
        event: ::std::os::raw::c_short,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_get_enabled(bufev: *mut bufferevent) -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn bufferevent_set_timeouts(
        bufev: *mut bufferevent,
        timeout_read: *const timeval,
        timeout_write: *const timeval,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_setwatermark(
        bufev: *mut bufferevent,
        events: ::std::os::raw::c_short,
        lowmark: usize,
        highmark: usize,
    );
}
extern "C" {
    pub fn bufferevent_getwatermark(
        bufev: *mut bufferevent,
        events: ::std::os::raw::c_short,
        lowmark: *mut usize,
        highmark: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_lock(bufev: *mut bufferevent);
}
extern "C" {
    pub fn bufferevent_unlock(bufev: *mut bufferevent);
}
extern "C" {
    pub fn bufferevent_incref(bufev: *mut bufferevent);
}
extern "C" {
    pub fn bufferevent_decref(bufev: *mut bufferevent) -> ::std::os::raw::c_int;
}
pub const bufferevent_flush_mode_BEV_NORMAL: bufferevent_flush_mode = 0;
pub const bufferevent_flush_mode_BEV_FLUSH: bufferevent_flush_mode = 1;
pub const bufferevent_flush_mode_BEV_FINISHED: bufferevent_flush_mode = 2;
pub type bufferevent_flush_mode = u32;
extern "C" {
    pub fn bufferevent_flush(
        bufev: *mut bufferevent,
        iotype: ::std::os::raw::c_short,
        mode: bufferevent_flush_mode,
    ) -> ::std::os::raw::c_int;
}
pub const bufferevent_trigger_options_BEV_TRIG_IGNORE_WATERMARKS: bufferevent_trigger_options =
    65536;
pub const bufferevent_trigger_options_BEV_TRIG_DEFER_CALLBACKS: bufferevent_trigger_options = 4;
pub type bufferevent_trigger_options = u32;
extern "C" {
    pub fn bufferevent_trigger(
        bufev: *mut bufferevent,
        iotype: ::std::os::raw::c_short,
        options: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn bufferevent_trigger_event(
        bufev: *mut bufferevent,
        what: ::std::os::raw::c_short,
        options: ::std::os::raw::c_int,
    );
}
pub const bufferevent_filter_result_BEV_OK: bufferevent_filter_result = 0;
pub const bufferevent_filter_result_BEV_NEED_MORE: bufferevent_filter_result = 1;
pub const bufferevent_filter_result_BEV_ERROR: bufferevent_filter_result = 2;
pub type bufferevent_filter_result = u32;
pub type bufferevent_filter_cb = ::std::option::Option<
    unsafe extern "C" fn(
        src: *mut evbuffer,
        dst: *mut evbuffer,
        dst_limit: isize,
        mode: bufferevent_flush_mode,
        ctx: *mut ::std::os::raw::c_void,
    ) -> bufferevent_filter_result,
>;
extern "C" {
    pub fn bufferevent_filter_new(
        underlying: *mut bufferevent,
        input_filter: bufferevent_filter_cb,
        output_filter: bufferevent_filter_cb,
        options: ::std::os::raw::c_int,
        free_context: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void),
        >,
        ctx: *mut ::std::os::raw::c_void,
    ) -> *mut bufferevent;
}
extern "C" {
    pub fn bufferevent_pair_new(
        base: *mut event_base,
        options: ::std::os::raw::c_int,
        pair: *mut *mut bufferevent,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_pair_get_partner(bev: *mut bufferevent) -> *mut bufferevent;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ev_token_bucket_cfg {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bufferevent_rate_limit_group {
    _unused: [u8; 0],
}
extern "C" {
    pub fn ev_token_bucket_cfg_new(
        read_rate: usize,
        read_burst: usize,
        write_rate: usize,
        write_burst: usize,
        tick_len: *const timeval,
    ) -> *mut ev_token_bucket_cfg;
}
extern "C" {
    pub fn ev_token_bucket_cfg_free(cfg: *mut ev_token_bucket_cfg);
}
extern "C" {
    pub fn bufferevent_set_rate_limit(
        bev: *mut bufferevent,
        cfg: *mut ev_token_bucket_cfg,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_rate_limit_group_new(
        base: *mut event_base,
        cfg: *const ev_token_bucket_cfg,
    ) -> *mut bufferevent_rate_limit_group;
}
extern "C" {
    pub fn bufferevent_rate_limit_group_set_cfg(
        arg1: *mut bufferevent_rate_limit_group,
        arg2: *const ev_token_bucket_cfg,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_rate_limit_group_set_min_share(
        arg1: *mut bufferevent_rate_limit_group,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_rate_limit_group_free(arg1: *mut bufferevent_rate_limit_group);
}
extern "C" {
    pub fn bufferevent_add_to_rate_limit_group(
        bev: *mut bufferevent,
        g: *mut bufferevent_rate_limit_group,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_remove_from_rate_limit_group(bev: *mut bufferevent)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_set_max_single_read(
        bev: *mut bufferevent,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_set_max_single_write(
        bev: *mut bufferevent,
        size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_get_max_single_read(bev: *mut bufferevent) -> isize;
}
extern "C" {
    pub fn bufferevent_get_max_single_write(bev: *mut bufferevent) -> isize;
}
extern "C" {
    pub fn bufferevent_get_read_limit(bev: *mut bufferevent) -> isize;
}
extern "C" {
    pub fn bufferevent_get_write_limit(bev: *mut bufferevent) -> isize;
}
extern "C" {
    pub fn bufferevent_get_max_to_read(bev: *mut bufferevent) -> isize;
}
extern "C" {
    pub fn bufferevent_get_max_to_write(bev: *mut bufferevent) -> isize;
}
extern "C" {
    pub fn bufferevent_get_token_bucket_cfg(bev: *const bufferevent) -> *const ev_token_bucket_cfg;
}
extern "C" {
    pub fn bufferevent_rate_limit_group_get_read_limit(
        arg1: *mut bufferevent_rate_limit_group,
    ) -> isize;
}
extern "C" {
    pub fn bufferevent_rate_limit_group_get_write_limit(
        arg1: *mut bufferevent_rate_limit_group,
    ) -> isize;
}
extern "C" {
    pub fn bufferevent_decrement_read_limit(
        bev: *mut bufferevent,
        decr: isize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_decrement_write_limit(
        bev: *mut bufferevent,
        decr: isize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_rate_limit_group_decrement_read(
        arg1: *mut bufferevent_rate_limit_group,
        arg2: isize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_rate_limit_group_decrement_write(
        arg1: *mut bufferevent_rate_limit_group,
        arg2: isize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bufferevent_rate_limit_group_get_totals(
        grp: *mut bufferevent_rate_limit_group,
        total_read_out: *mut u64,
        total_written_out: *mut u64,
    );
}
extern "C" {
    pub fn bufferevent_rate_limit_group_reset_totals(grp: *mut bufferevent_rate_limit_group);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct event_watermark {
    pub low: usize,
    pub high: usize,
}
#[test]
fn bindgen_test_layout_event_watermark() {
    assert_eq!(
        ::std::mem::size_of::<event_watermark>(),
        16usize,
        concat!("Size of: ", stringify!(event_watermark))
    );
    assert_eq!(
        ::std::mem::align_of::<event_watermark>(),
        8usize,
        concat!("Alignment of ", stringify!(event_watermark))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event_watermark>())).low as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(event_watermark),
            "::",
            stringify!(low)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<event_watermark>())).high as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(event_watermark),
            "::",
            stringify!(high)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct bufferevent {
    pub ev_base: *mut event_base,
    pub be_ops: *mut bufferevent_ops,
    pub ev_read: event,
    pub ev_write: event,
    pub input: *mut evbuffer,
    pub output: *mut evbuffer,
    pub wm_read: event_watermark,
    pub wm_write: event_watermark,
    pub readcb: bufferevent_data_cb,
    pub writecb: bufferevent_data_cb,
    pub errorcb: bufferevent_event_cb,
    pub cbarg: *mut ::std::os::raw::c_void,
    pub timeout_read: timeval,
    pub timeout_write: timeval,
    pub enabled: ::std::os::raw::c_short,
}
#[test]
fn bindgen_test_layout_bufferevent() {
    assert_eq!(
        ::std::mem::size_of::<bufferevent>(),
        392usize,
        concat!("Size of: ", stringify!(bufferevent))
    );
    assert_eq!(
        ::std::mem::align_of::<bufferevent>(),
        8usize,
        concat!("Alignment of ", stringify!(bufferevent))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).ev_base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(ev_base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).be_ops as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(be_ops)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).ev_read as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(ev_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).ev_write as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(ev_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).input as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(input)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).output as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(output)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).wm_read as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(wm_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).wm_write as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(wm_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).readcb as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(readcb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).writecb as *const _ as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(writecb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).errorcb as *const _ as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(errorcb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).cbarg as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(cbarg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).timeout_read as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(timeout_read)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).timeout_write as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(timeout_write)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<bufferevent>())).enabled as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(bufferevent),
            "::",
            stringify!(enabled)
        )
    );
}
extern "C" {
    pub fn bufferevent_new(
        fd: ::std::os::raw::c_int,
        readcb: bufferevent_data_cb,
        writecb: bufferevent_data_cb,
        errorcb: bufferevent_event_cb,
        cbarg: *mut ::std::os::raw::c_void,
    ) -> *mut bufferevent;
}
extern "C" {
    pub fn bufferevent_settimeout(
        bufev: *mut bufferevent,
        timeout_read: ::std::os::raw::c_int,
        timeout_write: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn evtag_init();
}
extern "C" {
    pub fn evtag_unmarshal_header(evbuf: *mut evbuffer, ptag: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evtag_marshal(
        evbuf: *mut evbuffer,
        tag: u32,
        data: *const ::std::os::raw::c_void,
        len: u32,
    );
}
extern "C" {
    pub fn evtag_marshal_buffer(evbuf: *mut evbuffer, tag: u32, data: *mut evbuffer);
}
extern "C" {
    pub fn evtag_encode_int(evbuf: *mut evbuffer, number: u32);
}
extern "C" {
    pub fn evtag_encode_int64(evbuf: *mut evbuffer, number: u64);
}
extern "C" {
    pub fn evtag_marshal_int(evbuf: *mut evbuffer, tag: u32, integer: u32);
}
extern "C" {
    pub fn evtag_marshal_int64(evbuf: *mut evbuffer, tag: u32, integer: u64);
}
extern "C" {
    pub fn evtag_marshal_string(
        buf: *mut evbuffer,
        tag: u32,
        string: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn evtag_marshal_timeval(evbuf: *mut evbuffer, tag: u32, tv: *mut timeval);
}
extern "C" {
    pub fn evtag_unmarshal(
        src: *mut evbuffer,
        ptag: *mut u32,
        dst: *mut evbuffer,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evtag_peek(evbuf: *mut evbuffer, ptag: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evtag_peek_length(evbuf: *mut evbuffer, plength: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evtag_payload_length(evbuf: *mut evbuffer, plength: *mut u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evtag_consume(evbuf: *mut evbuffer) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evtag_unmarshal_int(
        evbuf: *mut evbuffer,
        need_tag: u32,
        pinteger: *mut u32,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evtag_unmarshal_int64(
        evbuf: *mut evbuffer,
        need_tag: u32,
        pinteger: *mut u64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evtag_unmarshal_fixed(
        src: *mut evbuffer,
        need_tag: u32,
        data: *mut ::std::os::raw::c_void,
        len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evtag_unmarshal_string(
        evbuf: *mut evbuffer,
        need_tag: u32,
        pstring: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn evtag_unmarshal_timeval(
        evbuf: *mut evbuffer,
        need_tag: u32,
        ptv: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
pub type cc_t = ::std::os::raw::c_uchar;
pub type speed_t = ::std::os::raw::c_uint;
pub type tcflag_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termios {
    pub c_iflag: tcflag_t,
    pub c_oflag: tcflag_t,
    pub c_cflag: tcflag_t,
    pub c_lflag: tcflag_t,
    pub c_line: cc_t,
    pub c_cc: [cc_t; 32usize],
    pub c_ispeed: speed_t,
    pub c_ospeed: speed_t,
}
#[test]
fn bindgen_test_layout_termios() {
    assert_eq!(
        ::std::mem::size_of::<termios>(),
        60usize,
        concat!("Size of: ", stringify!(termios))
    );
    assert_eq!(
        ::std::mem::align_of::<termios>(),
        4usize,
        concat!("Alignment of ", stringify!(termios))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_iflag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_iflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_oflag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_oflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_cflag as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_cflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_lflag as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_lflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_line as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_cc as *const _ as usize },
        17usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_cc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_ispeed as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_ispeed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termios>())).c_ospeed as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(termios),
            "::",
            stringify!(c_ospeed)
        )
    );
}
extern "C" {
    pub fn cfgetospeed(__termios_p: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfgetispeed(__termios_p: *const termios) -> speed_t;
}
extern "C" {
    pub fn cfsetospeed(__termios_p: *mut termios, __speed: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetispeed(__termios_p: *mut termios, __speed: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfsetspeed(__termios_p: *mut termios, __speed: speed_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetattr(
        __fd: ::std::os::raw::c_int,
        __termios_p: *mut termios,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcsetattr(
        __fd: ::std::os::raw::c_int,
        __optional_actions: ::std::os::raw::c_int,
        __termios_p: *const termios,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cfmakeraw(__termios_p: *mut termios);
}
extern "C" {
    pub fn tcsendbreak(
        __fd: ::std::os::raw::c_int,
        __duration: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcdrain(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflush(
        __fd: ::std::os::raw::c_int,
        __queue_selector: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcflow(
        __fd: ::std::os::raw::c_int,
        __action: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tcgetsid(__fd: ::std::os::raw::c_int) -> __pid_t;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type wint_t = ::std::os::raw::c_uint;
pub type mbstate_t = __mbstate_t;
extern "C" {
    pub fn wcscpy(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncat(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp(__s1: *const wchar_t, __s2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscasecmp_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(__s1: *const wchar_t, __s2: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn wcscoll_l(
        __s1: *const wchar_t,
        __s2: *const wchar_t,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(
        __s1: *mut wchar_t,
        __s2: *const wchar_t,
        __n: usize,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsdup(__s: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        __wcs: *const ::std::os::raw::c_int,
        __wc: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsrchr(__wcs: *const wchar_t, __wc: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(__wcs: *const wchar_t, __reject: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsspn(__wcs: *const wchar_t, __accept: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcspbrk(__wcs: *const wchar_t, __accept: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsstr(__haystack: *const wchar_t, __needle: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(
        __s: *mut wchar_t,
        __delim: *const wchar_t,
        __ptr: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslen(__s: *const ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcsnlen(__s: *const wchar_t, __maxlen: usize) -> usize;
}
extern "C" {
    pub fn wmemchr(
        __s: *const ::std::os::raw::c_int,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcmp(
        __s1: *const ::std::os::raw::c_int,
        __s2: *const ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wmemmove(__s1: *mut wchar_t, __s2: *const wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wmemset(__s: *mut wchar_t, __c: wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn btowc(__c: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn wctob(__c: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsinit(__ps: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbrtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
        __p: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcrtomb(__s: *mut ::std::os::raw::c_char, __wc: wchar_t, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn __mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrlen(__s: *const ::std::os::raw::c_char, __n: usize, __ps: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbsrtowcs(
        __dst: *mut wchar_t,
        __src: *mut *const ::std::os::raw::c_char,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const wchar_t,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsnrtowcs(
        __dst: *mut wchar_t,
        __src: *mut *const ::std::os::raw::c_char,
        __nmc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(
        __dst: *mut ::std::os::raw::c_char,
        __src: *mut *const wchar_t,
        __nwc: usize,
        __len: usize,
        __ps: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcstod(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn wcstof(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn wcstold(__nptr: *const wchar_t, __endptr: *mut *mut wchar_t) -> u128;
}
extern "C" {
    pub fn wcstol(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoll(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        __nptr: *const wchar_t,
        __endptr: *mut *mut wchar_t,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcpcpy(__dest: *mut wchar_t, __src: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcpncpy(__dest: *mut wchar_t, __src: *const wchar_t, __n: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn open_wmemstream(__bufloc: *mut *mut wchar_t, __sizeloc: *mut usize) -> *mut __FILE;
}
extern "C" {
    pub fn fwide(__fp: *mut __FILE, __mode: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swprintf(
        __s: *mut wchar_t,
        __n: usize,
        __format: *const wchar_t,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwprintf(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        __s: *mut wchar_t,
        __n: usize,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(__s: *const wchar_t, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_fwscanf"]
    pub fn fwscanf1(__stream: *mut __FILE, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_wscanf"]
    pub fn wscanf1(__format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_swscanf"]
    pub fn swscanf1(__s: *const wchar_t, __format: *const wchar_t, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        __s: *const wchar_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfwscanf"]
    pub fn vfwscanf1(
        __s: *mut __FILE,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vwscanf"]
    pub fn vwscanf1(__format: *const wchar_t, __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vswscanf"]
    pub fn vswscanf1(
        __s: *const wchar_t,
        __format: *const wchar_t,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwc(__stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn fputwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwc(__wc: wchar_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(__wc: wchar_t) -> wint_t;
}
extern "C" {
    pub fn fgetws(
        __ws: *mut wchar_t,
        __n: ::std::os::raw::c_int,
        __stream: *mut __FILE,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn fputws(__ws: *const wchar_t, __stream: *mut __FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(__wc: wint_t, __stream: *mut __FILE) -> wint_t;
}
extern "C" {
    pub fn wcsftime(
        __s: *mut wchar_t,
        __maxsize: usize,
        __format: *const wchar_t,
        __tp: *const tm,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winsize {
    pub ws_row: ::std::os::raw::c_ushort,
    pub ws_col: ::std::os::raw::c_ushort,
    pub ws_xpixel: ::std::os::raw::c_ushort,
    pub ws_ypixel: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout_winsize() {
    assert_eq!(
        ::std::mem::size_of::<winsize>(),
        8usize,
        concat!("Size of: ", stringify!(winsize))
    );
    assert_eq!(
        ::std::mem::align_of::<winsize>(),
        2usize,
        concat!("Alignment of ", stringify!(winsize))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_row as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_row)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_col as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_col)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_xpixel as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_xpixel)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winsize>())).ws_ypixel as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(winsize),
            "::",
            stringify!(ws_ypixel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct termio {
    pub c_iflag: ::std::os::raw::c_ushort,
    pub c_oflag: ::std::os::raw::c_ushort,
    pub c_cflag: ::std::os::raw::c_ushort,
    pub c_lflag: ::std::os::raw::c_ushort,
    pub c_line: ::std::os::raw::c_uchar,
    pub c_cc: [::std::os::raw::c_uchar; 8usize],
}
#[test]
fn bindgen_test_layout_termio() {
    assert_eq!(
        ::std::mem::size_of::<termio>(),
        18usize,
        concat!("Size of: ", stringify!(termio))
    );
    assert_eq!(
        ::std::mem::align_of::<termio>(),
        2usize,
        concat!("Alignment of ", stringify!(termio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_iflag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_iflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_oflag as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_oflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_cflag as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_cflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_lflag as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_lflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_line as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_line)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<termio>())).c_cc as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(termio),
            "::",
            stringify!(c_cc)
        )
    );
}
extern "C" {
    pub fn ioctl(
        __fd: ::std::os::raw::c_int,
        __request: ::std::os::raw::c_ulong,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn err(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn errx(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn warn(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn warnx(arg1: *const ::std::os::raw::c_char, ...);
}
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_imaxdiv_t() {
    assert_eq!(
        ::std::mem::size_of::<imaxdiv_t>(),
        16usize,
        concat!("Size of: ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        ::std::mem::align_of::<imaxdiv_t>(),
        8usize,
        concat!("Alignment of ", stringify!(imaxdiv_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).quot as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(quot)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imaxdiv_t>())).rem as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imaxdiv_t),
            "::",
            stringify!(rem)
        )
    );
}
extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
pub type bitstr_t = ::std::os::raw::c_uchar;
extern "C" {
    pub fn vis(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strvis(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn stravis(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnvis(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strvisx(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strunvis(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unvis(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strnunvis(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibuf {
    pub entry: ibuf__bindgen_ty_1,
    pub buf: *mut u_char,
    pub size: usize,
    pub max: usize,
    pub wpos: usize,
    pub rpos: usize,
    pub fd: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ibuf__bindgen_ty_1 {
    pub tqe_next: *mut ibuf,
    pub tqe_prev: *mut *mut ibuf,
}
#[test]
fn bindgen_test_layout_ibuf__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<ibuf__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(ibuf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<ibuf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(ibuf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ibuf__bindgen_ty_1>())).tqe_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibuf__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ibuf__bindgen_ty_1>())).tqe_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ibuf__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_ibuf() {
    assert_eq!(
        ::std::mem::size_of::<ibuf>(),
        64usize,
        concat!("Size of: ", stringify!(ibuf))
    );
    assert_eq!(
        ::std::mem::align_of::<ibuf>(),
        8usize,
        concat!("Alignment of ", stringify!(ibuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ibuf>())).entry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibuf),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ibuf>())).buf as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(ibuf), "::", stringify!(buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ibuf>())).size as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ibuf),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ibuf>())).max as *const _ as usize },
        32usize,
        concat!("Offset of field: ", stringify!(ibuf), "::", stringify!(max))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ibuf>())).wpos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ibuf),
            "::",
            stringify!(wpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ibuf>())).rpos as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ibuf),
            "::",
            stringify!(rpos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ibuf>())).fd as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(ibuf), "::", stringify!(fd))
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgbuf {
    pub bufs: msgbuf__bindgen_ty_1,
    pub queued: u32,
    pub fd: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msgbuf__bindgen_ty_1 {
    pub tqh_first: *mut ibuf,
    pub tqh_last: *mut *mut ibuf,
}
#[test]
fn bindgen_test_layout_msgbuf__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<msgbuf__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(msgbuf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<msgbuf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(msgbuf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msgbuf__bindgen_ty_1>())).tqh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgbuf__bindgen_ty_1),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msgbuf__bindgen_ty_1>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msgbuf__bindgen_ty_1),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[test]
fn bindgen_test_layout_msgbuf() {
    assert_eq!(
        ::std::mem::size_of::<msgbuf>(),
        24usize,
        concat!("Size of: ", stringify!(msgbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<msgbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(msgbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msgbuf>())).bufs as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msgbuf),
            "::",
            stringify!(bufs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msgbuf>())).queued as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(msgbuf),
            "::",
            stringify!(queued)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msgbuf>())).fd as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(msgbuf),
            "::",
            stringify!(fd)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ibuf_read {
    pub buf: [u_char; 65535usize],
    pub rptr: *mut u_char,
    pub wpos: usize,
}
#[test]
fn bindgen_test_layout_ibuf_read() {
    assert_eq!(
        ::std::mem::size_of::<ibuf_read>(),
        65552usize,
        concat!("Size of: ", stringify!(ibuf_read))
    );
    assert_eq!(
        ::std::mem::align_of::<ibuf_read>(),
        8usize,
        concat!("Alignment of ", stringify!(ibuf_read))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ibuf_read>())).buf as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ibuf_read),
            "::",
            stringify!(buf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ibuf_read>())).rptr as *const _ as usize },
        65536usize,
        concat!(
            "Offset of field: ",
            stringify!(ibuf_read),
            "::",
            stringify!(rptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ibuf_read>())).wpos as *const _ as usize },
        65544usize,
        concat!(
            "Offset of field: ",
            stringify!(ibuf_read),
            "::",
            stringify!(wpos)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imsg_fd {
    pub entry: imsg_fd__bindgen_ty_1,
    pub fd: ::std::os::raw::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imsg_fd__bindgen_ty_1 {
    pub tqe_next: *mut imsg_fd,
    pub tqe_prev: *mut *mut imsg_fd,
}
#[test]
fn bindgen_test_layout_imsg_fd__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<imsg_fd__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(imsg_fd__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<imsg_fd__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(imsg_fd__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsg_fd__bindgen_ty_1>())).tqe_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imsg_fd__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsg_fd__bindgen_ty_1>())).tqe_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imsg_fd__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_imsg_fd() {
    assert_eq!(
        ::std::mem::size_of::<imsg_fd>(),
        24usize,
        concat!("Size of: ", stringify!(imsg_fd))
    );
    assert_eq!(
        ::std::mem::align_of::<imsg_fd>(),
        8usize,
        concat!("Alignment of ", stringify!(imsg_fd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsg_fd>())).entry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imsg_fd),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsg_fd>())).fd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(imsg_fd),
            "::",
            stringify!(fd)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct imsgbuf {
    pub fds: imsgbuf__bindgen_ty_1,
    pub r: ibuf_read,
    pub w: msgbuf,
    pub fd: ::std::os::raw::c_int,
    pub pid: pid_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imsgbuf__bindgen_ty_1 {
    pub tqh_first: *mut imsg_fd,
    pub tqh_last: *mut *mut imsg_fd,
}
#[test]
fn bindgen_test_layout_imsgbuf__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<imsgbuf__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(imsgbuf__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<imsgbuf__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(imsgbuf__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsgbuf__bindgen_ty_1>())).tqh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imsgbuf__bindgen_ty_1),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsgbuf__bindgen_ty_1>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imsgbuf__bindgen_ty_1),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[test]
fn bindgen_test_layout_imsgbuf() {
    assert_eq!(
        ::std::mem::size_of::<imsgbuf>(),
        65600usize,
        concat!("Size of: ", stringify!(imsgbuf))
    );
    assert_eq!(
        ::std::mem::align_of::<imsgbuf>(),
        8usize,
        concat!("Alignment of ", stringify!(imsgbuf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsgbuf>())).fds as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imsgbuf),
            "::",
            stringify!(fds)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsgbuf>())).r as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(imsgbuf),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsgbuf>())).w as *const _ as usize },
        65568usize,
        concat!(
            "Offset of field: ",
            stringify!(imsgbuf),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsgbuf>())).fd as *const _ as usize },
        65592usize,
        concat!(
            "Offset of field: ",
            stringify!(imsgbuf),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsgbuf>())).pid as *const _ as usize },
        65596usize,
        concat!(
            "Offset of field: ",
            stringify!(imsgbuf),
            "::",
            stringify!(pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imsg_hdr {
    pub type_: u32,
    pub len: u16,
    pub flags: u16,
    pub peerid: u32,
    pub pid: u32,
}
#[test]
fn bindgen_test_layout_imsg_hdr() {
    assert_eq!(
        ::std::mem::size_of::<imsg_hdr>(),
        16usize,
        concat!("Size of: ", stringify!(imsg_hdr))
    );
    assert_eq!(
        ::std::mem::align_of::<imsg_hdr>(),
        4usize,
        concat!("Alignment of ", stringify!(imsg_hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsg_hdr>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(imsg_hdr),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsg_hdr>())).len as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(imsg_hdr),
            "::",
            stringify!(len)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsg_hdr>())).flags as *const _ as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(imsg_hdr),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsg_hdr>())).peerid as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(imsg_hdr),
            "::",
            stringify!(peerid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsg_hdr>())).pid as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(imsg_hdr),
            "::",
            stringify!(pid)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imsg {
    pub hdr: imsg_hdr,
    pub fd: ::std::os::raw::c_int,
    pub data: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_imsg() {
    assert_eq!(
        ::std::mem::size_of::<imsg>(),
        32usize,
        concat!("Size of: ", stringify!(imsg))
    );
    assert_eq!(
        ::std::mem::align_of::<imsg>(),
        8usize,
        concat!("Alignment of ", stringify!(imsg))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsg>())).hdr as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(imsg), "::", stringify!(hdr))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsg>())).fd as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(imsg), "::", stringify!(fd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<imsg>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(imsg),
            "::",
            stringify!(data)
        )
    );
}
extern "C" {
    pub fn ibuf_open(arg1: usize) -> *mut ibuf;
}
extern "C" {
    pub fn ibuf_dynamic(arg1: usize, arg2: usize) -> *mut ibuf;
}
extern "C" {
    pub fn ibuf_add(
        arg1: *mut ibuf,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibuf_reserve(arg1: *mut ibuf, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ibuf_seek(arg1: *mut ibuf, arg2: usize, arg3: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn ibuf_size(arg1: *mut ibuf) -> usize;
}
extern "C" {
    pub fn ibuf_left(arg1: *mut ibuf) -> usize;
}
extern "C" {
    pub fn ibuf_close(arg1: *mut msgbuf, arg2: *mut ibuf);
}
extern "C" {
    pub fn ibuf_write(arg1: *mut msgbuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ibuf_free(arg1: *mut ibuf);
}
extern "C" {
    pub fn msgbuf_init(arg1: *mut msgbuf);
}
extern "C" {
    pub fn msgbuf_clear(arg1: *mut msgbuf);
}
extern "C" {
    pub fn msgbuf_write(arg1: *mut msgbuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn msgbuf_drain(arg1: *mut msgbuf, arg2: usize);
}
extern "C" {
    pub fn imsg_init(arg1: *mut imsgbuf, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn imsg_read(arg1: *mut imsgbuf) -> isize;
}
extern "C" {
    pub fn imsg_get(arg1: *mut imsgbuf, arg2: *mut imsg) -> isize;
}
extern "C" {
    pub fn imsg_compose(
        arg1: *mut imsgbuf,
        arg2: u32,
        arg3: u32,
        arg4: pid_t,
        arg5: ::std::os::raw::c_int,
        arg6: *const ::std::os::raw::c_void,
        arg7: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imsg_composev(
        arg1: *mut imsgbuf,
        arg2: u32,
        arg3: u32,
        arg4: pid_t,
        arg5: ::std::os::raw::c_int,
        arg6: *const iovec,
        arg7: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imsg_create(
        arg1: *mut imsgbuf,
        arg2: u32,
        arg3: u32,
        arg4: pid_t,
        arg5: u16,
    ) -> *mut ibuf;
}
extern "C" {
    pub fn imsg_add(
        arg1: *mut ibuf,
        arg2: *const ::std::os::raw::c_void,
        arg3: u16,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imsg_close(arg1: *mut imsgbuf, arg2: *mut ibuf);
}
extern "C" {
    pub fn imsg_free(arg1: *mut imsg);
}
extern "C" {
    pub fn imsg_flush(arg1: *mut imsgbuf) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn imsg_clear(arg1: *mut imsgbuf);
}
extern "C" {
    pub fn explicit_bzero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    pub fn getdtablecount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn closefrom(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn strcasestr(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsep(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtonum(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_longlong,
        arg3: ::std::os::raw::c_longlong,
        arg4: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strlcpy(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strlcat(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(arg1: *const ::std::os::raw::c_char, arg2: usize) -> usize;
}
extern "C" {
    pub fn strndup(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        arg1: *const ::std::os::raw::c_void,
        arg2: usize,
        arg3: *const ::std::os::raw::c_void,
        arg4: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setproctitle(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn b64_ntop(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn b64_pton(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut u_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getptmfd() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fdforkpty(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
        arg4: *mut termios,
        arg5: *mut winsize,
    ) -> pid_t;
}
extern "C" {
    pub fn forkpty(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
        arg3: *mut termios,
        arg4: *mut winsize,
    ) -> pid_t;
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fparseln(
        arg1: *mut FILE,
        arg2: *mut usize,
        arg3: *mut usize,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setenv(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn freezero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    pub fn reallocarray(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn recallocarray(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: usize,
        arg4: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}BSDopterr"]
    pub static mut BSDopterr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}BSDoptind"]
    pub static mut BSDoptind: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}BSDoptopt"]
    pub static mut BSDoptopt: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}BSDoptreset"]
    pub static mut BSDoptreset: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}BSDoptarg"]
    pub static mut BSDoptarg: *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn BSDgetopt(
        arg1: ::std::os::raw::c_int,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xmalloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xcalloc(arg1: usize, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xrealloc(arg1: *mut ::std::os::raw::c_void, arg2: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xreallocarray(
        arg1: *mut ::std::os::raw::c_void,
        arg2: usize,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn xstrdup(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xstrndup(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xvasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xsnprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn xvsnprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}environ"]
    pub static mut environ: *mut *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct environ {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct format_job_tree {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct input_ctx {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct job {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mode_tree_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct options {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct options_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct options_array_item {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tmuxpeer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tmuxproc {
    _unused: [u8; 0],
}
pub type key_code = ::std::os::raw::c_ulonglong;
pub const KEYC_FOCUS_IN: _bindgen_ty_7 = 268435456;
pub const KEYC_FOCUS_OUT: _bindgen_ty_7 = 268435457;
pub const KEYC_ANY: _bindgen_ty_7 = 268435458;
pub const KEYC_PASTE_START: _bindgen_ty_7 = 268435459;
pub const KEYC_PASTE_END: _bindgen_ty_7 = 268435460;
pub const KEYC_MOUSE: _bindgen_ty_7 = 268435461;
pub const KEYC_DRAGGING: _bindgen_ty_7 = 268435462;
pub const KEYC_MOUSEMOVE_PANE: _bindgen_ty_7 = 268435463;
pub const KEYC_MOUSEMOVE_STATUS: _bindgen_ty_7 = 268435464;
pub const KEYC_MOUSEMOVE_STATUS_LEFT: _bindgen_ty_7 = 268435465;
pub const KEYC_MOUSEMOVE_STATUS_RIGHT: _bindgen_ty_7 = 268435466;
pub const KEYC_MOUSEMOVE_STATUS_DEFAULT: _bindgen_ty_7 = 268435467;
pub const KEYC_MOUSEMOVE_BORDER: _bindgen_ty_7 = 268435468;
pub const KEYC_MOUSEDOWN1_PANE: _bindgen_ty_7 = 268435469;
pub const KEYC_MOUSEDOWN1_STATUS: _bindgen_ty_7 = 268435470;
pub const KEYC_MOUSEDOWN1_STATUS_LEFT: _bindgen_ty_7 = 268435471;
pub const KEYC_MOUSEDOWN1_STATUS_RIGHT: _bindgen_ty_7 = 268435472;
pub const KEYC_MOUSEDOWN1_STATUS_DEFAULT: _bindgen_ty_7 = 268435473;
pub const KEYC_MOUSEDOWN1_BORDER: _bindgen_ty_7 = 268435474;
pub const KEYC_MOUSEDOWN2_PANE: _bindgen_ty_7 = 268435475;
pub const KEYC_MOUSEDOWN2_STATUS: _bindgen_ty_7 = 268435476;
pub const KEYC_MOUSEDOWN2_STATUS_LEFT: _bindgen_ty_7 = 268435477;
pub const KEYC_MOUSEDOWN2_STATUS_RIGHT: _bindgen_ty_7 = 268435478;
pub const KEYC_MOUSEDOWN2_STATUS_DEFAULT: _bindgen_ty_7 = 268435479;
pub const KEYC_MOUSEDOWN2_BORDER: _bindgen_ty_7 = 268435480;
pub const KEYC_MOUSEDOWN3_PANE: _bindgen_ty_7 = 268435481;
pub const KEYC_MOUSEDOWN3_STATUS: _bindgen_ty_7 = 268435482;
pub const KEYC_MOUSEDOWN3_STATUS_LEFT: _bindgen_ty_7 = 268435483;
pub const KEYC_MOUSEDOWN3_STATUS_RIGHT: _bindgen_ty_7 = 268435484;
pub const KEYC_MOUSEDOWN3_STATUS_DEFAULT: _bindgen_ty_7 = 268435485;
pub const KEYC_MOUSEDOWN3_BORDER: _bindgen_ty_7 = 268435486;
pub const KEYC_MOUSEUP1_PANE: _bindgen_ty_7 = 268435487;
pub const KEYC_MOUSEUP1_STATUS: _bindgen_ty_7 = 268435488;
pub const KEYC_MOUSEUP1_STATUS_LEFT: _bindgen_ty_7 = 268435489;
pub const KEYC_MOUSEUP1_STATUS_RIGHT: _bindgen_ty_7 = 268435490;
pub const KEYC_MOUSEUP1_STATUS_DEFAULT: _bindgen_ty_7 = 268435491;
pub const KEYC_MOUSEUP1_BORDER: _bindgen_ty_7 = 268435492;
pub const KEYC_MOUSEUP2_PANE: _bindgen_ty_7 = 268435493;
pub const KEYC_MOUSEUP2_STATUS: _bindgen_ty_7 = 268435494;
pub const KEYC_MOUSEUP2_STATUS_LEFT: _bindgen_ty_7 = 268435495;
pub const KEYC_MOUSEUP2_STATUS_RIGHT: _bindgen_ty_7 = 268435496;
pub const KEYC_MOUSEUP2_STATUS_DEFAULT: _bindgen_ty_7 = 268435497;
pub const KEYC_MOUSEUP2_BORDER: _bindgen_ty_7 = 268435498;
pub const KEYC_MOUSEUP3_PANE: _bindgen_ty_7 = 268435499;
pub const KEYC_MOUSEUP3_STATUS: _bindgen_ty_7 = 268435500;
pub const KEYC_MOUSEUP3_STATUS_LEFT: _bindgen_ty_7 = 268435501;
pub const KEYC_MOUSEUP3_STATUS_RIGHT: _bindgen_ty_7 = 268435502;
pub const KEYC_MOUSEUP3_STATUS_DEFAULT: _bindgen_ty_7 = 268435503;
pub const KEYC_MOUSEUP3_BORDER: _bindgen_ty_7 = 268435504;
pub const KEYC_MOUSEDRAG1_PANE: _bindgen_ty_7 = 268435505;
pub const KEYC_MOUSEDRAG1_STATUS: _bindgen_ty_7 = 268435506;
pub const KEYC_MOUSEDRAG1_STATUS_LEFT: _bindgen_ty_7 = 268435507;
pub const KEYC_MOUSEDRAG1_STATUS_RIGHT: _bindgen_ty_7 = 268435508;
pub const KEYC_MOUSEDRAG1_STATUS_DEFAULT: _bindgen_ty_7 = 268435509;
pub const KEYC_MOUSEDRAG1_BORDER: _bindgen_ty_7 = 268435510;
pub const KEYC_MOUSEDRAG2_PANE: _bindgen_ty_7 = 268435511;
pub const KEYC_MOUSEDRAG2_STATUS: _bindgen_ty_7 = 268435512;
pub const KEYC_MOUSEDRAG2_STATUS_LEFT: _bindgen_ty_7 = 268435513;
pub const KEYC_MOUSEDRAG2_STATUS_RIGHT: _bindgen_ty_7 = 268435514;
pub const KEYC_MOUSEDRAG2_STATUS_DEFAULT: _bindgen_ty_7 = 268435515;
pub const KEYC_MOUSEDRAG2_BORDER: _bindgen_ty_7 = 268435516;
pub const KEYC_MOUSEDRAG3_PANE: _bindgen_ty_7 = 268435517;
pub const KEYC_MOUSEDRAG3_STATUS: _bindgen_ty_7 = 268435518;
pub const KEYC_MOUSEDRAG3_STATUS_LEFT: _bindgen_ty_7 = 268435519;
pub const KEYC_MOUSEDRAG3_STATUS_RIGHT: _bindgen_ty_7 = 268435520;
pub const KEYC_MOUSEDRAG3_STATUS_DEFAULT: _bindgen_ty_7 = 268435521;
pub const KEYC_MOUSEDRAG3_BORDER: _bindgen_ty_7 = 268435522;
pub const KEYC_MOUSEDRAGEND1_PANE: _bindgen_ty_7 = 268435523;
pub const KEYC_MOUSEDRAGEND1_STATUS: _bindgen_ty_7 = 268435524;
pub const KEYC_MOUSEDRAGEND1_STATUS_LEFT: _bindgen_ty_7 = 268435525;
pub const KEYC_MOUSEDRAGEND1_STATUS_RIGHT: _bindgen_ty_7 = 268435526;
pub const KEYC_MOUSEDRAGEND1_STATUS_DEFAULT: _bindgen_ty_7 = 268435527;
pub const KEYC_MOUSEDRAGEND1_BORDER: _bindgen_ty_7 = 268435528;
pub const KEYC_MOUSEDRAGEND2_PANE: _bindgen_ty_7 = 268435529;
pub const KEYC_MOUSEDRAGEND2_STATUS: _bindgen_ty_7 = 268435530;
pub const KEYC_MOUSEDRAGEND2_STATUS_LEFT: _bindgen_ty_7 = 268435531;
pub const KEYC_MOUSEDRAGEND2_STATUS_RIGHT: _bindgen_ty_7 = 268435532;
pub const KEYC_MOUSEDRAGEND2_STATUS_DEFAULT: _bindgen_ty_7 = 268435533;
pub const KEYC_MOUSEDRAGEND2_BORDER: _bindgen_ty_7 = 268435534;
pub const KEYC_MOUSEDRAGEND3_PANE: _bindgen_ty_7 = 268435535;
pub const KEYC_MOUSEDRAGEND3_STATUS: _bindgen_ty_7 = 268435536;
pub const KEYC_MOUSEDRAGEND3_STATUS_LEFT: _bindgen_ty_7 = 268435537;
pub const KEYC_MOUSEDRAGEND3_STATUS_RIGHT: _bindgen_ty_7 = 268435538;
pub const KEYC_MOUSEDRAGEND3_STATUS_DEFAULT: _bindgen_ty_7 = 268435539;
pub const KEYC_MOUSEDRAGEND3_BORDER: _bindgen_ty_7 = 268435540;
pub const KEYC_WHEELUP_PANE: _bindgen_ty_7 = 268435541;
pub const KEYC_WHEELUP_STATUS: _bindgen_ty_7 = 268435542;
pub const KEYC_WHEELUP_STATUS_LEFT: _bindgen_ty_7 = 268435543;
pub const KEYC_WHEELUP_STATUS_RIGHT: _bindgen_ty_7 = 268435544;
pub const KEYC_WHEELUP_STATUS_DEFAULT: _bindgen_ty_7 = 268435545;
pub const KEYC_WHEELUP_BORDER: _bindgen_ty_7 = 268435546;
pub const KEYC_WHEELDOWN_PANE: _bindgen_ty_7 = 268435547;
pub const KEYC_WHEELDOWN_STATUS: _bindgen_ty_7 = 268435548;
pub const KEYC_WHEELDOWN_STATUS_LEFT: _bindgen_ty_7 = 268435549;
pub const KEYC_WHEELDOWN_STATUS_RIGHT: _bindgen_ty_7 = 268435550;
pub const KEYC_WHEELDOWN_STATUS_DEFAULT: _bindgen_ty_7 = 268435551;
pub const KEYC_WHEELDOWN_BORDER: _bindgen_ty_7 = 268435552;
pub const KEYC_DOUBLECLICK1_PANE: _bindgen_ty_7 = 268435553;
pub const KEYC_DOUBLECLICK1_STATUS: _bindgen_ty_7 = 268435554;
pub const KEYC_DOUBLECLICK1_STATUS_LEFT: _bindgen_ty_7 = 268435555;
pub const KEYC_DOUBLECLICK1_STATUS_RIGHT: _bindgen_ty_7 = 268435556;
pub const KEYC_DOUBLECLICK1_STATUS_DEFAULT: _bindgen_ty_7 = 268435557;
pub const KEYC_DOUBLECLICK1_BORDER: _bindgen_ty_7 = 268435558;
pub const KEYC_DOUBLECLICK2_PANE: _bindgen_ty_7 = 268435559;
pub const KEYC_DOUBLECLICK2_STATUS: _bindgen_ty_7 = 268435560;
pub const KEYC_DOUBLECLICK2_STATUS_LEFT: _bindgen_ty_7 = 268435561;
pub const KEYC_DOUBLECLICK2_STATUS_RIGHT: _bindgen_ty_7 = 268435562;
pub const KEYC_DOUBLECLICK2_STATUS_DEFAULT: _bindgen_ty_7 = 268435563;
pub const KEYC_DOUBLECLICK2_BORDER: _bindgen_ty_7 = 268435564;
pub const KEYC_DOUBLECLICK3_PANE: _bindgen_ty_7 = 268435565;
pub const KEYC_DOUBLECLICK3_STATUS: _bindgen_ty_7 = 268435566;
pub const KEYC_DOUBLECLICK3_STATUS_LEFT: _bindgen_ty_7 = 268435567;
pub const KEYC_DOUBLECLICK3_STATUS_RIGHT: _bindgen_ty_7 = 268435568;
pub const KEYC_DOUBLECLICK3_STATUS_DEFAULT: _bindgen_ty_7 = 268435569;
pub const KEYC_DOUBLECLICK3_BORDER: _bindgen_ty_7 = 268435570;
pub const KEYC_TRIPLECLICK1_PANE: _bindgen_ty_7 = 268435571;
pub const KEYC_TRIPLECLICK1_STATUS: _bindgen_ty_7 = 268435572;
pub const KEYC_TRIPLECLICK1_STATUS_LEFT: _bindgen_ty_7 = 268435573;
pub const KEYC_TRIPLECLICK1_STATUS_RIGHT: _bindgen_ty_7 = 268435574;
pub const KEYC_TRIPLECLICK1_STATUS_DEFAULT: _bindgen_ty_7 = 268435575;
pub const KEYC_TRIPLECLICK1_BORDER: _bindgen_ty_7 = 268435576;
pub const KEYC_TRIPLECLICK2_PANE: _bindgen_ty_7 = 268435577;
pub const KEYC_TRIPLECLICK2_STATUS: _bindgen_ty_7 = 268435578;
pub const KEYC_TRIPLECLICK2_STATUS_LEFT: _bindgen_ty_7 = 268435579;
pub const KEYC_TRIPLECLICK2_STATUS_RIGHT: _bindgen_ty_7 = 268435580;
pub const KEYC_TRIPLECLICK2_STATUS_DEFAULT: _bindgen_ty_7 = 268435581;
pub const KEYC_TRIPLECLICK2_BORDER: _bindgen_ty_7 = 268435582;
pub const KEYC_TRIPLECLICK3_PANE: _bindgen_ty_7 = 268435583;
pub const KEYC_TRIPLECLICK3_STATUS: _bindgen_ty_7 = 268435584;
pub const KEYC_TRIPLECLICK3_STATUS_LEFT: _bindgen_ty_7 = 268435585;
pub const KEYC_TRIPLECLICK3_STATUS_RIGHT: _bindgen_ty_7 = 268435586;
pub const KEYC_TRIPLECLICK3_STATUS_DEFAULT: _bindgen_ty_7 = 268435587;
pub const KEYC_TRIPLECLICK3_BORDER: _bindgen_ty_7 = 268435588;
pub const KEYC_BSPACE: _bindgen_ty_7 = 268435589;
pub const KEYC_F1: _bindgen_ty_7 = 268435590;
pub const KEYC_F2: _bindgen_ty_7 = 268435591;
pub const KEYC_F3: _bindgen_ty_7 = 268435592;
pub const KEYC_F4: _bindgen_ty_7 = 268435593;
pub const KEYC_F5: _bindgen_ty_7 = 268435594;
pub const KEYC_F6: _bindgen_ty_7 = 268435595;
pub const KEYC_F7: _bindgen_ty_7 = 268435596;
pub const KEYC_F8: _bindgen_ty_7 = 268435597;
pub const KEYC_F9: _bindgen_ty_7 = 268435598;
pub const KEYC_F10: _bindgen_ty_7 = 268435599;
pub const KEYC_F11: _bindgen_ty_7 = 268435600;
pub const KEYC_F12: _bindgen_ty_7 = 268435601;
pub const KEYC_IC: _bindgen_ty_7 = 268435602;
pub const KEYC_DC: _bindgen_ty_7 = 268435603;
pub const KEYC_HOME: _bindgen_ty_7 = 268435604;
pub const KEYC_END: _bindgen_ty_7 = 268435605;
pub const KEYC_NPAGE: _bindgen_ty_7 = 268435606;
pub const KEYC_PPAGE: _bindgen_ty_7 = 268435607;
pub const KEYC_BTAB: _bindgen_ty_7 = 268435608;
pub const KEYC_UP: _bindgen_ty_7 = 268435609;
pub const KEYC_DOWN: _bindgen_ty_7 = 268435610;
pub const KEYC_LEFT: _bindgen_ty_7 = 268435611;
pub const KEYC_RIGHT: _bindgen_ty_7 = 268435612;
pub const KEYC_KP_SLASH: _bindgen_ty_7 = 268435613;
pub const KEYC_KP_STAR: _bindgen_ty_7 = 268435614;
pub const KEYC_KP_MINUS: _bindgen_ty_7 = 268435615;
pub const KEYC_KP_SEVEN: _bindgen_ty_7 = 268435616;
pub const KEYC_KP_EIGHT: _bindgen_ty_7 = 268435617;
pub const KEYC_KP_NINE: _bindgen_ty_7 = 268435618;
pub const KEYC_KP_PLUS: _bindgen_ty_7 = 268435619;
pub const KEYC_KP_FOUR: _bindgen_ty_7 = 268435620;
pub const KEYC_KP_FIVE: _bindgen_ty_7 = 268435621;
pub const KEYC_KP_SIX: _bindgen_ty_7 = 268435622;
pub const KEYC_KP_ONE: _bindgen_ty_7 = 268435623;
pub const KEYC_KP_TWO: _bindgen_ty_7 = 268435624;
pub const KEYC_KP_THREE: _bindgen_ty_7 = 268435625;
pub const KEYC_KP_ENTER: _bindgen_ty_7 = 268435626;
pub const KEYC_KP_ZERO: _bindgen_ty_7 = 268435627;
pub const KEYC_KP_PERIOD: _bindgen_ty_7 = 268435628;
pub type _bindgen_ty_7 = u32;
pub const tty_code_code_TTYC_ACSC: tty_code_code = 0;
pub const tty_code_code_TTYC_AX: tty_code_code = 1;
pub const tty_code_code_TTYC_BCE: tty_code_code = 2;
pub const tty_code_code_TTYC_BEL: tty_code_code = 3;
pub const tty_code_code_TTYC_BLINK: tty_code_code = 4;
pub const tty_code_code_TTYC_BOLD: tty_code_code = 5;
pub const tty_code_code_TTYC_CIVIS: tty_code_code = 6;
pub const tty_code_code_TTYC_CLEAR: tty_code_code = 7;
pub const tty_code_code_TTYC_CNORM: tty_code_code = 8;
pub const tty_code_code_TTYC_COLORS: tty_code_code = 9;
pub const tty_code_code_TTYC_CR: tty_code_code = 10;
pub const tty_code_code_TTYC_CS: tty_code_code = 11;
pub const tty_code_code_TTYC_CSR: tty_code_code = 12;
pub const tty_code_code_TTYC_CUB: tty_code_code = 13;
pub const tty_code_code_TTYC_CUB1: tty_code_code = 14;
pub const tty_code_code_TTYC_CUD: tty_code_code = 15;
pub const tty_code_code_TTYC_CUD1: tty_code_code = 16;
pub const tty_code_code_TTYC_CUF: tty_code_code = 17;
pub const tty_code_code_TTYC_CUF1: tty_code_code = 18;
pub const tty_code_code_TTYC_CUP: tty_code_code = 19;
pub const tty_code_code_TTYC_CUU: tty_code_code = 20;
pub const tty_code_code_TTYC_CUU1: tty_code_code = 21;
pub const tty_code_code_TTYC_CVVIS: tty_code_code = 22;
pub const tty_code_code_TTYC_DCH: tty_code_code = 23;
pub const tty_code_code_TTYC_DCH1: tty_code_code = 24;
pub const tty_code_code_TTYC_DIM: tty_code_code = 25;
pub const tty_code_code_TTYC_DL: tty_code_code = 26;
pub const tty_code_code_TTYC_DL1: tty_code_code = 27;
pub const tty_code_code_TTYC_E3: tty_code_code = 28;
pub const tty_code_code_TTYC_ECH: tty_code_code = 29;
pub const tty_code_code_TTYC_ED: tty_code_code = 30;
pub const tty_code_code_TTYC_EL: tty_code_code = 31;
pub const tty_code_code_TTYC_EL1: tty_code_code = 32;
pub const tty_code_code_TTYC_ENACS: tty_code_code = 33;
pub const tty_code_code_TTYC_FSL: tty_code_code = 34;
pub const tty_code_code_TTYC_HOME: tty_code_code = 35;
pub const tty_code_code_TTYC_HPA: tty_code_code = 36;
pub const tty_code_code_TTYC_ICH: tty_code_code = 37;
pub const tty_code_code_TTYC_ICH1: tty_code_code = 38;
pub const tty_code_code_TTYC_IL: tty_code_code = 39;
pub const tty_code_code_TTYC_IL1: tty_code_code = 40;
pub const tty_code_code_TTYC_INDN: tty_code_code = 41;
pub const tty_code_code_TTYC_INVIS: tty_code_code = 42;
pub const tty_code_code_TTYC_KCBT: tty_code_code = 43;
pub const tty_code_code_TTYC_KCUB1: tty_code_code = 44;
pub const tty_code_code_TTYC_KCUD1: tty_code_code = 45;
pub const tty_code_code_TTYC_KCUF1: tty_code_code = 46;
pub const tty_code_code_TTYC_KCUU1: tty_code_code = 47;
pub const tty_code_code_TTYC_KDC2: tty_code_code = 48;
pub const tty_code_code_TTYC_KDC3: tty_code_code = 49;
pub const tty_code_code_TTYC_KDC4: tty_code_code = 50;
pub const tty_code_code_TTYC_KDC5: tty_code_code = 51;
pub const tty_code_code_TTYC_KDC6: tty_code_code = 52;
pub const tty_code_code_TTYC_KDC7: tty_code_code = 53;
pub const tty_code_code_TTYC_KDCH1: tty_code_code = 54;
pub const tty_code_code_TTYC_KDN2: tty_code_code = 55;
pub const tty_code_code_TTYC_KDN3: tty_code_code = 56;
pub const tty_code_code_TTYC_KDN4: tty_code_code = 57;
pub const tty_code_code_TTYC_KDN5: tty_code_code = 58;
pub const tty_code_code_TTYC_KDN6: tty_code_code = 59;
pub const tty_code_code_TTYC_KDN7: tty_code_code = 60;
pub const tty_code_code_TTYC_KEND: tty_code_code = 61;
pub const tty_code_code_TTYC_KEND2: tty_code_code = 62;
pub const tty_code_code_TTYC_KEND3: tty_code_code = 63;
pub const tty_code_code_TTYC_KEND4: tty_code_code = 64;
pub const tty_code_code_TTYC_KEND5: tty_code_code = 65;
pub const tty_code_code_TTYC_KEND6: tty_code_code = 66;
pub const tty_code_code_TTYC_KEND7: tty_code_code = 67;
pub const tty_code_code_TTYC_KF1: tty_code_code = 68;
pub const tty_code_code_TTYC_KF10: tty_code_code = 69;
pub const tty_code_code_TTYC_KF11: tty_code_code = 70;
pub const tty_code_code_TTYC_KF12: tty_code_code = 71;
pub const tty_code_code_TTYC_KF13: tty_code_code = 72;
pub const tty_code_code_TTYC_KF14: tty_code_code = 73;
pub const tty_code_code_TTYC_KF15: tty_code_code = 74;
pub const tty_code_code_TTYC_KF16: tty_code_code = 75;
pub const tty_code_code_TTYC_KF17: tty_code_code = 76;
pub const tty_code_code_TTYC_KF18: tty_code_code = 77;
pub const tty_code_code_TTYC_KF19: tty_code_code = 78;
pub const tty_code_code_TTYC_KF2: tty_code_code = 79;
pub const tty_code_code_TTYC_KF20: tty_code_code = 80;
pub const tty_code_code_TTYC_KF21: tty_code_code = 81;
pub const tty_code_code_TTYC_KF22: tty_code_code = 82;
pub const tty_code_code_TTYC_KF23: tty_code_code = 83;
pub const tty_code_code_TTYC_KF24: tty_code_code = 84;
pub const tty_code_code_TTYC_KF25: tty_code_code = 85;
pub const tty_code_code_TTYC_KF26: tty_code_code = 86;
pub const tty_code_code_TTYC_KF27: tty_code_code = 87;
pub const tty_code_code_TTYC_KF28: tty_code_code = 88;
pub const tty_code_code_TTYC_KF29: tty_code_code = 89;
pub const tty_code_code_TTYC_KF3: tty_code_code = 90;
pub const tty_code_code_TTYC_KF30: tty_code_code = 91;
pub const tty_code_code_TTYC_KF31: tty_code_code = 92;
pub const tty_code_code_TTYC_KF32: tty_code_code = 93;
pub const tty_code_code_TTYC_KF33: tty_code_code = 94;
pub const tty_code_code_TTYC_KF34: tty_code_code = 95;
pub const tty_code_code_TTYC_KF35: tty_code_code = 96;
pub const tty_code_code_TTYC_KF36: tty_code_code = 97;
pub const tty_code_code_TTYC_KF37: tty_code_code = 98;
pub const tty_code_code_TTYC_KF38: tty_code_code = 99;
pub const tty_code_code_TTYC_KF39: tty_code_code = 100;
pub const tty_code_code_TTYC_KF4: tty_code_code = 101;
pub const tty_code_code_TTYC_KF40: tty_code_code = 102;
pub const tty_code_code_TTYC_KF41: tty_code_code = 103;
pub const tty_code_code_TTYC_KF42: tty_code_code = 104;
pub const tty_code_code_TTYC_KF43: tty_code_code = 105;
pub const tty_code_code_TTYC_KF44: tty_code_code = 106;
pub const tty_code_code_TTYC_KF45: tty_code_code = 107;
pub const tty_code_code_TTYC_KF46: tty_code_code = 108;
pub const tty_code_code_TTYC_KF47: tty_code_code = 109;
pub const tty_code_code_TTYC_KF48: tty_code_code = 110;
pub const tty_code_code_TTYC_KF49: tty_code_code = 111;
pub const tty_code_code_TTYC_KF5: tty_code_code = 112;
pub const tty_code_code_TTYC_KF50: tty_code_code = 113;
pub const tty_code_code_TTYC_KF51: tty_code_code = 114;
pub const tty_code_code_TTYC_KF52: tty_code_code = 115;
pub const tty_code_code_TTYC_KF53: tty_code_code = 116;
pub const tty_code_code_TTYC_KF54: tty_code_code = 117;
pub const tty_code_code_TTYC_KF55: tty_code_code = 118;
pub const tty_code_code_TTYC_KF56: tty_code_code = 119;
pub const tty_code_code_TTYC_KF57: tty_code_code = 120;
pub const tty_code_code_TTYC_KF58: tty_code_code = 121;
pub const tty_code_code_TTYC_KF59: tty_code_code = 122;
pub const tty_code_code_TTYC_KF6: tty_code_code = 123;
pub const tty_code_code_TTYC_KF60: tty_code_code = 124;
pub const tty_code_code_TTYC_KF61: tty_code_code = 125;
pub const tty_code_code_TTYC_KF62: tty_code_code = 126;
pub const tty_code_code_TTYC_KF63: tty_code_code = 127;
pub const tty_code_code_TTYC_KF7: tty_code_code = 128;
pub const tty_code_code_TTYC_KF8: tty_code_code = 129;
pub const tty_code_code_TTYC_KF9: tty_code_code = 130;
pub const tty_code_code_TTYC_KHOM2: tty_code_code = 131;
pub const tty_code_code_TTYC_KHOM3: tty_code_code = 132;
pub const tty_code_code_TTYC_KHOM4: tty_code_code = 133;
pub const tty_code_code_TTYC_KHOM5: tty_code_code = 134;
pub const tty_code_code_TTYC_KHOM6: tty_code_code = 135;
pub const tty_code_code_TTYC_KHOM7: tty_code_code = 136;
pub const tty_code_code_TTYC_KHOME: tty_code_code = 137;
pub const tty_code_code_TTYC_KIC2: tty_code_code = 138;
pub const tty_code_code_TTYC_KIC3: tty_code_code = 139;
pub const tty_code_code_TTYC_KIC4: tty_code_code = 140;
pub const tty_code_code_TTYC_KIC5: tty_code_code = 141;
pub const tty_code_code_TTYC_KIC6: tty_code_code = 142;
pub const tty_code_code_TTYC_KIC7: tty_code_code = 143;
pub const tty_code_code_TTYC_KICH1: tty_code_code = 144;
pub const tty_code_code_TTYC_KIND: tty_code_code = 145;
pub const tty_code_code_TTYC_KLFT2: tty_code_code = 146;
pub const tty_code_code_TTYC_KLFT3: tty_code_code = 147;
pub const tty_code_code_TTYC_KLFT4: tty_code_code = 148;
pub const tty_code_code_TTYC_KLFT5: tty_code_code = 149;
pub const tty_code_code_TTYC_KLFT6: tty_code_code = 150;
pub const tty_code_code_TTYC_KLFT7: tty_code_code = 151;
pub const tty_code_code_TTYC_KMOUS: tty_code_code = 152;
pub const tty_code_code_TTYC_KNP: tty_code_code = 153;
pub const tty_code_code_TTYC_KNXT2: tty_code_code = 154;
pub const tty_code_code_TTYC_KNXT3: tty_code_code = 155;
pub const tty_code_code_TTYC_KNXT4: tty_code_code = 156;
pub const tty_code_code_TTYC_KNXT5: tty_code_code = 157;
pub const tty_code_code_TTYC_KNXT6: tty_code_code = 158;
pub const tty_code_code_TTYC_KNXT7: tty_code_code = 159;
pub const tty_code_code_TTYC_KPP: tty_code_code = 160;
pub const tty_code_code_TTYC_KPRV2: tty_code_code = 161;
pub const tty_code_code_TTYC_KPRV3: tty_code_code = 162;
pub const tty_code_code_TTYC_KPRV4: tty_code_code = 163;
pub const tty_code_code_TTYC_KPRV5: tty_code_code = 164;
pub const tty_code_code_TTYC_KPRV6: tty_code_code = 165;
pub const tty_code_code_TTYC_KPRV7: tty_code_code = 166;
pub const tty_code_code_TTYC_KRI: tty_code_code = 167;
pub const tty_code_code_TTYC_KRIT2: tty_code_code = 168;
pub const tty_code_code_TTYC_KRIT3: tty_code_code = 169;
pub const tty_code_code_TTYC_KRIT4: tty_code_code = 170;
pub const tty_code_code_TTYC_KRIT5: tty_code_code = 171;
pub const tty_code_code_TTYC_KRIT6: tty_code_code = 172;
pub const tty_code_code_TTYC_KRIT7: tty_code_code = 173;
pub const tty_code_code_TTYC_KUP2: tty_code_code = 174;
pub const tty_code_code_TTYC_KUP3: tty_code_code = 175;
pub const tty_code_code_TTYC_KUP4: tty_code_code = 176;
pub const tty_code_code_TTYC_KUP5: tty_code_code = 177;
pub const tty_code_code_TTYC_KUP6: tty_code_code = 178;
pub const tty_code_code_TTYC_KUP7: tty_code_code = 179;
pub const tty_code_code_TTYC_MS: tty_code_code = 180;
pub const tty_code_code_TTYC_OP: tty_code_code = 181;
pub const tty_code_code_TTYC_REV: tty_code_code = 182;
pub const tty_code_code_TTYC_RGB: tty_code_code = 183;
pub const tty_code_code_TTYC_RI: tty_code_code = 184;
pub const tty_code_code_TTYC_RMACS: tty_code_code = 185;
pub const tty_code_code_TTYC_RMCUP: tty_code_code = 186;
pub const tty_code_code_TTYC_RMKX: tty_code_code = 187;
pub const tty_code_code_TTYC_SE: tty_code_code = 188;
pub const tty_code_code_TTYC_SETAB: tty_code_code = 189;
pub const tty_code_code_TTYC_SETAF: tty_code_code = 190;
pub const tty_code_code_TTYC_SETRGBB: tty_code_code = 191;
pub const tty_code_code_TTYC_SETRGBF: tty_code_code = 192;
pub const tty_code_code_TTYC_SGR0: tty_code_code = 193;
pub const tty_code_code_TTYC_SITM: tty_code_code = 194;
pub const tty_code_code_TTYC_SMACS: tty_code_code = 195;
pub const tty_code_code_TTYC_SMCUP: tty_code_code = 196;
pub const tty_code_code_TTYC_SMKX: tty_code_code = 197;
pub const tty_code_code_TTYC_SMSO: tty_code_code = 198;
pub const tty_code_code_TTYC_SMULX: tty_code_code = 199;
pub const tty_code_code_TTYC_SMUL: tty_code_code = 200;
pub const tty_code_code_TTYC_SMXX: tty_code_code = 201;
pub const tty_code_code_TTYC_SS: tty_code_code = 202;
pub const tty_code_code_TTYC_TC: tty_code_code = 203;
pub const tty_code_code_TTYC_TSL: tty_code_code = 204;
pub const tty_code_code_TTYC_U8: tty_code_code = 205;
pub const tty_code_code_TTYC_VPA: tty_code_code = 206;
pub const tty_code_code_TTYC_XENL: tty_code_code = 207;
pub const tty_code_code_TTYC_XT: tty_code_code = 208;
pub type tty_code_code = u32;
pub const msgtype_MSG_VERSION: msgtype = 12;
pub const msgtype_MSG_IDENTIFY_FLAGS: msgtype = 100;
pub const msgtype_MSG_IDENTIFY_TERM: msgtype = 101;
pub const msgtype_MSG_IDENTIFY_TTYNAME: msgtype = 102;
pub const msgtype_MSG_IDENTIFY_OLDCWD: msgtype = 103;
pub const msgtype_MSG_IDENTIFY_STDIN: msgtype = 104;
pub const msgtype_MSG_IDENTIFY_ENVIRON: msgtype = 105;
pub const msgtype_MSG_IDENTIFY_DONE: msgtype = 106;
pub const msgtype_MSG_IDENTIFY_CLIENTPID: msgtype = 107;
pub const msgtype_MSG_IDENTIFY_CWD: msgtype = 108;
pub const msgtype_MSG_COMMAND: msgtype = 200;
pub const msgtype_MSG_DETACH: msgtype = 201;
pub const msgtype_MSG_DETACHKILL: msgtype = 202;
pub const msgtype_MSG_EXIT: msgtype = 203;
pub const msgtype_MSG_EXITED: msgtype = 204;
pub const msgtype_MSG_EXITING: msgtype = 205;
pub const msgtype_MSG_LOCK: msgtype = 206;
pub const msgtype_MSG_READY: msgtype = 207;
pub const msgtype_MSG_RESIZE: msgtype = 208;
pub const msgtype_MSG_SHELL: msgtype = 209;
pub const msgtype_MSG_SHUTDOWN: msgtype = 210;
pub const msgtype_MSG_STDERR: msgtype = 211;
pub const msgtype_MSG_STDIN: msgtype = 212;
pub const msgtype_MSG_STDOUT: msgtype = 213;
pub const msgtype_MSG_SUSPEND: msgtype = 214;
pub const msgtype_MSG_UNLOCK: msgtype = 215;
pub const msgtype_MSG_WAKEUP: msgtype = 216;
pub const msgtype_MSG_EXEC: msgtype = 217;
pub type msgtype = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msg_command_data {
    pub argc: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_msg_command_data() {
    assert_eq!(
        ::std::mem::size_of::<msg_command_data>(),
        4usize,
        concat!("Size of: ", stringify!(msg_command_data))
    );
    assert_eq!(
        ::std::mem::align_of::<msg_command_data>(),
        4usize,
        concat!("Alignment of ", stringify!(msg_command_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msg_command_data>())).argc as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_command_data),
            "::",
            stringify!(argc)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msg_stdin_data {
    pub size: isize,
    pub data: [::std::os::raw::c_char; 8192usize],
}
#[test]
fn bindgen_test_layout_msg_stdin_data() {
    assert_eq!(
        ::std::mem::size_of::<msg_stdin_data>(),
        8200usize,
        concat!("Size of: ", stringify!(msg_stdin_data))
    );
    assert_eq!(
        ::std::mem::align_of::<msg_stdin_data>(),
        8usize,
        concat!("Alignment of ", stringify!(msg_stdin_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msg_stdin_data>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_stdin_data),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msg_stdin_data>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_stdin_data),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msg_stdout_data {
    pub size: isize,
    pub data: [::std::os::raw::c_char; 8192usize],
}
#[test]
fn bindgen_test_layout_msg_stdout_data() {
    assert_eq!(
        ::std::mem::size_of::<msg_stdout_data>(),
        8200usize,
        concat!("Size of: ", stringify!(msg_stdout_data))
    );
    assert_eq!(
        ::std::mem::align_of::<msg_stdout_data>(),
        8usize,
        concat!("Alignment of ", stringify!(msg_stdout_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msg_stdout_data>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_stdout_data),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msg_stdout_data>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_stdout_data),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct msg_stderr_data {
    pub size: isize,
    pub data: [::std::os::raw::c_char; 8192usize],
}
#[test]
fn bindgen_test_layout_msg_stderr_data() {
    assert_eq!(
        ::std::mem::size_of::<msg_stderr_data>(),
        8200usize,
        concat!("Size of: ", stringify!(msg_stderr_data))
    );
    assert_eq!(
        ::std::mem::align_of::<msg_stderr_data>(),
        8usize,
        concat!("Alignment of ", stringify!(msg_stderr_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msg_stderr_data>())).size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_stderr_data),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<msg_stderr_data>())).data as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(msg_stderr_data),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct utf8_data {
    pub data: [u_char; 18usize],
    pub have: u_char,
    pub size: u_char,
    pub width: u_char,
}
#[test]
fn bindgen_test_layout_utf8_data() {
    assert_eq!(
        ::std::mem::size_of::<utf8_data>(),
        21usize,
        concat!("Size of: ", stringify!(utf8_data))
    );
    assert_eq!(
        ::std::mem::align_of::<utf8_data>(),
        1usize,
        concat!("Alignment of ", stringify!(utf8_data))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<utf8_data>())).data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(utf8_data),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<utf8_data>())).have as *const _ as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(utf8_data),
            "::",
            stringify!(have)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<utf8_data>())).size as *const _ as usize },
        19usize,
        concat!(
            "Offset of field: ",
            stringify!(utf8_data),
            "::",
            stringify!(size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<utf8_data>())).width as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(utf8_data),
            "::",
            stringify!(width)
        )
    );
}
pub const utf8_state_UTF8_MORE: utf8_state = 0;
pub const utf8_state_UTF8_DONE: utf8_state = 1;
pub const utf8_state_UTF8_ERROR: utf8_state = 2;
pub type utf8_state = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grid_cell {
    pub flags: u_char,
    pub attr: u_short,
    pub fg: ::std::os::raw::c_int,
    pub bg: ::std::os::raw::c_int,
    pub data: utf8_data,
}
#[test]
fn bindgen_test_layout_grid_cell() {
    assert_eq!(
        ::std::mem::size_of::<grid_cell>(),
        36usize,
        concat!("Size of: ", stringify!(grid_cell))
    );
    assert_eq!(
        ::std::mem::align_of::<grid_cell>(),
        4usize,
        concat!("Alignment of ", stringify!(grid_cell))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid_cell>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_cell),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid_cell>())).attr as *const _ as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_cell),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid_cell>())).fg as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_cell),
            "::",
            stringify!(fg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid_cell>())).bg as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_cell),
            "::",
            stringify!(bg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid_cell>())).data as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_cell),
            "::",
            stringify!(data)
        )
    );
}
#[repr(C, packed)]
#[derive(Copy, Clone)]
pub struct grid_cell_entry {
    pub flags: u_char,
    pub __bindgen_anon_1: grid_cell_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union grid_cell_entry__bindgen_ty_1 {
    pub offset: u_int,
    pub data: grid_cell_entry__bindgen_ty_1__bindgen_ty_1,
    _bindgen_union_align: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grid_cell_entry__bindgen_ty_1__bindgen_ty_1 {
    pub attr: u_char,
    pub fg: u_char,
    pub bg: u_char,
    pub data: u_char,
}
#[test]
fn bindgen_test_layout_grid_cell_entry__bindgen_ty_1__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<grid_cell_entry__bindgen_ty_1__bindgen_ty_1>(),
        4usize,
        concat!(
            "Size of: ",
            stringify!(grid_cell_entry__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        ::std::mem::align_of::<grid_cell_entry__bindgen_ty_1__bindgen_ty_1>(),
        1usize,
        concat!(
            "Alignment of ",
            stringify!(grid_cell_entry__bindgen_ty_1__bindgen_ty_1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grid_cell_entry__bindgen_ty_1__bindgen_ty_1>())).attr as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_cell_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(attr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grid_cell_entry__bindgen_ty_1__bindgen_ty_1>())).fg as *const _
                as usize
        },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_cell_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(fg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grid_cell_entry__bindgen_ty_1__bindgen_ty_1>())).bg as *const _
                as usize
        },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_cell_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(bg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grid_cell_entry__bindgen_ty_1__bindgen_ty_1>())).data as *const _
                as usize
        },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_cell_entry__bindgen_ty_1__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_grid_cell_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<grid_cell_entry__bindgen_ty_1>(),
        4usize,
        concat!("Size of: ", stringify!(grid_cell_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<grid_cell_entry__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(grid_cell_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grid_cell_entry__bindgen_ty_1>())).offset as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_cell_entry__bindgen_ty_1),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<grid_cell_entry__bindgen_ty_1>())).data as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_cell_entry__bindgen_ty_1),
            "::",
            stringify!(data)
        )
    );
}
#[test]
fn bindgen_test_layout_grid_cell_entry() {
    assert_eq!(
        ::std::mem::size_of::<grid_cell_entry>(),
        5usize,
        concat!("Size of: ", stringify!(grid_cell_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<grid_cell_entry>(),
        1usize,
        concat!("Alignment of ", stringify!(grid_cell_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid_cell_entry>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_cell_entry),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct grid_line {
    pub cellused: u_int,
    pub cellsize: u_int,
    pub celldata: *mut grid_cell_entry,
    pub extdsize: u_int,
    pub extddata: *mut grid_cell,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_grid_line() {
    assert_eq!(
        ::std::mem::size_of::<grid_line>(),
        32usize,
        concat!("Size of: ", stringify!(grid_line))
    );
    assert_eq!(
        ::std::mem::align_of::<grid_line>(),
        1usize,
        concat!("Alignment of ", stringify!(grid_line))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid_line>())).cellused as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_line),
            "::",
            stringify!(cellused)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid_line>())).cellsize as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_line),
            "::",
            stringify!(cellsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid_line>())).celldata as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_line),
            "::",
            stringify!(celldata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid_line>())).extdsize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_line),
            "::",
            stringify!(extdsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid_line>())).extddata as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_line),
            "::",
            stringify!(extddata)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid_line>())).flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(grid_line),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct grid {
    pub flags: ::std::os::raw::c_int,
    pub sx: u_int,
    pub sy: u_int,
    pub hscrolled: u_int,
    pub hsize: u_int,
    pub hlimit: u_int,
    pub linedata: *mut grid_line,
}
#[test]
fn bindgen_test_layout_grid() {
    assert_eq!(
        ::std::mem::size_of::<grid>(),
        32usize,
        concat!("Size of: ", stringify!(grid))
    );
    assert_eq!(
        ::std::mem::align_of::<grid>(),
        8usize,
        concat!("Alignment of ", stringify!(grid))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(grid),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid>())).sx as *const _ as usize },
        4usize,
        concat!("Offset of field: ", stringify!(grid), "::", stringify!(sx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid>())).sy as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(grid), "::", stringify!(sy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid>())).hscrolled as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(grid),
            "::",
            stringify!(hscrolled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid>())).hsize as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(grid),
            "::",
            stringify!(hsize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid>())).hlimit as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(grid),
            "::",
            stringify!(hlimit)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<grid>())).linedata as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(grid),
            "::",
            stringify!(linedata)
        )
    );
}
pub const style_align_STYLE_ALIGN_DEFAULT: style_align = 0;
pub const style_align_STYLE_ALIGN_LEFT: style_align = 1;
pub const style_align_STYLE_ALIGN_CENTRE: style_align = 2;
pub const style_align_STYLE_ALIGN_RIGHT: style_align = 3;
pub type style_align = u32;
pub const style_list_STYLE_LIST_OFF: style_list = 0;
pub const style_list_STYLE_LIST_ON: style_list = 1;
pub const style_list_STYLE_LIST_FOCUS: style_list = 2;
pub const style_list_STYLE_LIST_LEFT_MARKER: style_list = 3;
pub const style_list_STYLE_LIST_RIGHT_MARKER: style_list = 4;
pub type style_list = u32;
pub const style_range_type_STYLE_RANGE_NONE: style_range_type = 0;
pub const style_range_type_STYLE_RANGE_LEFT: style_range_type = 1;
pub const style_range_type_STYLE_RANGE_RIGHT: style_range_type = 2;
pub const style_range_type_STYLE_RANGE_WINDOW: style_range_type = 3;
pub type style_range_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct style_range {
    pub type_: style_range_type,
    pub argument: u_int,
    pub start: u_int,
    pub end: u_int,
    pub entry: style_range__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct style_range__bindgen_ty_1 {
    pub tqe_next: *mut style_range,
    pub tqe_prev: *mut *mut style_range,
}
#[test]
fn bindgen_test_layout_style_range__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<style_range__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(style_range__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<style_range__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(style_range__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<style_range__bindgen_ty_1>())).tqe_next as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(style_range__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<style_range__bindgen_ty_1>())).tqe_prev as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(style_range__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_style_range() {
    assert_eq!(
        ::std::mem::size_of::<style_range>(),
        32usize,
        concat!("Size of: ", stringify!(style_range))
    );
    assert_eq!(
        ::std::mem::align_of::<style_range>(),
        8usize,
        concat!("Alignment of ", stringify!(style_range))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<style_range>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(style_range),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<style_range>())).argument as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(style_range),
            "::",
            stringify!(argument)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<style_range>())).start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(style_range),
            "::",
            stringify!(start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<style_range>())).end as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(style_range),
            "::",
            stringify!(end)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<style_range>())).entry as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(style_range),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct style_ranges {
    pub tqh_first: *mut style_range,
    pub tqh_last: *mut *mut style_range,
}
#[test]
fn bindgen_test_layout_style_ranges() {
    assert_eq!(
        ::std::mem::size_of::<style_ranges>(),
        16usize,
        concat!("Size of: ", stringify!(style_ranges))
    );
    assert_eq!(
        ::std::mem::align_of::<style_ranges>(),
        8usize,
        concat!("Alignment of ", stringify!(style_ranges))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<style_ranges>())).tqh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(style_ranges),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<style_ranges>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(style_ranges),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct style {
    pub gc: grid_cell,
    pub align: style_align,
    pub list: style_list,
    pub range_type: style_range_type,
    pub range_argument: u_int,
}
#[test]
fn bindgen_test_layout_style() {
    assert_eq!(
        ::std::mem::size_of::<style>(),
        52usize,
        concat!("Size of: ", stringify!(style))
    );
    assert_eq!(
        ::std::mem::align_of::<style>(),
        4usize,
        concat!("Alignment of ", stringify!(style))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<style>())).gc as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(style), "::", stringify!(gc))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<style>())).align as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(style),
            "::",
            stringify!(align)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<style>())).list as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(style),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<style>())).range_type as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(style),
            "::",
            stringify!(range_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<style>())).range_argument as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(style),
            "::",
            stringify!(range_argument)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hook {
    pub name: *const ::std::os::raw::c_char,
    pub cmdlist: *mut cmd_list,
    pub entry: hook__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hook__bindgen_ty_1 {
    pub rbe_left: *mut hook,
    pub rbe_right: *mut hook,
    pub rbe_parent: *mut hook,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_hook__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<hook__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(hook__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<hook__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(hook__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hook__bindgen_ty_1>())).rbe_left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hook__bindgen_ty_1),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hook__bindgen_ty_1>())).rbe_right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hook__bindgen_ty_1),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hook__bindgen_ty_1>())).rbe_parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hook__bindgen_ty_1),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hook__bindgen_ty_1>())).rbe_color as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(hook__bindgen_ty_1),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[test]
fn bindgen_test_layout_hook() {
    assert_eq!(
        ::std::mem::size_of::<hook>(),
        48usize,
        concat!("Size of: ", stringify!(hook))
    );
    assert_eq!(
        ::std::mem::align_of::<hook>(),
        8usize,
        concat!("Alignment of ", stringify!(hook))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hook>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(hook),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hook>())).cmdlist as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(hook),
            "::",
            stringify!(cmdlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<hook>())).entry as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(hook),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen_sel {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen_titles {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen {
    pub title: *mut ::std::os::raw::c_char,
    pub titles: *mut screen_titles,
    pub grid: *mut grid,
    pub cx: u_int,
    pub cy: u_int,
    pub cstyle: u_int,
    pub ccolour: *mut ::std::os::raw::c_char,
    pub rupper: u_int,
    pub rlower: u_int,
    pub mode: ::std::os::raw::c_int,
    pub tabs: *mut bitstr_t,
    pub sel: *mut screen_sel,
}
#[test]
fn bindgen_test_layout_screen() {
    assert_eq!(
        ::std::mem::size_of::<screen>(),
        80usize,
        concat!("Size of: ", stringify!(screen))
    );
    assert_eq!(
        ::std::mem::align_of::<screen>(),
        8usize,
        concat!("Alignment of ", stringify!(screen))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen>())).title as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(screen),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen>())).titles as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(screen),
            "::",
            stringify!(titles)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen>())).grid as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(screen),
            "::",
            stringify!(grid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen>())).cx as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(screen),
            "::",
            stringify!(cx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen>())).cy as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(screen),
            "::",
            stringify!(cy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen>())).cstyle as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(screen),
            "::",
            stringify!(cstyle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen>())).ccolour as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(screen),
            "::",
            stringify!(ccolour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen>())).rupper as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(screen),
            "::",
            stringify!(rupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen>())).rlower as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(screen),
            "::",
            stringify!(rlower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen>())).mode as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(screen),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen>())).tabs as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(screen),
            "::",
            stringify!(tabs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen>())).sel as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(screen),
            "::",
            stringify!(sel)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen_write_collect_item {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen_write_collect_line {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct screen_write_ctx {
    pub wp: *mut window_pane,
    pub s: *mut screen,
    pub item: *mut screen_write_collect_item,
    pub list: *mut screen_write_collect_line,
    pub scrolled: u_int,
    pub bg: u_int,
    pub cells: u_int,
    pub written: u_int,
    pub skipped: u_int,
}
#[test]
fn bindgen_test_layout_screen_write_ctx() {
    assert_eq!(
        ::std::mem::size_of::<screen_write_ctx>(),
        56usize,
        concat!("Size of: ", stringify!(screen_write_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<screen_write_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(screen_write_ctx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen_write_ctx>())).wp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(screen_write_ctx),
            "::",
            stringify!(wp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen_write_ctx>())).s as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(screen_write_ctx),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen_write_ctx>())).item as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(screen_write_ctx),
            "::",
            stringify!(item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen_write_ctx>())).list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(screen_write_ctx),
            "::",
            stringify!(list)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen_write_ctx>())).scrolled as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(screen_write_ctx),
            "::",
            stringify!(scrolled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen_write_ctx>())).bg as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(screen_write_ctx),
            "::",
            stringify!(bg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen_write_ctx>())).cells as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(screen_write_ctx),
            "::",
            stringify!(cells)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen_write_ctx>())).written as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(screen_write_ctx),
            "::",
            stringify!(written)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<screen_write_ctx>())).skipped as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(screen_write_ctx),
            "::",
            stringify!(skipped)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window_mode {
    pub name: *const ::std::os::raw::c_char,
    pub default_format: *const ::std::os::raw::c_char,
    pub init: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut window_mode_entry,
            arg2: *mut cmd_find_state,
            arg3: *mut args,
        ) -> *mut screen,
    >,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut window_mode_entry)>,
    pub resize: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut window_mode_entry, arg2: u_int, arg3: u_int),
    >,
    pub key: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut window_mode_entry,
            arg2: *mut client,
            arg3: *mut session,
            arg4: *mut winlink,
            arg5: key_code,
            arg6: *mut mouse_event,
        ),
    >,
    pub key_table: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut window_mode_entry) -> *const ::std::os::raw::c_char,
    >,
    pub command: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut window_mode_entry,
            arg2: *mut client,
            arg3: *mut session,
            arg4: *mut winlink,
            arg5: *mut args,
            arg6: *mut mouse_event,
        ),
    >,
    pub formats: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut window_mode_entry, arg2: *mut format_tree),
    >,
}
#[test]
fn bindgen_test_layout_window_mode() {
    assert_eq!(
        ::std::mem::size_of::<window_mode>(),
        72usize,
        concat!("Size of: ", stringify!(window_mode))
    );
    assert_eq!(
        ::std::mem::align_of::<window_mode>(),
        8usize,
        concat!("Alignment of ", stringify!(window_mode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode>())).default_format as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode),
            "::",
            stringify!(default_format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode>())).init as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode),
            "::",
            stringify!(init)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode>())).free as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode),
            "::",
            stringify!(free)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode>())).resize as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode),
            "::",
            stringify!(resize)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode>())).key as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode>())).key_table as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode),
            "::",
            stringify!(key_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode>())).command as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode),
            "::",
            stringify!(command)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode>())).formats as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode),
            "::",
            stringify!(formats)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window_mode_entry {
    pub wp: *mut window_pane,
    pub mode: *const window_mode,
    pub data: *mut ::std::os::raw::c_void,
    pub screen: *mut screen,
    pub prefix: u_int,
    pub entry: window_mode_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window_mode_entry__bindgen_ty_1 {
    pub tqe_next: *mut window_mode_entry,
    pub tqe_prev: *mut *mut window_mode_entry,
}
#[test]
fn bindgen_test_layout_window_mode_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<window_mode_entry__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(window_mode_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<window_mode_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(window_mode_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_mode_entry__bindgen_ty_1>())).tqe_next as *const _
                as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode_entry__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_mode_entry__bindgen_ty_1>())).tqe_prev as *const _
                as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode_entry__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_window_mode_entry() {
    assert_eq!(
        ::std::mem::size_of::<window_mode_entry>(),
        56usize,
        concat!("Size of: ", stringify!(window_mode_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<window_mode_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(window_mode_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode_entry>())).wp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode_entry),
            "::",
            stringify!(wp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode_entry>())).mode as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode_entry),
            "::",
            stringify!(mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode_entry>())).data as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode_entry),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode_entry>())).screen as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode_entry),
            "::",
            stringify!(screen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode_entry>())).prefix as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode_entry),
            "::",
            stringify!(prefix)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_mode_entry>())).entry as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(window_mode_entry),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct window_pane {
    pub id: u_int,
    pub active_point: u_int,
    pub window: *mut window,
    pub layout_cell: *mut layout_cell,
    pub saved_layout_cell: *mut layout_cell,
    pub sx: u_int,
    pub sy: u_int,
    pub osx: u_int,
    pub osy: u_int,
    pub xoff: u_int,
    pub yoff: u_int,
    pub flags: ::std::os::raw::c_int,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub shell: *mut ::std::os::raw::c_char,
    pub cwd: *mut ::std::os::raw::c_char,
    pub pid: pid_t,
    pub tty: [::std::os::raw::c_char; 32usize],
    pub status: ::std::os::raw::c_int,
    pub fd: ::std::os::raw::c_int,
    pub event: *mut bufferevent,
    pub disabled: u_int,
    pub resize_timer: event,
    pub ictx: *mut input_ctx,
    pub style: style,
    pub palette: *mut ::std::os::raw::c_int,
    pub pipe_fd: ::std::os::raw::c_int,
    pub pipe_event: *mut bufferevent,
    pub pipe_off: usize,
    pub screen: *mut screen,
    pub base: screen,
    pub status_screen: screen,
    pub status_size: usize,
    pub saved_cx: u_int,
    pub saved_cy: u_int,
    pub saved_grid: *mut grid,
    pub saved_cell: grid_cell,
    pub modes: window_pane__bindgen_ty_1,
    pub modetimer: event,
    pub modelast: time_t,
    pub searchstr: *mut ::std::os::raw::c_char,
    pub entry: window_pane__bindgen_ty_2,
    pub tree_entry: window_pane__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window_pane__bindgen_ty_1 {
    pub tqh_first: *mut window_mode_entry,
    pub tqh_last: *mut *mut window_mode_entry,
}
#[test]
fn bindgen_test_layout_window_pane__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<window_pane__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(window_pane__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<window_pane__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(window_pane__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_pane__bindgen_ty_1>())).tqh_first as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane__bindgen_ty_1),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_pane__bindgen_ty_1>())).tqh_last as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane__bindgen_ty_1),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window_pane__bindgen_ty_2 {
    pub tqe_next: *mut window_pane,
    pub tqe_prev: *mut *mut window_pane,
}
#[test]
fn bindgen_test_layout_window_pane__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<window_pane__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(window_pane__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<window_pane__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(window_pane__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_pane__bindgen_ty_2>())).tqe_next as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane__bindgen_ty_2),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_pane__bindgen_ty_2>())).tqe_prev as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane__bindgen_ty_2),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window_pane__bindgen_ty_3 {
    pub rbe_left: *mut window_pane,
    pub rbe_right: *mut window_pane,
    pub rbe_parent: *mut window_pane,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_window_pane__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<window_pane__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(window_pane__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<window_pane__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(window_pane__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_pane__bindgen_ty_3>())).rbe_left as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane__bindgen_ty_3),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_pane__bindgen_ty_3>())).rbe_right as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane__bindgen_ty_3),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_pane__bindgen_ty_3>())).rbe_parent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane__bindgen_ty_3),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<window_pane__bindgen_ty_3>())).rbe_color as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane__bindgen_ty_3),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[test]
fn bindgen_test_layout_window_pane() {
    assert_eq!(
        ::std::mem::size_of::<window_pane>(),
        816usize,
        concat!("Size of: ", stringify!(window_pane))
    );
    assert_eq!(
        ::std::mem::align_of::<window_pane>(),
        8usize,
        concat!("Alignment of ", stringify!(window_pane))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).active_point as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(active_point)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).window as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).layout_cell as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(layout_cell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).saved_layout_cell as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(saved_layout_cell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).sx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(sx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).sy as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(sy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).osx as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(osx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).osy as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(osy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).xoff as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(xoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).yoff as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(yoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).argc as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).argv as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).shell as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(shell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).cwd as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).pid as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).tty as *const _ as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(tty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).status as *const _ as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).fd as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).event as *const _ as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).disabled as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(disabled)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).resize_timer as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(resize_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).ictx as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(ictx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).style as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).palette as *const _ as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(palette)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).pipe_fd as *const _ as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(pipe_fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).pipe_event as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(pipe_event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).pipe_off as *const _ as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(pipe_off)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).screen as *const _ as usize },
        376usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(screen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).base as *const _ as usize },
        384usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).status_screen as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(status_screen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).status_size as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(status_size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).saved_cx as *const _ as usize },
        552usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(saved_cx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).saved_cy as *const _ as usize },
        556usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(saved_cy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).saved_grid as *const _ as usize },
        560usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(saved_grid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).saved_cell as *const _ as usize },
        568usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(saved_cell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).modes as *const _ as usize },
        608usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(modes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).modetimer as *const _ as usize },
        624usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(modetimer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).modelast as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(modelast)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).searchstr as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(searchstr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).entry as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane>())).tree_entry as *const _ as usize },
        784usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane),
            "::",
            stringify!(tree_entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window_panes {
    pub tqh_first: *mut window_pane,
    pub tqh_last: *mut *mut window_pane,
}
#[test]
fn bindgen_test_layout_window_panes() {
    assert_eq!(
        ::std::mem::size_of::<window_panes>(),
        16usize,
        concat!("Size of: ", stringify!(window_panes))
    );
    assert_eq!(
        ::std::mem::align_of::<window_panes>(),
        8usize,
        concat!("Alignment of ", stringify!(window_panes))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_panes>())).tqh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_panes),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_panes>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window_panes),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window_pane_tree {
    pub rbh_root: *mut window_pane,
}
#[test]
fn bindgen_test_layout_window_pane_tree() {
    assert_eq!(
        ::std::mem::size_of::<window_pane_tree>(),
        8usize,
        concat!("Size of: ", stringify!(window_pane_tree))
    );
    assert_eq!(
        ::std::mem::align_of::<window_pane_tree>(),
        8usize,
        concat!("Alignment of ", stringify!(window_pane_tree))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window_pane_tree>())).rbh_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window_pane_tree),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct window {
    pub id: u_int,
    pub name: *mut ::std::os::raw::c_char,
    pub name_event: event,
    pub name_time: timeval,
    pub alerts_timer: event,
    pub offset_timer: event,
    pub activity_time: timeval,
    pub active: *mut window_pane,
    pub last: *mut window_pane,
    pub panes: window_panes,
    pub lastlayout: ::std::os::raw::c_int,
    pub layout_root: *mut layout_cell,
    pub saved_layout_root: *mut layout_cell,
    pub old_layout: *mut ::std::os::raw::c_char,
    pub sx: u_int,
    pub sy: u_int,
    pub flags: ::std::os::raw::c_int,
    pub alerts_queued: ::std::os::raw::c_int,
    pub alerts_entry: window__bindgen_ty_1,
    pub options: *mut options,
    pub style: style,
    pub active_style: style,
    pub references: u_int,
    pub winlinks: window__bindgen_ty_2,
    pub entry: window__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window__bindgen_ty_1 {
    pub tqe_next: *mut window,
    pub tqe_prev: *mut *mut window,
}
#[test]
fn bindgen_test_layout_window__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<window__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(window__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<window__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(window__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window__bindgen_ty_1>())).tqe_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window__bindgen_ty_1>())).tqe_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window__bindgen_ty_2 {
    pub tqh_first: *mut winlink,
    pub tqh_last: *mut *mut winlink,
}
#[test]
fn bindgen_test_layout_window__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<window__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(window__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<window__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(window__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window__bindgen_ty_2>())).tqh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window__bindgen_ty_2),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window__bindgen_ty_2>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window__bindgen_ty_2),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct window__bindgen_ty_3 {
    pub rbe_left: *mut window,
    pub rbe_right: *mut window,
    pub rbe_parent: *mut window,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_window__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<window__bindgen_ty_3>(),
        32usize,
        concat!("Size of: ", stringify!(window__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<window__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(window__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window__bindgen_ty_3>())).rbe_left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window__bindgen_ty_3),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window__bindgen_ty_3>())).rbe_right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window__bindgen_ty_3),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window__bindgen_ty_3>())).rbe_parent as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(window__bindgen_ty_3),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window__bindgen_ty_3>())).rbe_color as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(window__bindgen_ty_3),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[test]
fn bindgen_test_layout_window() {
    assert_eq!(
        ::std::mem::size_of::<window>(),
        696usize,
        concat!("Size of: ", stringify!(window))
    );
    assert_eq!(
        ::std::mem::align_of::<window>(),
        8usize,
        concat!("Alignment of ", stringify!(window))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).name_event as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(name_event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).name_time as *const _ as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(name_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).alerts_timer as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(alerts_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).offset_timer as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(offset_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).activity_time as *const _ as usize },
        416usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(activity_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).active as *const _ as usize },
        432usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).last as *const _ as usize },
        440usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(last)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).panes as *const _ as usize },
        448usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(panes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).lastlayout as *const _ as usize },
        464usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(lastlayout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).layout_root as *const _ as usize },
        472usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(layout_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).saved_layout_root as *const _ as usize },
        480usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(saved_layout_root)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).old_layout as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(old_layout)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).sx as *const _ as usize },
        496usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(sx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).sy as *const _ as usize },
        500usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(sy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).flags as *const _ as usize },
        504usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).alerts_queued as *const _ as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(alerts_queued)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).alerts_entry as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(alerts_entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).options as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).style as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).active_style as *const _ as usize },
        588usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(active_style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).references as *const _ as usize },
        640usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).winlinks as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(winlinks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<window>())).entry as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(window),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct windows {
    pub rbh_root: *mut window,
}
#[test]
fn bindgen_test_layout_windows() {
    assert_eq!(
        ::std::mem::size_of::<windows>(),
        8usize,
        concat!("Size of: ", stringify!(windows))
    );
    assert_eq!(
        ::std::mem::align_of::<windows>(),
        8usize,
        concat!("Alignment of ", stringify!(windows))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<windows>())).rbh_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(windows),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winlink {
    pub idx: ::std::os::raw::c_int,
    pub session: *mut session,
    pub window: *mut window,
    pub flags: ::std::os::raw::c_int,
    pub entry: winlink__bindgen_ty_1,
    pub wentry: winlink__bindgen_ty_2,
    pub sentry: winlink__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winlink__bindgen_ty_1 {
    pub rbe_left: *mut winlink,
    pub rbe_right: *mut winlink,
    pub rbe_parent: *mut winlink,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_winlink__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<winlink__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(winlink__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<winlink__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(winlink__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink__bindgen_ty_1>())).rbe_left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink__bindgen_ty_1),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink__bindgen_ty_1>())).rbe_right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink__bindgen_ty_1),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<winlink__bindgen_ty_1>())).rbe_parent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink__bindgen_ty_1),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink__bindgen_ty_1>())).rbe_color as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink__bindgen_ty_1),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winlink__bindgen_ty_2 {
    pub tqe_next: *mut winlink,
    pub tqe_prev: *mut *mut winlink,
}
#[test]
fn bindgen_test_layout_winlink__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<winlink__bindgen_ty_2>(),
        16usize,
        concat!("Size of: ", stringify!(winlink__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<winlink__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(winlink__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink__bindgen_ty_2>())).tqe_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink__bindgen_ty_2),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink__bindgen_ty_2>())).tqe_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink__bindgen_ty_2),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winlink__bindgen_ty_3 {
    pub tqe_next: *mut winlink,
    pub tqe_prev: *mut *mut winlink,
}
#[test]
fn bindgen_test_layout_winlink__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<winlink__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(winlink__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<winlink__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(winlink__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink__bindgen_ty_3>())).tqe_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink__bindgen_ty_3),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink__bindgen_ty_3>())).tqe_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink__bindgen_ty_3),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_winlink() {
    assert_eq!(
        ::std::mem::size_of::<winlink>(),
        96usize,
        concat!("Size of: ", stringify!(winlink))
    );
    assert_eq!(
        ::std::mem::align_of::<winlink>(),
        8usize,
        concat!("Alignment of ", stringify!(winlink))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink>())).idx as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink>())).session as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink>())).window as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink>())).flags as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink>())).entry as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink>())).wentry as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink),
            "::",
            stringify!(wentry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink>())).sentry as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink),
            "::",
            stringify!(sentry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winlinks {
    pub rbh_root: *mut winlink,
}
#[test]
fn bindgen_test_layout_winlinks() {
    assert_eq!(
        ::std::mem::size_of::<winlinks>(),
        8usize,
        concat!("Size of: ", stringify!(winlinks))
    );
    assert_eq!(
        ::std::mem::align_of::<winlinks>(),
        8usize,
        concat!("Alignment of ", stringify!(winlinks))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlinks>())).rbh_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winlinks),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct winlink_stack {
    pub tqh_first: *mut winlink,
    pub tqh_last: *mut *mut winlink,
}
#[test]
fn bindgen_test_layout_winlink_stack() {
    assert_eq!(
        ::std::mem::size_of::<winlink_stack>(),
        16usize,
        concat!("Size of: ", stringify!(winlink_stack))
    );
    assert_eq!(
        ::std::mem::align_of::<winlink_stack>(),
        8usize,
        concat!("Alignment of ", stringify!(winlink_stack))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink_stack>())).tqh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink_stack),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<winlink_stack>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(winlink_stack),
            "::",
            stringify!(tqh_last)
        )
    );
}
pub const layout_type_LAYOUT_LEFTRIGHT: layout_type = 0;
pub const layout_type_LAYOUT_TOPBOTTOM: layout_type = 1;
pub const layout_type_LAYOUT_WINDOWPANE: layout_type = 2;
pub type layout_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layout_cells {
    pub tqh_first: *mut layout_cell,
    pub tqh_last: *mut *mut layout_cell,
}
#[test]
fn bindgen_test_layout_layout_cells() {
    assert_eq!(
        ::std::mem::size_of::<layout_cells>(),
        16usize,
        concat!("Size of: ", stringify!(layout_cells))
    );
    assert_eq!(
        ::std::mem::align_of::<layout_cells>(),
        8usize,
        concat!("Alignment of ", stringify!(layout_cells))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layout_cells>())).tqh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cells),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layout_cells>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cells),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layout_cell {
    pub type_: layout_type,
    pub parent: *mut layout_cell,
    pub sx: u_int,
    pub sy: u_int,
    pub xoff: u_int,
    pub yoff: u_int,
    pub wp: *mut window_pane,
    pub cells: layout_cells,
    pub entry: layout_cell__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct layout_cell__bindgen_ty_1 {
    pub tqe_next: *mut layout_cell,
    pub tqe_prev: *mut *mut layout_cell,
}
#[test]
fn bindgen_test_layout_layout_cell__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<layout_cell__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(layout_cell__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<layout_cell__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(layout_cell__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<layout_cell__bindgen_ty_1>())).tqe_next as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cell__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<layout_cell__bindgen_ty_1>())).tqe_prev as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cell__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_layout_cell() {
    assert_eq!(
        ::std::mem::size_of::<layout_cell>(),
        72usize,
        concat!("Size of: ", stringify!(layout_cell))
    );
    assert_eq!(
        ::std::mem::align_of::<layout_cell>(),
        8usize,
        concat!("Alignment of ", stringify!(layout_cell))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layout_cell>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cell),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layout_cell>())).parent as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cell),
            "::",
            stringify!(parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layout_cell>())).sx as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cell),
            "::",
            stringify!(sx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layout_cell>())).sy as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cell),
            "::",
            stringify!(sy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layout_cell>())).xoff as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cell),
            "::",
            stringify!(xoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layout_cell>())).yoff as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cell),
            "::",
            stringify!(yoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layout_cell>())).wp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cell),
            "::",
            stringify!(wp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layout_cell>())).cells as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cell),
            "::",
            stringify!(cells)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<layout_cell>())).entry as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(layout_cell),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct environ_entry {
    pub name: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
    pub entry: environ_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct environ_entry__bindgen_ty_1 {
    pub rbe_left: *mut environ_entry,
    pub rbe_right: *mut environ_entry,
    pub rbe_parent: *mut environ_entry,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_environ_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<environ_entry__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(environ_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<environ_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(environ_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<environ_entry__bindgen_ty_1>())).rbe_left as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(environ_entry__bindgen_ty_1),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<environ_entry__bindgen_ty_1>())).rbe_right as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(environ_entry__bindgen_ty_1),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<environ_entry__bindgen_ty_1>())).rbe_parent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(environ_entry__bindgen_ty_1),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<environ_entry__bindgen_ty_1>())).rbe_color as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(environ_entry__bindgen_ty_1),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[test]
fn bindgen_test_layout_environ_entry() {
    assert_eq!(
        ::std::mem::size_of::<environ_entry>(),
        48usize,
        concat!("Size of: ", stringify!(environ_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<environ_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(environ_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<environ_entry>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(environ_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<environ_entry>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(environ_entry),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<environ_entry>())).entry as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(environ_entry),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session_group {
    pub name: *const ::std::os::raw::c_char,
    pub sessions: session_group__bindgen_ty_1,
    pub entry: session_group__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session_group__bindgen_ty_1 {
    pub tqh_first: *mut session,
    pub tqh_last: *mut *mut session,
}
#[test]
fn bindgen_test_layout_session_group__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<session_group__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(session_group__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<session_group__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(session_group__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<session_group__bindgen_ty_1>())).tqh_first as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(session_group__bindgen_ty_1),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<session_group__bindgen_ty_1>())).tqh_last as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(session_group__bindgen_ty_1),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session_group__bindgen_ty_2 {
    pub rbe_left: *mut session_group,
    pub rbe_right: *mut session_group,
    pub rbe_parent: *mut session_group,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_session_group__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<session_group__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(session_group__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<session_group__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(session_group__bindgen_ty_2))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<session_group__bindgen_ty_2>())).rbe_left as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(session_group__bindgen_ty_2),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<session_group__bindgen_ty_2>())).rbe_right as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(session_group__bindgen_ty_2),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<session_group__bindgen_ty_2>())).rbe_parent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(session_group__bindgen_ty_2),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<session_group__bindgen_ty_2>())).rbe_color as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(session_group__bindgen_ty_2),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[test]
fn bindgen_test_layout_session_group() {
    assert_eq!(
        ::std::mem::size_of::<session_group>(),
        56usize,
        concat!("Size of: ", stringify!(session_group))
    );
    assert_eq!(
        ::std::mem::align_of::<session_group>(),
        8usize,
        concat!("Alignment of ", stringify!(session_group))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_group>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(session_group),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_group>())).sessions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(session_group),
            "::",
            stringify!(sessions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_group>())).entry as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(session_group),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session_groups {
    pub rbh_root: *mut session_group,
}
#[test]
fn bindgen_test_layout_session_groups() {
    assert_eq!(
        ::std::mem::size_of::<session_groups>(),
        8usize,
        concat!("Size of: ", stringify!(session_groups))
    );
    assert_eq!(
        ::std::mem::align_of::<session_groups>(),
        8usize,
        concat!("Alignment of ", stringify!(session_groups))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session_groups>())).rbh_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(session_groups),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct session {
    pub id: u_int,
    pub name: *mut ::std::os::raw::c_char,
    pub cwd: *const ::std::os::raw::c_char,
    pub creation_time: timeval,
    pub last_attached_time: timeval,
    pub activity_time: timeval,
    pub last_activity_time: timeval,
    pub lock_timer: event,
    pub curw: *mut winlink,
    pub lastw: winlink_stack,
    pub windows: winlinks,
    pub statusat: ::std::os::raw::c_int,
    pub statuslines: u_int,
    pub hooks: *mut hooks,
    pub options: *mut options,
    pub flags: ::std::os::raw::c_int,
    pub attached: u_int,
    pub tio: *mut termios,
    pub environ: *mut environ,
    pub references: ::std::os::raw::c_int,
    pub gentry: session__bindgen_ty_1,
    pub entry: session__bindgen_ty_2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session__bindgen_ty_1 {
    pub tqe_next: *mut session,
    pub tqe_prev: *mut *mut session,
}
#[test]
fn bindgen_test_layout_session__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<session__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(session__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<session__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(session__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session__bindgen_ty_1>())).tqe_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(session__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session__bindgen_ty_1>())).tqe_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(session__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct session__bindgen_ty_2 {
    pub rbe_left: *mut session,
    pub rbe_right: *mut session,
    pub rbe_parent: *mut session,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_session__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<session__bindgen_ty_2>(),
        32usize,
        concat!("Size of: ", stringify!(session__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<session__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(session__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session__bindgen_ty_2>())).rbe_left as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(session__bindgen_ty_2),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session__bindgen_ty_2>())).rbe_right as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(session__bindgen_ty_2),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<session__bindgen_ty_2>())).rbe_parent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(session__bindgen_ty_2),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session__bindgen_ty_2>())).rbe_color as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(session__bindgen_ty_2),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[test]
fn bindgen_test_layout_session() {
    assert_eq!(
        ::std::mem::size_of::<session>(),
        352usize,
        concat!("Size of: ", stringify!(session))
    );
    assert_eq!(
        ::std::mem::align_of::<session>(),
        8usize,
        concat!("Alignment of ", stringify!(session))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).id as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).name as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).cwd as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).creation_time as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(creation_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).last_attached_time as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(last_attached_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).activity_time as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(activity_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).last_activity_time as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(last_activity_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).lock_timer as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(lock_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).curw as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(curw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).lastw as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(lastw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).windows as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(windows)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).statusat as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(statusat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).statuslines as *const _ as usize },
        252usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(statuslines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).hooks as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(hooks)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).options as *const _ as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(options)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).flags as *const _ as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).attached as *const _ as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(attached)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).tio as *const _ as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(tio)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).environ as *const _ as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(environ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).references as *const _ as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).gentry as *const _ as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(gentry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<session>())).entry as *const _ as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(session),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sessions {
    pub rbh_root: *mut session,
}
#[test]
fn bindgen_test_layout_sessions() {
    assert_eq!(
        ::std::mem::size_of::<sessions>(),
        8usize,
        concat!("Size of: ", stringify!(sessions))
    );
    assert_eq!(
        ::std::mem::align_of::<sessions>(),
        8usize,
        concat!("Alignment of ", stringify!(sessions))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sessions>())).rbh_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sessions),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mouse_event {
    pub valid: ::std::os::raw::c_int,
    pub key: key_code,
    pub statusat: ::std::os::raw::c_int,
    pub statuslines: u_int,
    pub x: u_int,
    pub y: u_int,
    pub b: u_int,
    pub lx: u_int,
    pub ly: u_int,
    pub lb: u_int,
    pub ox: u_int,
    pub oy: u_int,
    pub s: ::std::os::raw::c_int,
    pub w: ::std::os::raw::c_int,
    pub wp: ::std::os::raw::c_int,
    pub sgr_type: u_int,
    pub sgr_b: u_int,
}
#[test]
fn bindgen_test_layout_mouse_event() {
    assert_eq!(
        ::std::mem::size_of::<mouse_event>(),
        80usize,
        concat!("Size of: ", stringify!(mouse_event))
    );
    assert_eq!(
        ::std::mem::align_of::<mouse_event>(),
        8usize,
        concat!("Alignment of ", stringify!(mouse_event))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).valid as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(valid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).statusat as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(statusat)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).statuslines as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(statuslines)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).x as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).y as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).b as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).lx as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(lx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).ly as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(ly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).lb as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(lb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).ox as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(ox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).oy as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(oy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).s as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).w as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).wp as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(wp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).sgr_type as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(sgr_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<mouse_event>())).sgr_b as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(mouse_event),
            "::",
            stringify!(sgr_b)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tty_key {
    pub ch: ::std::os::raw::c_char,
    pub key: key_code,
    pub left: *mut tty_key,
    pub right: *mut tty_key,
    pub next: *mut tty_key,
}
#[test]
fn bindgen_test_layout_tty_key() {
    assert_eq!(
        ::std::mem::size_of::<tty_key>(),
        40usize,
        concat!("Size of: ", stringify!(tty_key))
    );
    assert_eq!(
        ::std::mem::align_of::<tty_key>(),
        8usize,
        concat!("Alignment of ", stringify!(tty_key))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_key>())).ch as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_key),
            "::",
            stringify!(ch)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_key>())).key as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_key),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_key>())).left as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_key),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_key>())).right as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_key),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_key>())).next as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_key),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tty_code {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tty_term {
    pub name: *mut ::std::os::raw::c_char,
    pub references: u_int,
    pub acs: [[::std::os::raw::c_char; 2usize]; 256usize],
    pub codes: *mut tty_code,
    pub flags: ::std::os::raw::c_int,
    pub entry: tty_term__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tty_term__bindgen_ty_1 {
    pub le_next: *mut tty_term,
    pub le_prev: *mut *mut tty_term,
}
#[test]
fn bindgen_test_layout_tty_term__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<tty_term__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(tty_term__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<tty_term__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(tty_term__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_term__bindgen_ty_1>())).le_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_term__bindgen_ty_1),
            "::",
            stringify!(le_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_term__bindgen_ty_1>())).le_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_term__bindgen_ty_1),
            "::",
            stringify!(le_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_tty_term() {
    assert_eq!(
        ::std::mem::size_of::<tty_term>(),
        560usize,
        concat!("Size of: ", stringify!(tty_term))
    );
    assert_eq!(
        ::std::mem::align_of::<tty_term>(),
        8usize,
        concat!("Alignment of ", stringify!(tty_term))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_term>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_term),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_term>())).references as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_term),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_term>())).acs as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_term),
            "::",
            stringify!(acs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_term>())).codes as *const _ as usize },
        528usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_term),
            "::",
            stringify!(codes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_term>())).flags as *const _ as usize },
        536usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_term),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_term>())).entry as *const _ as usize },
        544usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_term),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tty_terms {
    pub lh_first: *mut tty_term,
}
#[test]
fn bindgen_test_layout_tty_terms() {
    assert_eq!(
        ::std::mem::size_of::<tty_terms>(),
        8usize,
        concat!("Size of: ", stringify!(tty_terms))
    );
    assert_eq!(
        ::std::mem::align_of::<tty_terms>(),
        8usize,
        concat!("Alignment of ", stringify!(tty_terms))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_terms>())).lh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_terms),
            "::",
            stringify!(lh_first)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct tty {
    pub client: *mut client,
    pub sx: u_int,
    pub sy: u_int,
    pub cx: u_int,
    pub cy: u_int,
    pub cstyle: u_int,
    pub ccolour: *mut ::std::os::raw::c_char,
    pub oflag: ::std::os::raw::c_int,
    pub oox: u_int,
    pub ooy: u_int,
    pub osx: u_int,
    pub osy: u_int,
    pub mode: ::std::os::raw::c_int,
    pub rlower: u_int,
    pub rupper: u_int,
    pub rleft: u_int,
    pub rright: u_int,
    pub fd: ::std::os::raw::c_int,
    pub event_in: event,
    pub in_: *mut evbuffer,
    pub event_out: event,
    pub out: *mut evbuffer,
    pub timer: event,
    pub discarded: usize,
    pub tio: termios,
    pub cell: grid_cell,
    pub last_wp: ::std::os::raw::c_int,
    pub last_cell: grid_cell,
    pub flags: ::std::os::raw::c_int,
    pub term: *mut tty_term,
    pub term_name: *mut ::std::os::raw::c_char,
    pub term_flags: ::std::os::raw::c_int,
    pub term_type: tty__bindgen_ty_1,
    pub mouse: mouse_event,
    pub mouse_drag_flag: ::std::os::raw::c_int,
    pub mouse_drag_update:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut client, arg2: *mut mouse_event)>,
    pub mouse_drag_release:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut client, arg2: *mut mouse_event)>,
    pub key_timer: event,
    pub key_tree: *mut tty_key,
}
pub const tty_TTY_VT100: tty__bindgen_ty_1 = 0;
pub const tty_TTY_VT101: tty__bindgen_ty_1 = 1;
pub const tty_TTY_VT102: tty__bindgen_ty_1 = 2;
pub const tty_TTY_VT220: tty__bindgen_ty_1 = 3;
pub const tty_TTY_VT320: tty__bindgen_ty_1 = 4;
pub const tty_TTY_VT420: tty__bindgen_ty_1 = 5;
pub const tty_TTY_UNKNOWN: tty__bindgen_ty_1 = 6;
pub type tty__bindgen_ty_1 = u32;
#[test]
fn bindgen_test_layout_tty() {
    assert_eq!(
        ::std::mem::size_of::<tty>(),
        904usize,
        concat!("Size of: ", stringify!(tty))
    );
    assert_eq!(
        ::std::mem::align_of::<tty>(),
        8usize,
        concat!("Alignment of ", stringify!(tty))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).client as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).sx as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(sx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).sy as *const _ as usize },
        12usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(sy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).cx as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(cx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).cy as *const _ as usize },
        20usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(cy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).cstyle as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(cstyle)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).ccolour as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(ccolour)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).oflag as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(oflag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).oox as *const _ as usize },
        44usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(oox))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).ooy as *const _ as usize },
        48usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(ooy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).osx as *const _ as usize },
        52usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(osx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).osy as *const _ as usize },
        56usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(osy))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).mode as *const _ as usize },
        60usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(mode))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).rlower as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(rlower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).rupper as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(rupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).rleft as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(rleft)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).rright as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(rright)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).fd as *const _ as usize },
        80usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(fd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).event_in as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(event_in)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).in_ as *const _ as usize },
        216usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(in_))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).event_out as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(event_out)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).out as *const _ as usize },
        352usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(out))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).timer as *const _ as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).discarded as *const _ as usize },
        488usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(discarded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).tio as *const _ as usize },
        496usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(tio))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).cell as *const _ as usize },
        556usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(cell))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).last_wp as *const _ as usize },
        592usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(last_wp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).last_cell as *const _ as usize },
        596usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(last_cell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).flags as *const _ as usize },
        632usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).term as *const _ as usize },
        640usize,
        concat!("Offset of field: ", stringify!(tty), "::", stringify!(term))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).term_name as *const _ as usize },
        648usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(term_name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).term_flags as *const _ as usize },
        656usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(term_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).term_type as *const _ as usize },
        660usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(term_type)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).mouse as *const _ as usize },
        664usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(mouse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).mouse_drag_flag as *const _ as usize },
        744usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(mouse_drag_flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).mouse_drag_update as *const _ as usize },
        752usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(mouse_drag_update)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).mouse_drag_release as *const _ as usize },
        760usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(mouse_drag_release)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).key_timer as *const _ as usize },
        768usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(key_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty>())).key_tree as *const _ as usize },
        896usize,
        concat!(
            "Offset of field: ",
            stringify!(tty),
            "::",
            stringify!(key_tree)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tty_ctx {
    pub wp: *mut window_pane,
    pub cell: *const grid_cell,
    pub wrapped: ::std::os::raw::c_int,
    pub num: u_int,
    pub ptr: *mut ::std::os::raw::c_void,
    pub ocx: u_int,
    pub ocy: u_int,
    pub orupper: u_int,
    pub orlower: u_int,
    pub xoff: u_int,
    pub yoff: u_int,
    pub bg: u_int,
    pub bigger: ::std::os::raw::c_int,
    pub ox: u_int,
    pub oy: u_int,
    pub sx: u_int,
    pub sy: u_int,
}
#[test]
fn bindgen_test_layout_tty_ctx() {
    assert_eq!(
        ::std::mem::size_of::<tty_ctx>(),
        80usize,
        concat!("Size of: ", stringify!(tty_ctx))
    );
    assert_eq!(
        ::std::mem::align_of::<tty_ctx>(),
        8usize,
        concat!("Alignment of ", stringify!(tty_ctx))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).wp as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(wp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).cell as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(cell)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).wrapped as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(wrapped)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).num as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).ptr as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(ptr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).ocx as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(ocx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).ocy as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(ocy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).orupper as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(orupper)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).orlower as *const _ as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(orlower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).xoff as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(xoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).yoff as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(yoff)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).bg as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(bg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).bigger as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(bigger)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).ox as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(ox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).oy as *const _ as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(oy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).sx as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(sx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<tty_ctx>())).sy as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(tty_ctx),
            "::",
            stringify!(sy)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct message_entry {
    pub msg: *mut ::std::os::raw::c_char,
    pub msg_num: u_int,
    pub msg_time: time_t,
    pub entry: message_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct message_entry__bindgen_ty_1 {
    pub tqe_next: *mut message_entry,
    pub tqe_prev: *mut *mut message_entry,
}
#[test]
fn bindgen_test_layout_message_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<message_entry__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(message_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<message_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(message_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<message_entry__bindgen_ty_1>())).tqe_next as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(message_entry__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<message_entry__bindgen_ty_1>())).tqe_prev as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(message_entry__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_message_entry() {
    assert_eq!(
        ::std::mem::size_of::<message_entry>(),
        40usize,
        concat!("Size of: ", stringify!(message_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<message_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(message_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<message_entry>())).msg as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(message_entry),
            "::",
            stringify!(msg)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<message_entry>())).msg_num as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(message_entry),
            "::",
            stringify!(msg_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<message_entry>())).msg_time as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(message_entry),
            "::",
            stringify!(msg_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<message_entry>())).entry as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(message_entry),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct args_entry {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct args_tree {
    pub rbh_root: *mut args_entry,
}
#[test]
fn bindgen_test_layout_args_tree() {
    assert_eq!(
        ::std::mem::size_of::<args_tree>(),
        8usize,
        concat!("Size of: ", stringify!(args_tree))
    );
    assert_eq!(
        ::std::mem::align_of::<args_tree>(),
        8usize,
        concat!("Alignment of ", stringify!(args_tree))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<args_tree>())).rbh_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(args_tree),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct args {
    pub tree: args_tree,
    pub argc: ::std::os::raw::c_int,
    pub argv: *mut *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_args() {
    assert_eq!(
        ::std::mem::size_of::<args>(),
        24usize,
        concat!("Size of: ", stringify!(args))
    );
    assert_eq!(
        ::std::mem::align_of::<args>(),
        8usize,
        concat!("Alignment of ", stringify!(args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<args>())).tree as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(args),
            "::",
            stringify!(tree)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<args>())).argc as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(args),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<args>())).argv as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(args),
            "::",
            stringify!(argv)
        )
    );
}
pub const cmd_find_type_CMD_FIND_PANE: cmd_find_type = 0;
pub const cmd_find_type_CMD_FIND_WINDOW: cmd_find_type = 1;
pub const cmd_find_type_CMD_FIND_SESSION: cmd_find_type = 2;
pub type cmd_find_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_find_state {
    pub flags: ::std::os::raw::c_int,
    pub current: *mut cmd_find_state,
    pub s: *mut session,
    pub wl: *mut winlink,
    pub w: *mut window,
    pub wp: *mut window_pane,
    pub idx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmd_find_state() {
    assert_eq!(
        ::std::mem::size_of::<cmd_find_state>(),
        56usize,
        concat!("Size of: ", stringify!(cmd_find_state))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_find_state>(),
        8usize,
        concat!("Alignment of ", stringify!(cmd_find_state))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_find_state>())).flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_find_state),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_find_state>())).current as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_find_state),
            "::",
            stringify!(current)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_find_state>())).s as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_find_state),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_find_state>())).wl as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_find_state),
            "::",
            stringify!(wl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_find_state>())).w as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_find_state),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_find_state>())).wp as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_find_state),
            "::",
            stringify!(wp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_find_state>())).idx as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_find_state),
            "::",
            stringify!(idx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd {
    pub entry: *const cmd_entry,
    pub args: *mut args,
    pub file: *mut ::std::os::raw::c_char,
    pub line: u_int,
    pub flags: ::std::os::raw::c_int,
    pub qentry: cmd__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd__bindgen_ty_1 {
    pub tqe_next: *mut cmd,
    pub tqe_prev: *mut *mut cmd,
}
#[test]
fn bindgen_test_layout_cmd__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cmd__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cmd__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cmd__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd__bindgen_ty_1>())).tqe_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd__bindgen_ty_1>())).tqe_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_cmd() {
    assert_eq!(
        ::std::mem::size_of::<cmd>(),
        48usize,
        concat!("Size of: ", stringify!(cmd))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd>(),
        8usize,
        concat!("Alignment of ", stringify!(cmd))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).entry as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(entry)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).args as *const _ as usize },
        8usize,
        concat!("Offset of field: ", stringify!(cmd), "::", stringify!(args))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).file as *const _ as usize },
        16usize,
        concat!("Offset of field: ", stringify!(cmd), "::", stringify!(file))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).line as *const _ as usize },
        24usize,
        concat!("Offset of field: ", stringify!(cmd), "::", stringify!(line))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).flags as *const _ as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd>())).qentry as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd),
            "::",
            stringify!(qentry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_list {
    pub references: ::std::os::raw::c_int,
    pub list: cmd_list__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_list__bindgen_ty_1 {
    pub tqh_first: *mut cmd,
    pub tqh_last: *mut *mut cmd,
}
#[test]
fn bindgen_test_layout_cmd_list__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cmd_list__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cmd_list__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_list__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cmd_list__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmd_list__bindgen_ty_1>())).tqh_first as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_list__bindgen_ty_1),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_list__bindgen_ty_1>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_list__bindgen_ty_1),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[test]
fn bindgen_test_layout_cmd_list() {
    assert_eq!(
        ::std::mem::size_of::<cmd_list>(),
        24usize,
        concat!("Size of: ", stringify!(cmd_list))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_list>(),
        8usize,
        concat!("Alignment of ", stringify!(cmd_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_list>())).references as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_list),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_list>())).list as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_list),
            "::",
            stringify!(list)
        )
    );
}
pub const cmd_retval_CMD_RETURN_ERROR: cmd_retval = -1;
pub const cmd_retval_CMD_RETURN_NORMAL: cmd_retval = 0;
pub const cmd_retval_CMD_RETURN_WAIT: cmd_retval = 1;
pub const cmd_retval_CMD_RETURN_STOP: cmd_retval = 2;
pub type cmd_retval = i32;
pub const cmdq_type_CMDQ_COMMAND: cmdq_type = 0;
pub const cmdq_type_CMDQ_CALLBACK: cmdq_type = 1;
pub type cmdq_type = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdq_shared {
    pub references: ::std::os::raw::c_int,
    pub flags: ::std::os::raw::c_int,
    pub formats: *mut format_tree,
    pub mouse: mouse_event,
    pub current: cmd_find_state,
}
#[test]
fn bindgen_test_layout_cmdq_shared() {
    assert_eq!(
        ::std::mem::size_of::<cmdq_shared>(),
        152usize,
        concat!("Size of: ", stringify!(cmdq_shared))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdq_shared>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdq_shared))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_shared>())).references as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_shared),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_shared>())).flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_shared),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_shared>())).formats as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_shared),
            "::",
            stringify!(formats)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_shared>())).mouse as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_shared),
            "::",
            stringify!(mouse)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_shared>())).current as *const _ as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_shared),
            "::",
            stringify!(current)
        )
    );
}
pub type cmdq_cb = ::std::option::Option<
    unsafe extern "C" fn(arg1: *mut cmdq_item, arg2: *mut ::std::os::raw::c_void) -> cmd_retval,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdq_item {
    pub name: *const ::std::os::raw::c_char,
    pub queue: *mut cmdq_list,
    pub next: *mut cmdq_item,
    pub client: *mut client,
    pub type_: cmdq_type,
    pub group: u_int,
    pub number: u_int,
    pub time: time_t,
    pub flags: ::std::os::raw::c_int,
    pub shared: *mut cmdq_shared,
    pub source: cmd_find_state,
    pub target: cmd_find_state,
    pub cmdlist: *mut cmd_list,
    pub cmd: *mut cmd,
    pub cb: cmdq_cb,
    pub data: *mut ::std::os::raw::c_void,
    pub entry: cmdq_item__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdq_item__bindgen_ty_1 {
    pub tqe_next: *mut cmdq_item,
    pub tqe_prev: *mut *mut cmdq_item,
}
#[test]
fn bindgen_test_layout_cmdq_item__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cmdq_item__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cmdq_item__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdq_item__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdq_item__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmdq_item__bindgen_ty_1>())).tqe_next as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item__bindgen_ty_1),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmdq_item__bindgen_ty_1>())).tqe_prev as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item__bindgen_ty_1),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_cmdq_item() {
    assert_eq!(
        ::std::mem::size_of::<cmdq_item>(),
        232usize,
        concat!("Size of: ", stringify!(cmdq_item))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdq_item>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdq_item))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).queue as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).next as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).client as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).type_ as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).group as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).number as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).time as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).flags as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).shared as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(shared)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).source as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).target as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).cmdlist as *const _ as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(cmdlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).cmd as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).cb as *const _ as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).data as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_item>())).entry as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_item),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmdq_list {
    pub tqh_first: *mut cmdq_item,
    pub tqh_last: *mut *mut cmdq_item,
}
#[test]
fn bindgen_test_layout_cmdq_list() {
    assert_eq!(
        ::std::mem::size_of::<cmdq_list>(),
        16usize,
        concat!("Size of: ", stringify!(cmdq_list))
    );
    assert_eq!(
        ::std::mem::align_of::<cmdq_list>(),
        8usize,
        concat!("Alignment of ", stringify!(cmdq_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_list>())).tqh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_list),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmdq_list>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmdq_list),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_entry_flag {
    pub flag: ::std::os::raw::c_char,
    pub type_: cmd_find_type,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmd_entry_flag() {
    assert_eq!(
        ::std::mem::size_of::<cmd_entry_flag>(),
        12usize,
        concat!("Size of: ", stringify!(cmd_entry_flag))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_entry_flag>(),
        4usize,
        concat!("Alignment of ", stringify!(cmd_entry_flag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry_flag>())).flag as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry_flag),
            "::",
            stringify!(flag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry_flag>())).type_ as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry_flag),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry_flag>())).flags as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry_flag),
            "::",
            stringify!(flags)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_entry {
    pub name: *const ::std::os::raw::c_char,
    pub alias: *const ::std::os::raw::c_char,
    pub args: cmd_entry__bindgen_ty_1,
    pub usage: *const ::std::os::raw::c_char,
    pub source: cmd_entry_flag,
    pub target: cmd_entry_flag,
    pub flags: ::std::os::raw::c_int,
    pub exec: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut cmd, arg2: *mut cmdq_item) -> cmd_retval,
    >,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cmd_entry__bindgen_ty_1 {
    pub template: *const ::std::os::raw::c_char,
    pub lower: ::std::os::raw::c_int,
    pub upper: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_cmd_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<cmd_entry__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(cmd_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(cmd_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<cmd_entry__bindgen_ty_1>())).template as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry__bindgen_ty_1),
            "::",
            stringify!(template)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry__bindgen_ty_1>())).lower as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry__bindgen_ty_1),
            "::",
            stringify!(lower)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry__bindgen_ty_1>())).upper as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry__bindgen_ty_1),
            "::",
            stringify!(upper)
        )
    );
}
#[test]
fn bindgen_test_layout_cmd_entry() {
    assert_eq!(
        ::std::mem::size_of::<cmd_entry>(),
        80usize,
        concat!("Size of: ", stringify!(cmd_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<cmd_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(cmd_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry>())).alias as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry),
            "::",
            stringify!(alias)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry>())).args as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry),
            "::",
            stringify!(args)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry>())).usage as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry),
            "::",
            stringify!(usage)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry>())).source as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry),
            "::",
            stringify!(source)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry>())).target as *const _ as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry),
            "::",
            stringify!(target)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry>())).flags as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<cmd_entry>())).exec as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(cmd_entry),
            "::",
            stringify!(exec)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct status_line_entry {
    pub expanded: *mut ::std::os::raw::c_char,
    pub ranges: style_ranges,
}
#[test]
fn bindgen_test_layout_status_line_entry() {
    assert_eq!(
        ::std::mem::size_of::<status_line_entry>(),
        24usize,
        concat!("Size of: ", stringify!(status_line_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<status_line_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(status_line_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<status_line_entry>())).expanded as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(status_line_entry),
            "::",
            stringify!(expanded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<status_line_entry>())).ranges as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(status_line_entry),
            "::",
            stringify!(ranges)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct status_line {
    pub timer: event,
    pub screen: screen,
    pub active: *mut screen,
    pub references: ::std::os::raw::c_int,
    pub style: grid_cell,
    pub entries: [status_line_entry; 5usize],
}
#[test]
fn bindgen_test_layout_status_line() {
    assert_eq!(
        ::std::mem::size_of::<status_line>(),
        376usize,
        concat!("Size of: ", stringify!(status_line))
    );
    assert_eq!(
        ::std::mem::align_of::<status_line>(),
        8usize,
        concat!("Alignment of ", stringify!(status_line))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<status_line>())).timer as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(status_line),
            "::",
            stringify!(timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<status_line>())).screen as *const _ as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(status_line),
            "::",
            stringify!(screen)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<status_line>())).active as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(status_line),
            "::",
            stringify!(active)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<status_line>())).references as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(status_line),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<status_line>())).style as *const _ as usize },
        220usize,
        concat!(
            "Offset of field: ",
            stringify!(status_line),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<status_line>())).entries as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(status_line),
            "::",
            stringify!(entries)
        )
    );
}
pub type prompt_input_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut client,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int,
>;
pub type prompt_free_cb =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct client {
    pub name: *const ::std::os::raw::c_char,
    pub peer: *mut tmuxpeer,
    pub queue: cmdq_list,
    pub pid: pid_t,
    pub fd: ::std::os::raw::c_int,
    pub event: event,
    pub retval: ::std::os::raw::c_int,
    pub creation_time: timeval,
    pub activity_time: timeval,
    pub environ: *mut environ,
    pub jobs: *mut format_job_tree,
    pub title: *mut ::std::os::raw::c_char,
    pub cwd: *const ::std::os::raw::c_char,
    pub term: *mut ::std::os::raw::c_char,
    pub ttyname: *mut ::std::os::raw::c_char,
    pub tty: tty,
    pub written: usize,
    pub discarded: usize,
    pub redraw: usize,
    pub stdin_callback: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut client,
            arg2: ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
    pub stdin_callback_data: *mut ::std::os::raw::c_void,
    pub stdin_data: *mut evbuffer,
    pub stdin_closed: ::std::os::raw::c_int,
    pub stdout_data: *mut evbuffer,
    pub stderr_data: *mut evbuffer,
    pub repeat_timer: event,
    pub click_timer: event,
    pub click_button: u_int,
    pub status: status_line,
    pub flags: ::std::os::raw::c_int,
    pub keytable: *mut key_table,
    pub identify_timer: event,
    pub identify_callback:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut client, arg2: *mut window_pane)>,
    pub identify_callback_data: *mut ::std::os::raw::c_void,
    pub identify_callback_item: *mut cmdq_item,
    pub message_string: *mut ::std::os::raw::c_char,
    pub message_timer: event,
    pub message_next: u_int,
    pub message_log: client__bindgen_ty_1,
    pub prompt_string: *mut ::std::os::raw::c_char,
    pub prompt_buffer: *mut utf8_data,
    pub prompt_index: usize,
    pub prompt_inputcb: prompt_input_cb,
    pub prompt_freecb: prompt_free_cb,
    pub prompt_data: *mut ::std::os::raw::c_void,
    pub prompt_hindex: u_int,
    pub prompt_mode: client__bindgen_ty_2,
    pub prompt_saved: *mut utf8_data,
    pub prompt_flags: ::std::os::raw::c_int,
    pub session: *mut session,
    pub last_session: *mut session,
    pub references: ::std::os::raw::c_int,
    pub pan_window: *mut ::std::os::raw::c_void,
    pub pan_ox: u_int,
    pub pan_oy: u_int,
    pub entry: client__bindgen_ty_3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct client__bindgen_ty_1 {
    pub tqh_first: *mut message_entry,
    pub tqh_last: *mut *mut message_entry,
}
#[test]
fn bindgen_test_layout_client__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<client__bindgen_ty_1>(),
        16usize,
        concat!("Size of: ", stringify!(client__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<client__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(client__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client__bindgen_ty_1>())).tqh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(client__bindgen_ty_1),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client__bindgen_ty_1>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(client__bindgen_ty_1),
            "::",
            stringify!(tqh_last)
        )
    );
}
pub const client_PROMPT_ENTRY: client__bindgen_ty_2 = 0;
pub const client_PROMPT_COMMAND: client__bindgen_ty_2 = 1;
pub type client__bindgen_ty_2 = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct client__bindgen_ty_3 {
    pub tqe_next: *mut client,
    pub tqe_prev: *mut *mut client,
}
#[test]
fn bindgen_test_layout_client__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<client__bindgen_ty_3>(),
        16usize,
        concat!("Size of: ", stringify!(client__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<client__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(client__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client__bindgen_ty_3>())).tqe_next as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(client__bindgen_ty_3),
            "::",
            stringify!(tqe_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client__bindgen_ty_3>())).tqe_prev as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(client__bindgen_ty_3),
            "::",
            stringify!(tqe_prev)
        )
    );
}
#[test]
fn bindgen_test_layout_client() {
    assert_eq!(
        ::std::mem::size_of::<client>(),
        2328usize,
        concat!("Size of: ", stringify!(client))
    );
    assert_eq!(
        ::std::mem::align_of::<client>(),
        8usize,
        concat!("Alignment of ", stringify!(client))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).peer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(peer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).queue as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(queue)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).pid as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(pid)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).fd as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(fd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).event as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).retval as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(retval)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).creation_time as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(creation_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).activity_time as *const _ as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(activity_time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).environ as *const _ as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(environ)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).jobs as *const _ as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(jobs)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).title as *const _ as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(title)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).cwd as *const _ as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).term as *const _ as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(term)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).ttyname as *const _ as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(ttyname)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).tty as *const _ as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(tty)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).written as *const _ as usize },
        1160usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(written)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).discarded as *const _ as usize },
        1168usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(discarded)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).redraw as *const _ as usize },
        1176usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(redraw)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).stdin_callback as *const _ as usize },
        1184usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(stdin_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).stdin_callback_data as *const _ as usize },
        1192usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(stdin_callback_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).stdin_data as *const _ as usize },
        1200usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(stdin_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).stdin_closed as *const _ as usize },
        1208usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(stdin_closed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).stdout_data as *const _ as usize },
        1216usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(stdout_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).stderr_data as *const _ as usize },
        1224usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(stderr_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).repeat_timer as *const _ as usize },
        1232usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(repeat_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).click_timer as *const _ as usize },
        1360usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(click_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).click_button as *const _ as usize },
        1488usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(click_button)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).status as *const _ as usize },
        1496usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(status)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).flags as *const _ as usize },
        1872usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).keytable as *const _ as usize },
        1880usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(keytable)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).identify_timer as *const _ as usize },
        1888usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(identify_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).identify_callback as *const _ as usize },
        2016usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(identify_callback)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).identify_callback_data as *const _ as usize },
        2024usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(identify_callback_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).identify_callback_item as *const _ as usize },
        2032usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(identify_callback_item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).message_string as *const _ as usize },
        2040usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(message_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).message_timer as *const _ as usize },
        2048usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(message_timer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).message_next as *const _ as usize },
        2176usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(message_next)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).message_log as *const _ as usize },
        2184usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(message_log)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).prompt_string as *const _ as usize },
        2200usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(prompt_string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).prompt_buffer as *const _ as usize },
        2208usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(prompt_buffer)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).prompt_index as *const _ as usize },
        2216usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(prompt_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).prompt_inputcb as *const _ as usize },
        2224usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(prompt_inputcb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).prompt_freecb as *const _ as usize },
        2232usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(prompt_freecb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).prompt_data as *const _ as usize },
        2240usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(prompt_data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).prompt_hindex as *const _ as usize },
        2248usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(prompt_hindex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).prompt_mode as *const _ as usize },
        2252usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(prompt_mode)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).prompt_saved as *const _ as usize },
        2256usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(prompt_saved)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).prompt_flags as *const _ as usize },
        2264usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(prompt_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).session as *const _ as usize },
        2272usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).last_session as *const _ as usize },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(last_session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).references as *const _ as usize },
        2288usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).pan_window as *const _ as usize },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(pan_window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).pan_ox as *const _ as usize },
        2304usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(pan_ox)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).pan_oy as *const _ as usize },
        2308usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(pan_oy)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<client>())).entry as *const _ as usize },
        2312usize,
        concat!(
            "Offset of field: ",
            stringify!(client),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct clients {
    pub tqh_first: *mut client,
    pub tqh_last: *mut *mut client,
}
#[test]
fn bindgen_test_layout_clients() {
    assert_eq!(
        ::std::mem::size_of::<clients>(),
        16usize,
        concat!("Size of: ", stringify!(clients))
    );
    assert_eq!(
        ::std::mem::align_of::<clients>(),
        8usize,
        concat!("Alignment of ", stringify!(clients))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clients>())).tqh_first as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(clients),
            "::",
            stringify!(tqh_first)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<clients>())).tqh_last as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(clients),
            "::",
            stringify!(tqh_last)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_binding {
    pub key: key_code,
    pub cmdlist: *mut cmd_list,
    pub flags: ::std::os::raw::c_int,
    pub entry: key_binding__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_binding__bindgen_ty_1 {
    pub rbe_left: *mut key_binding,
    pub rbe_right: *mut key_binding,
    pub rbe_parent: *mut key_binding,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_key_binding__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<key_binding__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(key_binding__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<key_binding__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(key_binding__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<key_binding__bindgen_ty_1>())).rbe_left as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(key_binding__bindgen_ty_1),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<key_binding__bindgen_ty_1>())).rbe_right as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(key_binding__bindgen_ty_1),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<key_binding__bindgen_ty_1>())).rbe_parent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(key_binding__bindgen_ty_1),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<key_binding__bindgen_ty_1>())).rbe_color as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(key_binding__bindgen_ty_1),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[test]
fn bindgen_test_layout_key_binding() {
    assert_eq!(
        ::std::mem::size_of::<key_binding>(),
        56usize,
        concat!("Size of: ", stringify!(key_binding))
    );
    assert_eq!(
        ::std::mem::align_of::<key_binding>(),
        8usize,
        concat!("Alignment of ", stringify!(key_binding))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<key_binding>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(key_binding),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<key_binding>())).cmdlist as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(key_binding),
            "::",
            stringify!(cmdlist)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<key_binding>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(key_binding),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<key_binding>())).entry as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(key_binding),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_bindings {
    pub rbh_root: *mut key_binding,
}
#[test]
fn bindgen_test_layout_key_bindings() {
    assert_eq!(
        ::std::mem::size_of::<key_bindings>(),
        8usize,
        concat!("Size of: ", stringify!(key_bindings))
    );
    assert_eq!(
        ::std::mem::align_of::<key_bindings>(),
        8usize,
        concat!("Alignment of ", stringify!(key_bindings))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<key_bindings>())).rbh_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(key_bindings),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_table {
    pub name: *const ::std::os::raw::c_char,
    pub key_bindings: key_bindings,
    pub references: u_int,
    pub entry: key_table__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_table__bindgen_ty_1 {
    pub rbe_left: *mut key_table,
    pub rbe_right: *mut key_table,
    pub rbe_parent: *mut key_table,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_key_table__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<key_table__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(key_table__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<key_table__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(key_table__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<key_table__bindgen_ty_1>())).rbe_left as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(key_table__bindgen_ty_1),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<key_table__bindgen_ty_1>())).rbe_right as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(key_table__bindgen_ty_1),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<key_table__bindgen_ty_1>())).rbe_parent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(key_table__bindgen_ty_1),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<key_table__bindgen_ty_1>())).rbe_color as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(key_table__bindgen_ty_1),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[test]
fn bindgen_test_layout_key_table() {
    assert_eq!(
        ::std::mem::size_of::<key_table>(),
        56usize,
        concat!("Size of: ", stringify!(key_table))
    );
    assert_eq!(
        ::std::mem::align_of::<key_table>(),
        8usize,
        concat!("Alignment of ", stringify!(key_table))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<key_table>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(key_table),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<key_table>())).key_bindings as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(key_table),
            "::",
            stringify!(key_bindings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<key_table>())).references as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(key_table),
            "::",
            stringify!(references)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<key_table>())).entry as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(key_table),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct key_tables {
    pub rbh_root: *mut key_table,
}
#[test]
fn bindgen_test_layout_key_tables() {
    assert_eq!(
        ::std::mem::size_of::<key_tables>(),
        8usize,
        concat!("Size of: ", stringify!(key_tables))
    );
    assert_eq!(
        ::std::mem::align_of::<key_tables>(),
        8usize,
        concat!("Alignment of ", stringify!(key_tables))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<key_tables>())).rbh_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(key_tables),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct options_array {
    pub rbh_root: *mut options_array_item,
}
#[test]
fn bindgen_test_layout_options_array() {
    assert_eq!(
        ::std::mem::size_of::<options_array>(),
        8usize,
        concat!("Size of: ", stringify!(options_array))
    );
    assert_eq!(
        ::std::mem::align_of::<options_array>(),
        8usize,
        concat!("Alignment of ", stringify!(options_array))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_array>())).rbh_root as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(options_array),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union options_value {
    pub string: *mut ::std::os::raw::c_char,
    pub number: ::std::os::raw::c_longlong,
    pub style: style,
    pub array: options_array,
    _bindgen_union_align: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_options_value() {
    assert_eq!(
        ::std::mem::size_of::<options_value>(),
        56usize,
        concat!("Size of: ", stringify!(options_value))
    );
    assert_eq!(
        ::std::mem::align_of::<options_value>(),
        8usize,
        concat!("Alignment of ", stringify!(options_value))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_value>())).string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(options_value),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_value>())).number as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(options_value),
            "::",
            stringify!(number)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_value>())).style as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(options_value),
            "::",
            stringify!(style)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_value>())).array as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(options_value),
            "::",
            stringify!(array)
        )
    );
}
pub const options_table_type_OPTIONS_TABLE_STRING: options_table_type = 0;
pub const options_table_type_OPTIONS_TABLE_NUMBER: options_table_type = 1;
pub const options_table_type_OPTIONS_TABLE_KEY: options_table_type = 2;
pub const options_table_type_OPTIONS_TABLE_COLOUR: options_table_type = 3;
pub const options_table_type_OPTIONS_TABLE_FLAG: options_table_type = 4;
pub const options_table_type_OPTIONS_TABLE_CHOICE: options_table_type = 5;
pub const options_table_type_OPTIONS_TABLE_STYLE: options_table_type = 6;
pub type options_table_type = u32;
pub const options_table_scope_OPTIONS_TABLE_NONE: options_table_scope = 0;
pub const options_table_scope_OPTIONS_TABLE_SERVER: options_table_scope = 1;
pub const options_table_scope_OPTIONS_TABLE_SESSION: options_table_scope = 2;
pub const options_table_scope_OPTIONS_TABLE_WINDOW: options_table_scope = 3;
pub type options_table_scope = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct options_table_entry {
    pub name: *const ::std::os::raw::c_char,
    pub type_: options_table_type,
    pub scope: options_table_scope,
    pub flags: ::std::os::raw::c_int,
    pub minimum: u_int,
    pub maximum: u_int,
    pub choices: *mut *const ::std::os::raw::c_char,
    pub default_str: *const ::std::os::raw::c_char,
    pub default_num: ::std::os::raw::c_longlong,
    pub default_arr: *mut *const ::std::os::raw::c_char,
    pub separator: *const ::std::os::raw::c_char,
    pub pattern: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_options_table_entry() {
    assert_eq!(
        ::std::mem::size_of::<options_table_entry>(),
        80usize,
        concat!("Size of: ", stringify!(options_table_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<options_table_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(options_table_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_table_entry>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(options_table_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_table_entry>())).type_ as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(options_table_entry),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_table_entry>())).scope as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(options_table_entry),
            "::",
            stringify!(scope)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_table_entry>())).flags as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(options_table_entry),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_table_entry>())).minimum as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(options_table_entry),
            "::",
            stringify!(minimum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_table_entry>())).maximum as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(options_table_entry),
            "::",
            stringify!(maximum)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_table_entry>())).choices as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(options_table_entry),
            "::",
            stringify!(choices)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_table_entry>())).default_str as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(options_table_entry),
            "::",
            stringify!(default_str)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_table_entry>())).default_num as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(options_table_entry),
            "::",
            stringify!(default_num)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_table_entry>())).default_arr as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(options_table_entry),
            "::",
            stringify!(default_arr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_table_entry>())).separator as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(options_table_entry),
            "::",
            stringify!(separator)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<options_table_entry>())).pattern as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(options_table_entry),
            "::",
            stringify!(pattern)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct spawn_context {
    pub item: *mut cmdq_item,
    pub s: *mut session,
    pub wl: *mut winlink,
    pub wp0: *mut window_pane,
    pub lc: *mut layout_cell,
    pub name: *const ::std::os::raw::c_char,
    pub argv: *mut *mut ::std::os::raw::c_char,
    pub argc: ::std::os::raw::c_int,
    pub idx: ::std::os::raw::c_int,
    pub cwd: *const ::std::os::raw::c_char,
    pub flags: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_spawn_context() {
    assert_eq!(
        ::std::mem::size_of::<spawn_context>(),
        80usize,
        concat!("Size of: ", stringify!(spawn_context))
    );
    assert_eq!(
        ::std::mem::align_of::<spawn_context>(),
        8usize,
        concat!("Alignment of ", stringify!(spawn_context))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spawn_context>())).item as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(spawn_context),
            "::",
            stringify!(item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spawn_context>())).s as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(spawn_context),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spawn_context>())).wl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(spawn_context),
            "::",
            stringify!(wl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spawn_context>())).wp0 as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(spawn_context),
            "::",
            stringify!(wp0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spawn_context>())).lc as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(spawn_context),
            "::",
            stringify!(lc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spawn_context>())).name as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(spawn_context),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spawn_context>())).argv as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(spawn_context),
            "::",
            stringify!(argv)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spawn_context>())).argc as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(spawn_context),
            "::",
            stringify!(argc)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spawn_context>())).idx as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(spawn_context),
            "::",
            stringify!(idx)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spawn_context>())).cwd as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(spawn_context),
            "::",
            stringify!(cwd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<spawn_context>())).flags as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(spawn_context),
            "::",
            stringify!(flags)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}global_hooks"]
    pub static mut global_hooks: *mut hooks;
}
extern "C" {
    #[link_name = "\u{1}global_options"]
    pub static mut global_options: *mut options;
}
extern "C" {
    #[link_name = "\u{1}global_s_options"]
    pub static mut global_s_options: *mut options;
}
extern "C" {
    #[link_name = "\u{1}global_w_options"]
    pub static mut global_w_options: *mut options;
}
extern "C" {
    #[link_name = "\u{1}global_environ"]
    pub static mut global_environ: *mut environ;
}
extern "C" {
    #[link_name = "\u{1}start_time"]
    pub static mut start_time: timeval;
}
extern "C" {
    #[link_name = "\u{1}socket_path"]
    pub static mut socket_path: *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}shell_command"]
    pub static mut shell_command: *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}ptm_fd"]
    pub static mut ptm_fd: ::std::os::raw::c_int;
}
extern "C" {
    pub fn areshell(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setblocking(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn find_cwd() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn find_home() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn proc_send(
        arg1: *mut tmuxpeer,
        arg2: msgtype,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_void,
        arg5: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn proc_start(arg1: *const ::std::os::raw::c_char) -> *mut tmuxproc;
}
extern "C" {
    pub fn proc_loop(
        arg1: *mut tmuxproc,
        arg2: ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>,
    );
}
extern "C" {
    pub fn proc_exit(arg1: *mut tmuxproc);
}
extern "C" {
    pub fn proc_set_signals(
        arg1: *mut tmuxproc,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    );
}
extern "C" {
    pub fn proc_clear_signals(arg1: *mut tmuxproc, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn proc_add_peer(
        arg1: *mut tmuxproc,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut imsg, arg2: *mut ::std::os::raw::c_void),
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> *mut tmuxpeer;
}
extern "C" {
    pub fn proc_remove_peer(arg1: *mut tmuxpeer);
}
extern "C" {
    pub fn proc_kill_peer(arg1: *mut tmuxpeer);
}
extern "C" {
    pub fn proc_toggle_log(arg1: *mut tmuxproc);
}
extern "C" {
    #[link_name = "\u{1}cfg_finished"]
    pub static mut cfg_finished: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}cfg_client"]
    pub static mut cfg_client: *mut client;
}
extern "C" {
    pub fn start_cfg();
}
extern "C" {
    pub fn load_cfg(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut client,
        arg3: *mut cmdq_item,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn set_cfg_file(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn cfg_add_cause(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn cfg_print_causes(arg1: *mut cmdq_item);
}
extern "C" {
    pub fn cfg_show_causes(arg1: *mut session);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct paste_buffer {
    _unused: [u8; 0],
}
extern "C" {
    pub fn paste_buffer_name(arg1: *mut paste_buffer) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn paste_buffer_order(arg1: *mut paste_buffer) -> u_int;
}
extern "C" {
    pub fn paste_buffer_created(arg1: *mut paste_buffer) -> time_t;
}
extern "C" {
    pub fn paste_buffer_data(
        arg1: *mut paste_buffer,
        arg2: *mut usize,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn paste_walk(arg1: *mut paste_buffer) -> *mut paste_buffer;
}
extern "C" {
    pub fn paste_get_top(arg1: *mut *const ::std::os::raw::c_char) -> *mut paste_buffer;
}
extern "C" {
    pub fn paste_get_name(arg1: *const ::std::os::raw::c_char) -> *mut paste_buffer;
}
extern "C" {
    pub fn paste_free(arg1: *mut paste_buffer);
}
extern "C" {
    pub fn paste_add(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    );
}
extern "C" {
    pub fn paste_rename(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn paste_set(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn paste_make_sample(arg1: *mut paste_buffer) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn format_skip(
        s: *const ::std::os::raw::c_char,
        end: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn format_true(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn format_create(
        arg1: *mut client,
        arg2: *mut cmdq_item,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut format_tree;
}
extern "C" {
    pub fn format_free(arg1: *mut format_tree);
}
extern "C" {
    pub fn format_add(
        arg1: *mut format_tree,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn format_each(
        arg1: *mut format_tree,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_char,
                arg2: *const ::std::os::raw::c_char,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn format_expand_time(
        arg1: *mut format_tree,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn format_expand(
        arg1: *mut format_tree,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn format_single(
        arg1: *mut cmdq_item,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut client,
        arg4: *mut session,
        arg5: *mut winlink,
        arg6: *mut window_pane,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn format_defaults(
        arg1: *mut format_tree,
        arg2: *mut client,
        arg3: *mut session,
        arg4: *mut winlink,
        arg5: *mut window_pane,
    );
}
extern "C" {
    pub fn format_defaults_window(arg1: *mut format_tree, arg2: *mut window);
}
extern "C" {
    pub fn format_defaults_pane(arg1: *mut format_tree, arg2: *mut window_pane);
}
extern "C" {
    pub fn format_defaults_paste_buffer(arg1: *mut format_tree, arg2: *mut paste_buffer);
}
extern "C" {
    pub fn format_lost_client(arg1: *mut client);
}
extern "C" {
    pub fn format_draw(
        arg1: *mut screen_write_ctx,
        arg2: *const grid_cell,
        arg3: u_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut style_ranges,
    );
}
extern "C" {
    pub fn format_width(arg1: *const ::std::os::raw::c_char) -> u_int;
}
extern "C" {
    pub fn format_trim_left(
        arg1: *const ::std::os::raw::c_char,
        arg2: u_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn format_trim_right(
        arg1: *const ::std::os::raw::c_char,
        arg2: u_int,
    ) -> *mut ::std::os::raw::c_char;
}
pub type format_cb =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut format_tree, arg2: *mut format_entry)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct format_entry {
    pub key: *mut ::std::os::raw::c_char,
    pub value: *mut ::std::os::raw::c_char,
    pub t: time_t,
    pub cb: format_cb,
    pub entry: format_entry__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct format_entry__bindgen_ty_1 {
    pub rbe_left: *mut format_entry,
    pub rbe_right: *mut format_entry,
    pub rbe_parent: *mut format_entry,
    pub rbe_color: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_format_entry__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<format_entry__bindgen_ty_1>(),
        32usize,
        concat!("Size of: ", stringify!(format_entry__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<format_entry__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(format_entry__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<format_entry__bindgen_ty_1>())).rbe_left as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(format_entry__bindgen_ty_1),
            "::",
            stringify!(rbe_left)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<format_entry__bindgen_ty_1>())).rbe_right as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(format_entry__bindgen_ty_1),
            "::",
            stringify!(rbe_right)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<format_entry__bindgen_ty_1>())).rbe_parent as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(format_entry__bindgen_ty_1),
            "::",
            stringify!(rbe_parent)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<format_entry__bindgen_ty_1>())).rbe_color as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(format_entry__bindgen_ty_1),
            "::",
            stringify!(rbe_color)
        )
    );
}
#[test]
fn bindgen_test_layout_format_entry() {
    assert_eq!(
        ::std::mem::size_of::<format_entry>(),
        64usize,
        concat!("Size of: ", stringify!(format_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<format_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(format_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_entry>())).key as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(format_entry),
            "::",
            stringify!(key)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_entry>())).value as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(format_entry),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_entry>())).t as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(format_entry),
            "::",
            stringify!(t)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_entry>())).cb as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(format_entry),
            "::",
            stringify!(cb)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_entry>())).entry as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(format_entry),
            "::",
            stringify!(entry)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct format_tree {
    pub c: *mut client,
    pub s: *mut session,
    pub wl: *mut winlink,
    pub w: *mut window,
    pub wp: *mut window_pane,
    pub item: *mut cmdq_item,
    pub client: *mut client,
    pub tag: u_int,
    pub flags: ::std::os::raw::c_int,
    pub time: time_t,
    pub loop_: u_int,
    pub tree: format_tree_format_entry_tree,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct format_tree_format_entry_tree {
    pub rbh_root: *mut format_entry,
}
#[test]
fn bindgen_test_layout_format_tree_format_entry_tree() {
    assert_eq!(
        ::std::mem::size_of::<format_tree_format_entry_tree>(),
        8usize,
        concat!("Size of: ", stringify!(format_tree_format_entry_tree))
    );
    assert_eq!(
        ::std::mem::align_of::<format_tree_format_entry_tree>(),
        8usize,
        concat!("Alignment of ", stringify!(format_tree_format_entry_tree))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<format_tree_format_entry_tree>())).rbh_root as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree_format_entry_tree),
            "::",
            stringify!(rbh_root)
        )
    );
}
#[test]
fn bindgen_test_layout_format_tree() {
    assert_eq!(
        ::std::mem::size_of::<format_tree>(),
        88usize,
        concat!("Size of: ", stringify!(format_tree))
    );
    assert_eq!(
        ::std::mem::align_of::<format_tree>(),
        8usize,
        concat!("Alignment of ", stringify!(format_tree))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_tree>())).c as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree),
            "::",
            stringify!(c)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_tree>())).s as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree),
            "::",
            stringify!(s)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_tree>())).wl as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree),
            "::",
            stringify!(wl)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_tree>())).w as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree),
            "::",
            stringify!(w)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_tree>())).wp as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree),
            "::",
            stringify!(wp)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_tree>())).item as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree),
            "::",
            stringify!(item)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_tree>())).client as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_tree>())).tag as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree),
            "::",
            stringify!(tag)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_tree>())).flags as *const _ as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_tree>())).time as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree),
            "::",
            stringify!(time)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_tree>())).loop_ as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree),
            "::",
            stringify!(loop_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_tree>())).tree as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(format_tree),
            "::",
            stringify!(tree)
        )
    );
}
extern "C" {
    pub fn hooks_get(arg1: *mut session) -> *mut hooks;
}
extern "C" {
    pub fn hooks_create(arg1: *mut hooks) -> *mut hooks;
}
extern "C" {
    pub fn hooks_free(arg1: *mut hooks);
}
extern "C" {
    pub fn hooks_first(arg1: *mut hooks) -> *mut hook;
}
extern "C" {
    pub fn hooks_next(arg1: *mut hook) -> *mut hook;
}
extern "C" {
    pub fn hooks_add(arg1: *mut hooks, arg2: *const ::std::os::raw::c_char, arg3: *mut cmd_list);
}
extern "C" {
    pub fn hooks_copy(arg1: *mut hooks, arg2: *mut hooks);
}
extern "C" {
    pub fn hooks_remove(arg1: *mut hooks, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn hooks_find(arg1: *mut hooks, arg2: *const ::std::os::raw::c_char) -> *mut hook;
}
extern "C" {
    pub fn hooks_insert(
        arg1: *mut hooks,
        arg2: *mut cmdq_item,
        arg3: *mut cmd_find_state,
        arg4: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn notify_hook(arg1: *mut cmdq_item, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn notify_input(arg1: *mut window_pane, arg2: *mut evbuffer);
}
extern "C" {
    pub fn notify_client(arg1: *const ::std::os::raw::c_char, arg2: *mut client);
}
extern "C" {
    pub fn notify_session(arg1: *const ::std::os::raw::c_char, arg2: *mut session);
}
extern "C" {
    pub fn notify_winlink(arg1: *const ::std::os::raw::c_char, arg2: *mut winlink);
}
extern "C" {
    pub fn notify_session_window(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut session,
        arg3: *mut window,
    );
}
extern "C" {
    pub fn notify_window(arg1: *const ::std::os::raw::c_char, arg2: *mut window);
}
extern "C" {
    pub fn notify_pane(arg1: *const ::std::os::raw::c_char, arg2: *mut window_pane);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct notify_entry {
    pub name: *const ::std::os::raw::c_char,
    pub client: *mut client,
    pub session: *mut session,
    pub window: *mut window,
    pub pane: ::std::os::raw::c_int,
    pub fs: cmd_find_state,
}
#[test]
fn bindgen_test_layout_notify_entry() {
    assert_eq!(
        ::std::mem::size_of::<notify_entry>(),
        96usize,
        concat!("Size of: ", stringify!(notify_entry))
    );
    assert_eq!(
        ::std::mem::align_of::<notify_entry>(),
        8usize,
        concat!("Alignment of ", stringify!(notify_entry))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<notify_entry>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(notify_entry),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<notify_entry>())).client as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(notify_entry),
            "::",
            stringify!(client)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<notify_entry>())).session as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(notify_entry),
            "::",
            stringify!(session)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<notify_entry>())).window as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(notify_entry),
            "::",
            stringify!(window)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<notify_entry>())).pane as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(notify_entry),
            "::",
            stringify!(pane)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<notify_entry>())).fs as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(notify_entry),
            "::",
            stringify!(fs)
        )
    );
}
extern "C" {
    pub fn options_create(arg1: *mut options) -> *mut options;
}
extern "C" {
    pub fn options_free(arg1: *mut options);
}
extern "C" {
    pub fn options_first(arg1: *mut options) -> *mut options_entry;
}
extern "C" {
    pub fn options_next(arg1: *mut options_entry) -> *mut options_entry;
}
extern "C" {
    pub fn options_empty(
        arg1: *mut options,
        arg2: *const options_table_entry,
    ) -> *mut options_entry;
}
extern "C" {
    pub fn options_default(
        arg1: *mut options,
        arg2: *const options_table_entry,
    ) -> *mut options_entry;
}
extern "C" {
    pub fn options_name(arg1: *mut options_entry) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn options_table_entry(arg1: *mut options_entry) -> *const options_table_entry;
}
extern "C" {
    pub fn options_get_only(
        arg1: *mut options,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut options_entry;
}
extern "C" {
    pub fn options_get(
        arg1: *mut options,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut options_entry;
}
extern "C" {
    pub fn options_remove(arg1: *mut options_entry);
}
extern "C" {
    pub fn options_array_clear(arg1: *mut options_entry);
}
extern "C" {
    pub fn options_array_get(arg1: *mut options_entry, arg2: u_int) -> *mut options_value;
}
extern "C" {
    pub fn options_array_set(
        arg1: *mut options_entry,
        arg2: u_int,
        arg3: *const ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn options_array_assign(arg1: *mut options_entry, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn options_array_first(arg1: *mut options_entry) -> *mut options_array_item;
}
extern "C" {
    pub fn options_array_next(arg1: *mut options_array_item) -> *mut options_array_item;
}
extern "C" {
    pub fn options_array_item_index(arg1: *mut options_array_item) -> u_int;
}
extern "C" {
    pub fn options_array_item_value(arg1: *mut options_array_item) -> *mut options_value;
}
extern "C" {
    pub fn options_isarray(arg1: *mut options_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn options_isstring(arg1: *mut options_entry) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn options_tostring(
        arg1: *mut options_entry,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn options_parse(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn options_parse_get(
        arg1: *mut options,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut options_entry;
}
extern "C" {
    pub fn options_match(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn options_match_get(
        arg1: *mut options,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut ::std::os::raw::c_int,
    ) -> *mut options_entry;
}
extern "C" {
    pub fn options_get_string(
        arg1: *mut options,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn options_get_number(
        arg1: *mut options,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn options_get_style(arg1: *mut options, arg2: *const ::std::os::raw::c_char)
        -> *mut style;
}
extern "C" {
    pub fn options_set_string(
        arg1: *mut options,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> *mut options_entry;
}
extern "C" {
    pub fn options_set_number(
        arg1: *mut options,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_longlong,
    ) -> *mut options_entry;
}
extern "C" {
    pub fn options_set_style(
        arg1: *mut options,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut options_entry;
}
extern "C" {
    pub fn options_scope_from_flags(
        arg1: *mut args,
        arg2: ::std::os::raw::c_int,
        arg3: *mut cmd_find_state,
        arg4: *mut *mut options,
        arg5: *mut *mut ::std::os::raw::c_char,
    ) -> options_table_scope;
}
extern "C" {
    #[link_name = "\u{1}options_table"]
    pub static mut options_table: [options_table_entry; 0usize];
}
pub type job_update_cb = ::std::option::Option<unsafe extern "C" fn(arg1: *mut job)>;
pub type job_complete_cb = ::std::option::Option<unsafe extern "C" fn(arg1: *mut job)>;
pub type job_free_cb =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>;
extern "C" {
    pub fn job_run(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut session,
        arg3: *const ::std::os::raw::c_char,
        arg4: job_update_cb,
        arg5: job_complete_cb,
        arg6: job_free_cb,
        arg7: *mut ::std::os::raw::c_void,
        arg8: ::std::os::raw::c_int,
    ) -> *mut job;
}
extern "C" {
    pub fn job_free(arg1: *mut job);
}
extern "C" {
    pub fn job_check_died(arg1: pid_t, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn job_get_status(arg1: *mut job) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn job_get_data(arg1: *mut job) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn job_get_event(arg1: *mut job) -> *mut bufferevent;
}
extern "C" {
    pub fn job_kill_all();
}
extern "C" {
    pub fn job_still_running() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn job_print_summary(arg1: *mut cmdq_item, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn environ_create() -> *mut environ;
}
extern "C" {
    pub fn environ_free(arg1: *mut environ);
}
extern "C" {
    pub fn environ_first(arg1: *mut environ) -> *mut environ_entry;
}
extern "C" {
    pub fn environ_next(arg1: *mut environ_entry) -> *mut environ_entry;
}
extern "C" {
    pub fn environ_copy(arg1: *mut environ, arg2: *mut environ);
}
extern "C" {
    pub fn environ_find(
        arg1: *mut environ,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut environ_entry;
}
extern "C" {
    pub fn environ_set(
        arg1: *mut environ,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn environ_clear(arg1: *mut environ, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn environ_put(arg1: *mut environ, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn environ_unset(arg1: *mut environ, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn environ_update(arg1: *mut options, arg2: *mut environ, arg3: *mut environ);
}
extern "C" {
    pub fn environ_push(arg1: *mut environ);
}
extern "C" {
    pub fn environ_log(arg1: *mut environ, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn environ_for_session(arg1: *mut session, arg2: ::std::os::raw::c_int) -> *mut environ;
}
extern "C" {
    pub fn tty_create_log();
}
extern "C" {
    pub fn tty_window_bigger(arg1: *mut tty) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tty_window_offset(
        arg1: *mut tty,
        arg2: *mut u_int,
        arg3: *mut u_int,
        arg4: *mut u_int,
        arg5: *mut u_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tty_update_window_offset(arg1: *mut window);
}
extern "C" {
    pub fn tty_update_client_offset(arg1: *mut client);
}
extern "C" {
    pub fn tty_raw(arg1: *mut tty, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn tty_attributes(arg1: *mut tty, arg2: *const grid_cell, arg3: *mut window_pane);
}
extern "C" {
    pub fn tty_reset(arg1: *mut tty);
}
extern "C" {
    pub fn tty_region_off(arg1: *mut tty);
}
extern "C" {
    pub fn tty_margin_off(arg1: *mut tty);
}
extern "C" {
    pub fn tty_cursor(arg1: *mut tty, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn tty_putcode(arg1: *mut tty, arg2: tty_code_code);
}
extern "C" {
    pub fn tty_putcode1(arg1: *mut tty, arg2: tty_code_code, arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tty_putcode2(
        arg1: *mut tty,
        arg2: tty_code_code,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tty_putcode3(
        arg1: *mut tty,
        arg2: tty_code_code,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn tty_putcode_ptr1(
        arg1: *mut tty,
        arg2: tty_code_code,
        arg3: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn tty_putcode_ptr2(
        arg1: *mut tty,
        arg2: tty_code_code,
        arg3: *const ::std::os::raw::c_void,
        arg4: *const ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn tty_puts(arg1: *mut tty, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn tty_putc(arg1: *mut tty, arg2: u_char);
}
extern "C" {
    pub fn tty_putn(arg1: *mut tty, arg2: *const ::std::os::raw::c_void, arg3: usize, arg4: u_int);
}
extern "C" {
    pub fn tty_init(
        arg1: *mut tty,
        arg2: *mut client,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tty_resize(arg1: *mut tty);
}
extern "C" {
    pub fn tty_set_size(arg1: *mut tty, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn tty_start_tty(arg1: *mut tty);
}
extern "C" {
    pub fn tty_stop_tty(arg1: *mut tty);
}
extern "C" {
    pub fn tty_set_title(arg1: *mut tty, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn tty_update_mode(arg1: *mut tty, arg2: ::std::os::raw::c_int, arg3: *mut screen);
}
extern "C" {
    pub fn tty_draw_line(
        arg1: *mut tty,
        arg2: *mut window_pane,
        arg3: *mut screen,
        arg4: u_int,
        arg5: u_int,
        arg6: u_int,
        arg7: u_int,
        arg8: u_int,
    );
}
extern "C" {
    pub fn tty_open(
        arg1: *mut tty,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tty_close(arg1: *mut tty);
}
extern "C" {
    pub fn tty_free(arg1: *mut tty);
}
extern "C" {
    pub fn tty_set_type(arg1: *mut tty, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn tty_write(
        arg1: ::std::option::Option<unsafe extern "C" fn(arg1: *mut tty, arg2: *const tty_ctx)>,
        arg2: *mut tty_ctx,
    );
}
extern "C" {
    pub fn tty_cmd_alignmenttest(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_cell(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_cells(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_clearendofline(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_clearendofscreen(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_clearline(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_clearscreen(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_clearstartofline(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_clearstartofscreen(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_deletecharacter(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_clearcharacter(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_deleteline(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_erasecharacter(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_insertcharacter(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_insertline(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_linefeed(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_scrollup(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_reverseindex(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_setselection(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    pub fn tty_cmd_rawstring(arg1: *mut tty, arg2: *const tty_ctx);
}
extern "C" {
    #[link_name = "\u{1}tty_terms"]
    pub static mut tty_terms: tty_terms;
}
extern "C" {
    pub fn tty_term_ncodes() -> u_int;
}
extern "C" {
    pub fn tty_term_find(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> *mut tty_term;
}
extern "C" {
    pub fn tty_term_free(arg1: *mut tty_term);
}
extern "C" {
    pub fn tty_term_has(arg1: *mut tty_term, arg2: tty_code_code) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tty_term_string(
        arg1: *mut tty_term,
        arg2: tty_code_code,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tty_term_string1(
        arg1: *mut tty_term,
        arg2: tty_code_code,
        arg3: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tty_term_string2(
        arg1: *mut tty_term,
        arg2: tty_code_code,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tty_term_string3(
        arg1: *mut tty_term,
        arg2: tty_code_code,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tty_term_ptr1(
        arg1: *mut tty_term,
        arg2: tty_code_code,
        arg3: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tty_term_ptr2(
        arg1: *mut tty_term,
        arg2: tty_code_code,
        arg3: *const ::std::os::raw::c_void,
        arg4: *const ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tty_term_number(arg1: *mut tty_term, arg2: tty_code_code) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tty_term_flag(arg1: *mut tty_term, arg2: tty_code_code) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tty_term_describe(
        arg1: *mut tty_term,
        arg2: tty_code_code,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tty_acs_needed(arg1: *mut tty) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tty_acs_get(arg1: *mut tty, arg2: u_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn tty_keys_build(arg1: *mut tty);
}
extern "C" {
    pub fn tty_keys_free(arg1: *mut tty);
}
extern "C" {
    pub fn tty_keys_next(arg1: *mut tty) -> key_code;
}
extern "C" {
    pub fn args_set(arg1: *mut args, arg2: u_char, arg3: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn args_parse(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> *mut args;
}
extern "C" {
    pub fn args_free(arg1: *mut args);
}
extern "C" {
    pub fn args_print(arg1: *mut args) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn args_has(arg1: *mut args, arg2: u_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn args_get(arg1: *mut args, arg2: u_char) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn args_strtonum(
        arg1: *mut args,
        arg2: u_char,
        arg3: ::std::os::raw::c_longlong,
        arg4: ::std::os::raw::c_longlong,
        arg5: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn cmd_find_target(
        arg1: *mut cmd_find_state,
        arg2: *mut cmdq_item,
        arg3: *const ::std::os::raw::c_char,
        arg4: cmd_find_type,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_find_best_client(arg1: *mut session) -> *mut client;
}
extern "C" {
    pub fn cmd_find_client(
        arg1: *mut cmdq_item,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut client;
}
extern "C" {
    pub fn cmd_find_clear_state(arg1: *mut cmd_find_state, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn cmd_find_empty_state(arg1: *mut cmd_find_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_find_valid_state(arg1: *mut cmd_find_state) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_find_copy_state(arg1: *mut cmd_find_state, arg2: *mut cmd_find_state);
}
extern "C" {
    pub fn cmd_find_from_session(
        arg1: *mut cmd_find_state,
        arg2: *mut session,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cmd_find_from_winlink(
        arg1: *mut cmd_find_state,
        arg2: *mut winlink,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cmd_find_from_session_window(
        arg1: *mut cmd_find_state,
        arg2: *mut session,
        arg3: *mut window,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_find_from_window(
        arg1: *mut cmd_find_state,
        arg2: *mut window,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_find_from_winlink_pane(
        arg1: *mut cmd_find_state,
        arg2: *mut winlink,
        arg3: *mut window_pane,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cmd_find_from_pane(
        arg1: *mut cmd_find_state,
        arg2: *mut window_pane,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_find_from_client(
        arg1: *mut cmd_find_state,
        arg2: *mut client,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_find_from_mouse(
        arg1: *mut cmd_find_state,
        arg2: *mut mouse_event,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_find_from_nothing(
        arg1: *mut cmd_find_state,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_log_argv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn cmd_pack_argv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_char,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_unpack_argv(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_copy_argv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmd_free_argv(arg1: ::std::os::raw::c_int, arg2: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn cmd_stringify_argv(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmd_parse(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: u_int,
        arg5: *mut *mut ::std::os::raw::c_char,
    ) -> *mut cmd;
}
extern "C" {
    pub fn cmd_print(arg1: *mut cmd) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmd_mouse_at(
        arg1: *mut window_pane,
        arg2: *mut mouse_event,
        arg3: *mut u_int,
        arg4: *mut u_int,
        arg5: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_mouse_window(arg1: *mut mouse_event, arg2: *mut *mut session) -> *mut winlink;
}
extern "C" {
    pub fn cmd_mouse_pane(
        arg1: *mut mouse_event,
        arg2: *mut *mut session,
        arg3: *mut *mut winlink,
    ) -> *mut window_pane;
}
extern "C" {
    pub fn cmd_template_replace(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}cmd_table"]
    pub static mut cmd_table: [*const cmd_entry; 0usize];
}
extern "C" {
    #[link_name = "\u{1}cmd_entry_from_plugin"]
    pub static mut cmd_entry_from_plugin: *const cmd_entry;
}
extern "C" {
    pub fn cmd_attach_session(
        arg1: *mut cmdq_item,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *const ::std::os::raw::c_char,
        arg6: ::std::os::raw::c_int,
    ) -> cmd_retval;
}
extern "C" {
    pub fn cmd_list_parse(
        arg1: ::std::os::raw::c_int,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: u_int,
        arg5: *mut *mut ::std::os::raw::c_char,
    ) -> *mut cmd_list;
}
extern "C" {
    pub fn cmd_list_free(arg1: *mut cmd_list);
}
extern "C" {
    pub fn cmd_list_print(arg1: *mut cmd_list) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cmdq_get_command(
        arg1: *mut cmd_list,
        arg2: *mut cmd_find_state,
        arg3: *mut mouse_event,
        arg4: ::std::os::raw::c_int,
    ) -> *mut cmdq_item;
}
extern "C" {
    pub fn cmdq_get_callback1(
        arg1: *const ::std::os::raw::c_char,
        arg2: cmdq_cb,
        arg3: *mut ::std::os::raw::c_void,
    ) -> *mut cmdq_item;
}
extern "C" {
    pub fn cmdq_insert_after(arg1: *mut cmdq_item, arg2: *mut cmdq_item);
}
extern "C" {
    pub fn cmdq_append(arg1: *mut client, arg2: *mut cmdq_item);
}
extern "C" {
    pub fn cmdq_format(
        arg1: *mut cmdq_item,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn cmdq_next(arg1: *mut client) -> u_int;
}
extern "C" {
    pub fn cmdq_guard(
        arg1: *mut cmdq_item,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn cmdq_print(arg1: *mut cmdq_item, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn cmdq_error(arg1: *mut cmdq_item, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn cmd_string_split(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cmd_string_parse(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: u_int,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> *mut cmd_list;
}
extern "C" {
    pub fn cmd_wait_for_flush();
}
extern "C" {
    pub fn client_main(
        arg1: *mut event_base,
        arg2: ::std::os::raw::c_int,
        arg3: *mut *mut ::std::os::raw::c_char,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn key_bindings_get_table(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut key_table;
}
extern "C" {
    pub fn key_bindings_first_table() -> *mut key_table;
}
extern "C" {
    pub fn key_bindings_next_table(arg1: *mut key_table) -> *mut key_table;
}
extern "C" {
    pub fn key_bindings_unref_table(arg1: *mut key_table);
}
extern "C" {
    pub fn key_bindings_get(arg1: *mut key_table, arg2: key_code) -> *mut key_binding;
}
extern "C" {
    pub fn key_bindings_first(arg1: *mut key_table) -> *mut key_binding;
}
extern "C" {
    pub fn key_bindings_next(arg1: *mut key_table, arg2: *mut key_binding) -> *mut key_binding;
}
extern "C" {
    pub fn key_bindings_add(
        arg1: *const ::std::os::raw::c_char,
        arg2: key_code,
        arg3: ::std::os::raw::c_int,
        arg4: *mut cmd_list,
    );
}
extern "C" {
    pub fn key_bindings_remove(arg1: *const ::std::os::raw::c_char, arg2: key_code);
}
extern "C" {
    pub fn key_bindings_remove_table(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn key_bindings_init();
}
extern "C" {
    pub fn key_bindings_dispatch(
        arg1: *mut key_binding,
        arg2: *mut cmdq_item,
        arg3: *mut client,
        arg4: *mut mouse_event,
        arg5: *mut cmd_find_state,
    );
}
extern "C" {
    pub fn key_string_lookup_string(arg1: *const ::std::os::raw::c_char) -> key_code;
}
extern "C" {
    pub fn key_string_lookup_key(arg1: key_code) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn alerts_reset_all();
}
extern "C" {
    pub fn alerts_queue(arg1: *mut window, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn alerts_check_session(arg1: *mut session);
}
extern "C" {
    #[link_name = "\u{1}server_proc"]
    pub static mut server_proc: *mut tmuxproc;
}
extern "C" {
    #[link_name = "\u{1}clients"]
    pub static mut clients: clients;
}
extern "C" {
    #[link_name = "\u{1}marked_pane"]
    pub static mut marked_pane: cmd_find_state;
}
extern "C" {
    pub fn server_set_marked(arg1: *mut session, arg2: *mut winlink, arg3: *mut window_pane);
}
extern "C" {
    pub fn server_clear_marked();
}
extern "C" {
    pub fn server_is_marked(
        arg1: *mut session,
        arg2: *mut winlink,
        arg3: *mut window_pane,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn server_check_marked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn server_start(
        arg1: *mut tmuxproc,
        arg2: *mut event_base,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn server_update_socket();
}
extern "C" {
    pub fn server_add_accept(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn server_client_how_many() -> u_int;
}
extern "C" {
    pub fn server_client_set_identify(arg1: *mut client, arg2: u_int);
}
extern "C" {
    pub fn server_client_set_key_table(arg1: *mut client, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn server_client_get_key_table(arg1: *mut client) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn server_client_check_nested(arg1: *mut client) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn server_client_handle_key(arg1: *mut client, arg2: key_code);
}
extern "C" {
    pub fn server_client_create(arg1: ::std::os::raw::c_int) -> *mut client;
}
extern "C" {
    pub fn server_client_open(
        arg1: *mut client,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn server_client_unref(arg1: *mut client);
}
extern "C" {
    pub fn server_client_lost(arg1: *mut client);
}
extern "C" {
    pub fn server_client_suspend(arg1: *mut client);
}
extern "C" {
    pub fn server_client_detach(arg1: *mut client, arg2: msgtype);
}
extern "C" {
    pub fn server_client_exec(arg1: *mut client, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn server_client_loop();
}
extern "C" {
    pub fn server_client_push_stdout(arg1: *mut client);
}
extern "C" {
    pub fn server_client_push_stderr(arg1: *mut client);
}
extern "C" {
    pub fn server_client_add_message(arg1: *mut client, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn server_client_get_path(
        arg1: *mut client,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn server_client_get_cwd(
        arg1: *mut client,
        arg2: *mut session,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn server_redraw_client(arg1: *mut client);
}
extern "C" {
    pub fn server_status_client(arg1: *mut client);
}
extern "C" {
    pub fn server_redraw_session(arg1: *mut session);
}
extern "C" {
    pub fn server_redraw_session_group(arg1: *mut session);
}
extern "C" {
    pub fn server_status_session(arg1: *mut session);
}
extern "C" {
    pub fn server_status_session_group(arg1: *mut session);
}
extern "C" {
    pub fn server_redraw_window(arg1: *mut window);
}
extern "C" {
    pub fn server_redraw_window_borders(arg1: *mut window);
}
extern "C" {
    pub fn server_status_window(arg1: *mut window);
}
extern "C" {
    pub fn server_lock();
}
extern "C" {
    pub fn server_lock_session(arg1: *mut session);
}
extern "C" {
    pub fn server_lock_client(arg1: *mut client);
}
extern "C" {
    pub fn server_kill_pane(arg1: *mut window_pane);
}
extern "C" {
    pub fn server_kill_window(arg1: *mut window);
}
extern "C" {
    pub fn server_link_window(
        arg1: *mut session,
        arg2: *mut winlink,
        arg3: *mut session,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
        arg7: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn server_unlink_window(arg1: *mut session, arg2: *mut winlink);
}
extern "C" {
    pub fn server_destroy_pane(arg1: *mut window_pane, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn server_destroy_session(arg1: *mut session);
}
extern "C" {
    pub fn server_check_unattached();
}
extern "C" {
    pub fn server_set_stdin_callback(
        arg1: *mut client,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut client,
                arg2: ::std::os::raw::c_int,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
        arg3: *mut ::std::os::raw::c_void,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn server_unzoom_window(arg1: *mut window);
}
extern "C" {
    pub fn status_timer_start(arg1: *mut client);
}
extern "C" {
    pub fn status_timer_start_all();
}
extern "C" {
    pub fn status_update_cache(arg1: *mut session);
}
extern "C" {
    pub fn status_at_line(arg1: *mut client) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn status_line_size(arg1: *mut client) -> u_int;
}
extern "C" {
    pub fn status_get_range(arg1: *mut client, arg2: u_int, arg3: u_int) -> *mut style_range;
}
extern "C" {
    pub fn status_init(arg1: *mut client);
}
extern "C" {
    pub fn status_free(arg1: *mut client);
}
extern "C" {
    pub fn status_redraw(arg1: *mut client) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn status_message_set(arg1: *mut client, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn status_message_clear(arg1: *mut client);
}
extern "C" {
    pub fn status_message_redraw(arg1: *mut client) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn status_prompt_set(
        arg1: *mut client,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: prompt_input_cb,
        arg5: prompt_free_cb,
        arg6: *mut ::std::os::raw::c_void,
        arg7: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn status_prompt_clear(arg1: *mut client);
}
extern "C" {
    pub fn status_prompt_redraw(arg1: *mut client) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn status_prompt_key(arg1: *mut client, arg2: key_code) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn status_prompt_update(
        arg1: *mut client,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn status_prompt_load_history();
}
extern "C" {
    pub fn status_prompt_save_history();
}
extern "C" {
    pub fn resize_window(arg1: *mut window, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn default_window_size(
        arg1: *mut session,
        arg2: *mut window,
        arg3: *mut u_int,
        arg4: *mut u_int,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn recalculate_sizes();
}
extern "C" {
    pub fn input_init(arg1: *mut window_pane);
}
extern "C" {
    pub fn input_free(arg1: *mut window_pane);
}
extern "C" {
    pub fn input_reset(arg1: *mut window_pane, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn input_pending(arg1: *mut window_pane) -> *mut evbuffer;
}
extern "C" {
    pub fn input_parse(arg1: *mut window_pane);
}
extern "C" {
    pub fn input_key(arg1: *mut window_pane, arg2: key_code, arg3: *mut mouse_event);
}
extern "C" {
    pub fn xterm_keys_lookup(arg1: key_code) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn xterm_keys_find(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: *mut usize,
        arg4: *mut key_code,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn colour_find_rgb(arg1: u_char, arg2: u_char, arg3: u_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn colour_join_rgb(arg1: u_char, arg2: u_char, arg3: u_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn colour_split_rgb(
        arg1: ::std::os::raw::c_int,
        arg2: *mut u_char,
        arg3: *mut u_char,
        arg4: *mut u_char,
    );
}
extern "C" {
    pub fn colour_tostring(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn colour_fromstring(s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn colour_256to16(arg1: u_char) -> u_char;
}
extern "C" {
    pub fn attributes_tostring(arg1: ::std::os::raw::c_int) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn attributes_fromstring(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}grid_default_cell"]
    pub static grid_default_cell: grid_cell;
}
extern "C" {
    pub fn grid_cells_equal(
        arg1: *const grid_cell,
        arg2: *const grid_cell,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grid_create(arg1: u_int, arg2: u_int, arg3: u_int) -> *mut grid;
}
extern "C" {
    pub fn grid_destroy(arg1: *mut grid);
}
extern "C" {
    pub fn grid_compare(arg1: *mut grid, arg2: *mut grid) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grid_collect_history(arg1: *mut grid);
}
extern "C" {
    pub fn grid_scroll_history(arg1: *mut grid, arg2: u_int);
}
extern "C" {
    pub fn grid_scroll_history_region(arg1: *mut grid, arg2: u_int, arg3: u_int, arg4: u_int);
}
extern "C" {
    pub fn grid_clear_history(arg1: *mut grid);
}
extern "C" {
    pub fn grid_peek_line(arg1: *mut grid, arg2: u_int) -> *const grid_line;
}
extern "C" {
    pub fn grid_get_cell(arg1: *mut grid, arg2: u_int, arg3: u_int, arg4: *mut grid_cell);
}
extern "C" {
    pub fn grid_set_cell(arg1: *mut grid, arg2: u_int, arg3: u_int, arg4: *const grid_cell);
}
extern "C" {
    pub fn grid_set_cells(
        arg1: *mut grid,
        arg2: u_int,
        arg3: u_int,
        arg4: *const grid_cell,
        arg5: *const ::std::os::raw::c_char,
        arg6: usize,
    );
}
extern "C" {
    pub fn grid_get_line(arg1: *mut grid, arg2: u_int) -> *mut grid_line;
}
extern "C" {
    pub fn grid_adjust_lines(arg1: *mut grid, arg2: u_int);
}
extern "C" {
    pub fn grid_clear(
        arg1: *mut grid,
        arg2: u_int,
        arg3: u_int,
        arg4: u_int,
        arg5: u_int,
        arg6: u_int,
    );
}
extern "C" {
    pub fn grid_clear_lines(arg1: *mut grid, arg2: u_int, arg3: u_int, arg4: u_int);
}
extern "C" {
    pub fn grid_move_lines(arg1: *mut grid, arg2: u_int, arg3: u_int, arg4: u_int, arg5: u_int);
}
extern "C" {
    pub fn grid_move_cells(
        arg1: *mut grid,
        arg2: u_int,
        arg3: u_int,
        arg4: u_int,
        arg5: u_int,
        arg6: u_int,
    );
}
extern "C" {
    pub fn grid_string_cells(
        arg1: *mut grid,
        arg2: u_int,
        arg3: u_int,
        arg4: u_int,
        arg5: *mut *mut grid_cell,
        arg6: ::std::os::raw::c_int,
        arg7: ::std::os::raw::c_int,
        arg8: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn grid_duplicate_lines(
        arg1: *mut grid,
        arg2: u_int,
        arg3: *mut grid,
        arg4: u_int,
        arg5: u_int,
    );
}
extern "C" {
    pub fn grid_reflow(arg1: *mut grid, arg2: u_int);
}
extern "C" {
    pub fn grid_wrap_position(
        arg1: *mut grid,
        arg2: u_int,
        arg3: u_int,
        arg4: *mut u_int,
        arg5: *mut u_int,
    );
}
extern "C" {
    pub fn grid_unwrap_position(
        arg1: *mut grid,
        arg2: *mut u_int,
        arg3: *mut u_int,
        arg4: u_int,
        arg5: u_int,
    );
}
extern "C" {
    pub fn grid_view_get_cell(arg1: *mut grid, arg2: u_int, arg3: u_int, arg4: *mut grid_cell);
}
extern "C" {
    pub fn grid_view_set_cell(arg1: *mut grid, arg2: u_int, arg3: u_int, arg4: *const grid_cell);
}
extern "C" {
    pub fn grid_view_set_cells(
        arg1: *mut grid,
        arg2: u_int,
        arg3: u_int,
        arg4: *const grid_cell,
        arg5: *const ::std::os::raw::c_char,
        arg6: usize,
    );
}
extern "C" {
    pub fn grid_view_clear_history(arg1: *mut grid, arg2: u_int);
}
extern "C" {
    pub fn grid_view_clear(
        arg1: *mut grid,
        arg2: u_int,
        arg3: u_int,
        arg4: u_int,
        arg5: u_int,
        arg6: u_int,
    );
}
extern "C" {
    pub fn grid_view_scroll_region_up(arg1: *mut grid, arg2: u_int, arg3: u_int, arg4: u_int);
}
extern "C" {
    pub fn grid_view_scroll_region_down(arg1: *mut grid, arg2: u_int, arg3: u_int, arg4: u_int);
}
extern "C" {
    pub fn grid_view_insert_lines(arg1: *mut grid, arg2: u_int, arg3: u_int, arg4: u_int);
}
extern "C" {
    pub fn grid_view_insert_lines_region(
        arg1: *mut grid,
        arg2: u_int,
        arg3: u_int,
        arg4: u_int,
        arg5: u_int,
    );
}
extern "C" {
    pub fn grid_view_delete_lines(arg1: *mut grid, arg2: u_int, arg3: u_int, arg4: u_int);
}
extern "C" {
    pub fn grid_view_delete_lines_region(
        arg1: *mut grid,
        arg2: u_int,
        arg3: u_int,
        arg4: u_int,
        arg5: u_int,
    );
}
extern "C" {
    pub fn grid_view_insert_cells(
        arg1: *mut grid,
        arg2: u_int,
        arg3: u_int,
        arg4: u_int,
        arg5: u_int,
    );
}
extern "C" {
    pub fn grid_view_delete_cells(
        arg1: *mut grid,
        arg2: u_int,
        arg3: u_int,
        arg4: u_int,
        arg5: u_int,
    );
}
extern "C" {
    pub fn grid_view_string_cells(
        arg1: *mut grid,
        arg2: u_int,
        arg3: u_int,
        arg4: u_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn screen_write_start(
        arg1: *mut screen_write_ctx,
        arg2: *mut window_pane,
        arg3: *mut screen,
    );
}
extern "C" {
    pub fn screen_write_stop(arg1: *mut screen_write_ctx);
}
extern "C" {
    pub fn screen_write_reset(arg1: *mut screen_write_ctx);
}
extern "C" {
    pub fn screen_write_strlen(arg1: *const ::std::os::raw::c_char, ...) -> usize;
}
extern "C" {
    pub fn screen_write_puts(
        arg1: *mut screen_write_ctx,
        arg2: *const grid_cell,
        arg3: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn screen_write_nputs(
        arg1: *mut screen_write_ctx,
        arg2: isize,
        arg3: *const grid_cell,
        arg4: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn screen_write_vnputs(
        arg1: *mut screen_write_ctx,
        arg2: isize,
        arg3: *const grid_cell,
        arg4: *const ::std::os::raw::c_char,
        arg5: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn screen_write_putc(arg1: *mut screen_write_ctx, arg2: *const grid_cell, arg3: u_char);
}
extern "C" {
    pub fn screen_write_copy(
        arg1: *mut screen_write_ctx,
        arg2: *mut screen,
        arg3: u_int,
        arg4: u_int,
        arg5: u_int,
        arg6: u_int,
        arg7: *mut bitstr_t,
        arg8: *const grid_cell,
    );
}
extern "C" {
    pub fn screen_write_fast_copy(
        arg1: *mut screen_write_ctx,
        arg2: *mut screen,
        arg3: u_int,
        arg4: u_int,
        arg5: u_int,
        arg6: u_int,
    );
}
extern "C" {
    pub fn screen_write_hline(
        arg1: *mut screen_write_ctx,
        arg2: u_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn screen_write_vline(
        arg1: *mut screen_write_ctx,
        arg2: u_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn screen_write_box(arg1: *mut screen_write_ctx, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn screen_write_preview(
        arg1: *mut screen_write_ctx,
        arg2: *mut screen,
        arg3: u_int,
        arg4: u_int,
    );
}
extern "C" {
    pub fn screen_write_backspace(arg1: *mut screen_write_ctx);
}
extern "C" {
    pub fn screen_write_mode_set(arg1: *mut screen_write_ctx, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn screen_write_mode_clear(arg1: *mut screen_write_ctx, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn screen_write_cursorup(arg1: *mut screen_write_ctx, arg2: u_int);
}
extern "C" {
    pub fn screen_write_cursordown(arg1: *mut screen_write_ctx, arg2: u_int);
}
extern "C" {
    pub fn screen_write_cursorright(arg1: *mut screen_write_ctx, arg2: u_int);
}
extern "C" {
    pub fn screen_write_cursorleft(arg1: *mut screen_write_ctx, arg2: u_int);
}
extern "C" {
    pub fn screen_write_alignmenttest(arg1: *mut screen_write_ctx);
}
extern "C" {
    pub fn screen_write_insertcharacter(arg1: *mut screen_write_ctx, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn screen_write_deletecharacter(arg1: *mut screen_write_ctx, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn screen_write_clearcharacter(arg1: *mut screen_write_ctx, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn screen_write_insertline(arg1: *mut screen_write_ctx, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn screen_write_deleteline(arg1: *mut screen_write_ctx, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn screen_write_clearline(arg1: *mut screen_write_ctx, arg2: u_int);
}
extern "C" {
    pub fn screen_write_clearendofline(arg1: *mut screen_write_ctx, arg2: u_int);
}
extern "C" {
    pub fn screen_write_clearstartofline(arg1: *mut screen_write_ctx, arg2: u_int);
}
extern "C" {
    pub fn screen_write_cursormove(
        arg1: *mut screen_write_ctx,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn screen_write_reverseindex(arg1: *mut screen_write_ctx, arg2: u_int);
}
extern "C" {
    pub fn screen_write_scrollregion(arg1: *mut screen_write_ctx, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn screen_write_linefeed(
        arg1: *mut screen_write_ctx,
        arg2: ::std::os::raw::c_int,
        arg3: u_int,
    );
}
extern "C" {
    pub fn screen_write_scrollup(arg1: *mut screen_write_ctx, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn screen_write_carriagereturn(arg1: *mut screen_write_ctx);
}
extern "C" {
    pub fn screen_write_clearendofscreen(arg1: *mut screen_write_ctx, arg2: u_int);
}
extern "C" {
    pub fn screen_write_clearstartofscreen(arg1: *mut screen_write_ctx, arg2: u_int);
}
extern "C" {
    pub fn screen_write_clearscreen(arg1: *mut screen_write_ctx, arg2: u_int);
}
extern "C" {
    pub fn screen_write_clearhistory(arg1: *mut screen_write_ctx);
}
extern "C" {
    pub fn screen_write_collect_end(arg1: *mut screen_write_ctx);
}
extern "C" {
    pub fn screen_write_collect_add(arg1: *mut screen_write_ctx, arg2: *const grid_cell);
}
extern "C" {
    pub fn screen_write_cell(arg1: *mut screen_write_ctx, arg2: *const grid_cell);
}
extern "C" {
    pub fn screen_write_setselection(arg1: *mut screen_write_ctx, arg2: *mut u_char, arg3: u_int);
}
extern "C" {
    pub fn screen_write_rawstring(arg1: *mut screen_write_ctx, arg2: *mut u_char, arg3: u_int);
}
extern "C" {
    pub fn screen_redraw_screen(arg1: *mut client);
}
extern "C" {
    pub fn screen_redraw_pane(arg1: *mut client, arg2: *mut window_pane);
}
extern "C" {
    pub fn screen_init(arg1: *mut screen, arg2: u_int, arg3: u_int, arg4: u_int);
}
extern "C" {
    pub fn screen_reinit(arg1: *mut screen);
}
extern "C" {
    pub fn screen_free(arg1: *mut screen);
}
extern "C" {
    pub fn screen_reset_tabs(arg1: *mut screen);
}
extern "C" {
    pub fn screen_set_cursor_style(arg1: *mut screen, arg2: u_int);
}
extern "C" {
    pub fn screen_set_cursor_colour(arg1: *mut screen, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn screen_set_title(arg1: *mut screen, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn screen_push_title(arg1: *mut screen);
}
extern "C" {
    pub fn screen_pop_title(arg1: *mut screen);
}
extern "C" {
    pub fn screen_resize(arg1: *mut screen, arg2: u_int, arg3: u_int, arg4: ::std::os::raw::c_int);
}
extern "C" {
    pub fn screen_set_selection(
        arg1: *mut screen,
        arg2: u_int,
        arg3: u_int,
        arg4: u_int,
        arg5: u_int,
        arg6: u_int,
        arg7: ::std::os::raw::c_int,
        arg8: *mut grid_cell,
    );
}
extern "C" {
    pub fn screen_clear_selection(arg1: *mut screen);
}
extern "C" {
    pub fn screen_hide_selection(arg1: *mut screen);
}
extern "C" {
    pub fn screen_check_selection(
        arg1: *mut screen,
        arg2: u_int,
        arg3: u_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn screen_select_cell(arg1: *mut screen, arg2: *mut grid_cell, arg3: *const grid_cell);
}
extern "C" {
    #[link_name = "\u{1}windows"]
    pub static mut windows: windows;
}
extern "C" {
    #[link_name = "\u{1}all_window_panes"]
    pub static mut all_window_panes: window_pane_tree;
}
extern "C" {
    #[link_name = "\u{1}all_window_modes"]
    pub static mut all_window_modes: [*const window_mode; 0usize];
}
extern "C" {
    pub fn window_cmp(arg1: *mut window, arg2: *mut window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn windows_RB_INSERT_COLOR(arg1: *mut windows, arg2: *mut window);
}
extern "C" {
    pub fn windows_RB_REMOVE_COLOR(arg1: *mut windows, arg2: *mut window, arg3: *mut window);
}
extern "C" {
    pub fn windows_RB_REMOVE(arg1: *mut windows, arg2: *mut window) -> *mut window;
}
extern "C" {
    pub fn windows_RB_INSERT(arg1: *mut windows, arg2: *mut window) -> *mut window;
}
extern "C" {
    pub fn windows_RB_FIND(arg1: *mut windows, arg2: *mut window) -> *mut window;
}
extern "C" {
    pub fn windows_RB_NFIND(arg1: *mut windows, arg2: *mut window) -> *mut window;
}
extern "C" {
    pub fn windows_RB_NEXT(arg1: *mut window) -> *mut window;
}
extern "C" {
    pub fn windows_RB_PREV(arg1: *mut window) -> *mut window;
}
extern "C" {
    pub fn windows_RB_MINMAX(arg1: *mut windows, arg2: ::std::os::raw::c_int) -> *mut window;
}
extern "C" {
    pub fn winlink_cmp(arg1: *mut winlink, arg2: *mut winlink) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn winlinks_RB_INSERT_COLOR(arg1: *mut winlinks, arg2: *mut winlink);
}
extern "C" {
    pub fn winlinks_RB_REMOVE_COLOR(arg1: *mut winlinks, arg2: *mut winlink, arg3: *mut winlink);
}
extern "C" {
    pub fn winlinks_RB_REMOVE(arg1: *mut winlinks, arg2: *mut winlink) -> *mut winlink;
}
extern "C" {
    pub fn winlinks_RB_INSERT(arg1: *mut winlinks, arg2: *mut winlink) -> *mut winlink;
}
extern "C" {
    pub fn winlinks_RB_FIND(arg1: *mut winlinks, arg2: *mut winlink) -> *mut winlink;
}
extern "C" {
    pub fn winlinks_RB_NFIND(arg1: *mut winlinks, arg2: *mut winlink) -> *mut winlink;
}
extern "C" {
    pub fn winlinks_RB_NEXT(arg1: *mut winlink) -> *mut winlink;
}
extern "C" {
    pub fn winlinks_RB_PREV(arg1: *mut winlink) -> *mut winlink;
}
extern "C" {
    pub fn winlinks_RB_MINMAX(arg1: *mut winlinks, arg2: ::std::os::raw::c_int) -> *mut winlink;
}
extern "C" {
    pub fn window_pane_cmp(arg1: *mut window_pane, arg2: *mut window_pane)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn window_pane_tree_RB_INSERT_COLOR(arg1: *mut window_pane_tree, arg2: *mut window_pane);
}
extern "C" {
    pub fn window_pane_tree_RB_REMOVE_COLOR(
        arg1: *mut window_pane_tree,
        arg2: *mut window_pane,
        arg3: *mut window_pane,
    );
}
extern "C" {
    pub fn window_pane_tree_RB_REMOVE(
        arg1: *mut window_pane_tree,
        arg2: *mut window_pane,
    ) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_tree_RB_INSERT(
        arg1: *mut window_pane_tree,
        arg2: *mut window_pane,
    ) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_tree_RB_FIND(
        arg1: *mut window_pane_tree,
        arg2: *mut window_pane,
    ) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_tree_RB_NFIND(
        arg1: *mut window_pane_tree,
        arg2: *mut window_pane,
    ) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_tree_RB_NEXT(arg1: *mut window_pane) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_tree_RB_PREV(arg1: *mut window_pane) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_tree_RB_MINMAX(
        arg1: *mut window_pane_tree,
        arg2: ::std::os::raw::c_int,
    ) -> *mut window_pane;
}
extern "C" {
    pub fn winlink_find_by_index(arg1: *mut winlinks, arg2: ::std::os::raw::c_int) -> *mut winlink;
}
extern "C" {
    pub fn winlink_find_by_window(arg1: *mut winlinks, arg2: *mut window) -> *mut winlink;
}
extern "C" {
    pub fn winlink_find_by_window_id(arg1: *mut winlinks, arg2: u_int) -> *mut winlink;
}
extern "C" {
    pub fn winlink_count(arg1: *mut winlinks) -> u_int;
}
extern "C" {
    pub fn winlink_add(arg1: *mut winlinks, arg2: ::std::os::raw::c_int) -> *mut winlink;
}
extern "C" {
    pub fn winlink_set_window(arg1: *mut winlink, arg2: *mut window);
}
extern "C" {
    pub fn winlink_remove(arg1: *mut winlinks, arg2: *mut winlink);
}
extern "C" {
    pub fn winlink_next(arg1: *mut winlink) -> *mut winlink;
}
extern "C" {
    pub fn winlink_previous(arg1: *mut winlink) -> *mut winlink;
}
extern "C" {
    pub fn winlink_next_by_number(
        arg1: *mut winlink,
        arg2: *mut session,
        arg3: ::std::os::raw::c_int,
    ) -> *mut winlink;
}
extern "C" {
    pub fn winlink_previous_by_number(
        arg1: *mut winlink,
        arg2: *mut session,
        arg3: ::std::os::raw::c_int,
    ) -> *mut winlink;
}
extern "C" {
    pub fn winlink_stack_push(arg1: *mut winlink_stack, arg2: *mut winlink);
}
extern "C" {
    pub fn winlink_stack_remove(arg1: *mut winlink_stack, arg2: *mut winlink);
}
extern "C" {
    pub fn window_find_by_id_str(arg1: *const ::std::os::raw::c_char) -> *mut window;
}
extern "C" {
    pub fn window_find_by_id(arg1: u_int) -> *mut window;
}
extern "C" {
    pub fn window_update_activity(arg1: *mut window);
}
extern "C" {
    pub fn window_create(arg1: u_int, arg2: u_int) -> *mut window;
}
extern "C" {
    pub fn window_destroy(arg1: *mut window);
}
extern "C" {
    pub fn window_pane_set_event(arg1: *mut window_pane);
}
extern "C" {
    pub fn window_get_active_at(arg1: *mut window, arg2: u_int, arg3: u_int) -> *mut window_pane;
}
extern "C" {
    pub fn window_find_string(
        arg1: *mut window,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut window_pane;
}
extern "C" {
    pub fn window_has_pane(arg1: *mut window, arg2: *mut window_pane) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn window_set_active_pane(
        arg1: *mut window,
        arg2: *mut window_pane,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn window_redraw_active_switch(arg1: *mut window, arg2: *mut window_pane);
}
extern "C" {
    pub fn window_add_pane(
        arg1: *mut window,
        arg2: *mut window_pane,
        arg3: u_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut window_pane;
}
extern "C" {
    pub fn window_resize(arg1: *mut window, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn window_zoom(arg1: *mut window_pane) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn window_unzoom(arg1: *mut window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn window_lost_pane(arg1: *mut window, arg2: *mut window_pane);
}
extern "C" {
    pub fn window_remove_pane(arg1: *mut window, arg2: *mut window_pane);
}
extern "C" {
    pub fn window_pane_at_index(arg1: *mut window, arg2: u_int) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_next_by_number(
        arg1: *mut window,
        arg2: *mut window_pane,
        arg3: u_int,
    ) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_previous_by_number(
        arg1: *mut window,
        arg2: *mut window_pane,
        arg3: u_int,
    ) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_index(arg1: *mut window_pane, arg2: *mut u_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn window_count_panes(arg1: *mut window) -> u_int;
}
extern "C" {
    pub fn window_destroy_panes(arg1: *mut window);
}
extern "C" {
    pub fn window_pane_find_by_id_str(arg1: *const ::std::os::raw::c_char) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_find_by_id(arg1: u_int) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_destroy_ready(arg1: *mut window_pane) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn window_pane_resize(arg1: *mut window_pane, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn window_pane_alternate_on(
        arg1: *mut window_pane,
        arg2: *mut grid_cell,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn window_pane_alternate_off(
        arg1: *mut window_pane,
        arg2: *mut grid_cell,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn window_pane_set_palette(
        arg1: *mut window_pane,
        arg2: u_int,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn window_pane_unset_palette(arg1: *mut window_pane, arg2: u_int);
}
extern "C" {
    pub fn window_pane_reset_palette(arg1: *mut window_pane);
}
extern "C" {
    pub fn window_pane_get_palette(
        arg1: *mut window_pane,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn window_pane_set_mode(
        arg1: *mut window_pane,
        arg2: *const window_mode,
        arg3: *mut cmd_find_state,
        arg4: *mut args,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn window_pane_reset_mode(arg1: *mut window_pane);
}
extern "C" {
    pub fn window_pane_reset_mode_all(arg1: *mut window_pane);
}
extern "C" {
    pub fn window_pane_key(
        arg1: *mut window_pane,
        arg2: *mut client,
        arg3: *mut session,
        arg4: *mut winlink,
        arg5: key_code,
        arg6: *mut mouse_event,
    );
}
extern "C" {
    pub fn window_pane_visible(arg1: *mut window_pane) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn window_pane_search(arg1: *mut window_pane, arg2: *const ::std::os::raw::c_char)
        -> u_int;
}
extern "C" {
    pub fn window_printable_flags(arg1: *mut winlink) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn window_pane_find_up(arg1: *mut window_pane) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_find_down(arg1: *mut window_pane) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_find_left(arg1: *mut window_pane) -> *mut window_pane;
}
extern "C" {
    pub fn window_pane_find_right(arg1: *mut window_pane) -> *mut window_pane;
}
extern "C" {
    pub fn window_set_name(arg1: *mut window, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn window_add_ref(arg1: *mut window, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn window_remove_ref(arg1: *mut window, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn winlink_clear_flags(arg1: *mut winlink);
}
extern "C" {
    pub fn winlink_shuffle_up(arg1: *mut session, arg2: *mut winlink) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn layout_count_cells(arg1: *mut layout_cell) -> u_int;
}
extern "C" {
    pub fn layout_create_cell(arg1: *mut layout_cell) -> *mut layout_cell;
}
extern "C" {
    pub fn layout_free_cell(arg1: *mut layout_cell);
}
extern "C" {
    pub fn layout_print_cell(
        arg1: *mut layout_cell,
        arg2: *const ::std::os::raw::c_char,
        arg3: u_int,
    );
}
extern "C" {
    pub fn layout_destroy_cell(
        arg1: *mut window,
        arg2: *mut layout_cell,
        arg3: *mut *mut layout_cell,
    );
}
extern "C" {
    pub fn layout_resize_layout(
        arg1: *mut window,
        arg2: *mut layout_cell,
        arg3: layout_type,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn layout_search_by_border(
        arg1: *mut layout_cell,
        arg2: u_int,
        arg3: u_int,
    ) -> *mut layout_cell;
}
extern "C" {
    pub fn layout_set_size(
        arg1: *mut layout_cell,
        arg2: u_int,
        arg3: u_int,
        arg4: u_int,
        arg5: u_int,
    );
}
extern "C" {
    pub fn layout_make_leaf(arg1: *mut layout_cell, arg2: *mut window_pane);
}
extern "C" {
    pub fn layout_make_node(arg1: *mut layout_cell, arg2: layout_type);
}
extern "C" {
    pub fn layout_fix_offsets(arg1: *mut layout_cell);
}
extern "C" {
    pub fn layout_fix_panes(arg1: *mut window);
}
extern "C" {
    pub fn layout_resize_adjust(
        arg1: *mut window,
        arg2: *mut layout_cell,
        arg3: layout_type,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn layout_init(arg1: *mut window, arg2: *mut window_pane);
}
extern "C" {
    pub fn layout_free(arg1: *mut window);
}
extern "C" {
    pub fn layout_resize(arg1: *mut window, arg2: u_int, arg3: u_int);
}
extern "C" {
    pub fn layout_resize_pane(
        arg1: *mut window_pane,
        arg2: layout_type,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn layout_resize_pane_to(arg1: *mut window_pane, arg2: layout_type, arg3: u_int);
}
extern "C" {
    pub fn layout_assign_pane(arg1: *mut layout_cell, arg2: *mut window_pane);
}
extern "C" {
    pub fn layout_split_pane(
        arg1: *mut window_pane,
        arg2: layout_type,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> *mut layout_cell;
}
extern "C" {
    pub fn layout_close_pane(arg1: *mut window_pane);
}
extern "C" {
    pub fn layout_spread_cell(arg1: *mut window, arg2: *mut layout_cell) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn layout_spread_out(arg1: *mut window_pane);
}
extern "C" {
    pub fn layout_dump(arg1: *mut layout_cell) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn layout_parse(
        arg1: *mut window,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn layout_set_lookup(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn layout_set_select(arg1: *mut window, arg2: u_int) -> u_int;
}
extern "C" {
    pub fn layout_set_next(arg1: *mut window) -> u_int;
}
extern "C" {
    pub fn layout_set_previous(arg1: *mut window) -> u_int;
}
pub type mode_tree_build_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: u_int,
        arg3: *mut u64,
        arg4: *const ::std::os::raw::c_char,
    ),
>;
pub type mode_tree_draw_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut screen_write_ctx,
        arg4: u_int,
        arg5: u_int,
    ),
>;
pub type mode_tree_search_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int,
>;
pub type mode_tree_each_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: *mut client,
        arg4: key_code,
    ),
>;
extern "C" {
    pub fn mode_tree_count_tagged(arg1: *mut mode_tree_data) -> u_int;
}
extern "C" {
    pub fn mode_tree_get_current(arg1: *mut mode_tree_data) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn mode_tree_expand_current(arg1: *mut mode_tree_data);
}
extern "C" {
    pub fn mode_tree_set_current(arg1: *mut mode_tree_data, arg2: u64);
}
extern "C" {
    pub fn mode_tree_each_tagged(
        arg1: *mut mode_tree_data,
        arg2: mode_tree_each_cb,
        arg3: *mut client,
        arg4: key_code,
        arg5: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn mode_tree_down(arg1: *mut mode_tree_data, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn mode_tree_start(
        arg1: *mut window_pane,
        arg2: *mut args,
        arg3: mode_tree_build_cb,
        arg4: mode_tree_draw_cb,
        arg5: mode_tree_search_cb,
        arg6: *mut ::std::os::raw::c_void,
        arg7: *mut *const ::std::os::raw::c_char,
        arg8: u_int,
        arg9: *mut *mut screen,
    ) -> *mut mode_tree_data;
}
extern "C" {
    pub fn mode_tree_zoom(arg1: *mut mode_tree_data, arg2: *mut args);
}
extern "C" {
    pub fn mode_tree_build(arg1: *mut mode_tree_data);
}
extern "C" {
    pub fn mode_tree_free(arg1: *mut mode_tree_data);
}
extern "C" {
    pub fn mode_tree_resize(arg1: *mut mode_tree_data, arg2: u_int, arg3: u_int);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mode_tree_item {
    _unused: [u8; 0],
}
extern "C" {
    pub fn mode_tree_add(
        arg1: *mut mode_tree_data,
        arg2: *mut mode_tree_item,
        arg3: *mut ::std::os::raw::c_void,
        arg4: u64,
        arg5: *const ::std::os::raw::c_char,
        arg6: *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
    ) -> *mut mode_tree_item;
}
extern "C" {
    pub fn mode_tree_remove(arg1: *mut mode_tree_data, arg2: *mut mode_tree_item);
}
extern "C" {
    pub fn mode_tree_draw(arg1: *mut mode_tree_data);
}
extern "C" {
    pub fn mode_tree_key(
        arg1: *mut mode_tree_data,
        arg2: *mut client,
        arg3: *mut key_code,
        arg4: *mut mouse_event,
        arg5: *mut u_int,
        arg6: *mut u_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mode_tree_run_command(
        arg1: *mut client,
        arg2: *mut cmd_find_state,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}window_buffer_mode"]
    pub static window_buffer_mode: window_mode;
}
extern "C" {
    #[link_name = "\u{1}window_tree_mode"]
    pub static window_tree_mode: window_mode;
}
extern "C" {
    #[link_name = "\u{1}window_clock_mode"]
    pub static window_clock_mode: window_mode;
}
extern "C" {
    #[link_name = "\u{1}window_clock_table"]
    pub static mut window_clock_table: [[[::std::os::raw::c_char; 5usize]; 5usize]; 14usize];
}
extern "C" {
    #[link_name = "\u{1}window_client_mode"]
    pub static window_client_mode: window_mode;
}
extern "C" {
    #[link_name = "\u{1}window_copy_mode"]
    pub static window_copy_mode: window_mode;
}
extern "C" {
    #[link_name = "\u{1}window_view_mode"]
    pub static window_view_mode: window_mode;
}
extern "C" {
    pub fn window_copy_add(arg1: *mut window_pane, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn window_copy_vadd(
        arg1: *mut window_pane,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut __va_list_tag,
    );
}
extern "C" {
    pub fn window_copy_pageup(arg1: *mut window_pane, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn window_copy_start_drag(arg1: *mut client, arg2: *mut mouse_event);
}
extern "C" {
    pub fn check_window_name(arg1: *mut window);
}
extern "C" {
    pub fn default_window_name(arg1: *mut window) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn parse_window_name(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn control_callback(
        arg1: *mut client,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn control_write(arg1: *mut client, arg2: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn control_write_buffer(arg1: *mut client, arg2: *mut evbuffer);
}
extern "C" {
    pub fn control_notify_input(arg1: *mut client, arg2: *mut window_pane, arg3: *mut evbuffer);
}
extern "C" {
    pub fn control_notify_pane_mode_changed(arg1: ::std::os::raw::c_int);
}
extern "C" {
    pub fn control_notify_window_layout_changed(arg1: *mut window);
}
extern "C" {
    pub fn control_notify_window_pane_changed(arg1: *mut window);
}
extern "C" {
    pub fn control_notify_window_unlinked(arg1: *mut session, arg2: *mut window);
}
extern "C" {
    pub fn control_notify_window_linked(arg1: *mut session, arg2: *mut window);
}
extern "C" {
    pub fn control_notify_window_renamed(arg1: *mut window);
}
extern "C" {
    pub fn control_notify_client_session_changed(arg1: *mut client);
}
extern "C" {
    pub fn control_notify_session_renamed(arg1: *mut session);
}
extern "C" {
    pub fn control_notify_session_created(arg1: *mut session);
}
extern "C" {
    pub fn control_notify_session_closed(arg1: *mut session);
}
extern "C" {
    pub fn control_notify_session_window_changed(arg1: *mut session);
}
extern "C" {
    #[link_name = "\u{1}sessions"]
    pub static mut sessions: sessions;
}
extern "C" {
    pub fn session_cmp(arg1: *mut session, arg2: *mut session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sessions_RB_INSERT_COLOR(arg1: *mut sessions, arg2: *mut session);
}
extern "C" {
    pub fn sessions_RB_REMOVE_COLOR(arg1: *mut sessions, arg2: *mut session, arg3: *mut session);
}
extern "C" {
    pub fn sessions_RB_REMOVE(arg1: *mut sessions, arg2: *mut session) -> *mut session;
}
extern "C" {
    pub fn sessions_RB_INSERT(arg1: *mut sessions, arg2: *mut session) -> *mut session;
}
extern "C" {
    pub fn sessions_RB_FIND(arg1: *mut sessions, arg2: *mut session) -> *mut session;
}
extern "C" {
    pub fn sessions_RB_NFIND(arg1: *mut sessions, arg2: *mut session) -> *mut session;
}
extern "C" {
    pub fn sessions_RB_NEXT(arg1: *mut session) -> *mut session;
}
extern "C" {
    pub fn sessions_RB_PREV(arg1: *mut session) -> *mut session;
}
extern "C" {
    pub fn sessions_RB_MINMAX(arg1: *mut sessions, arg2: ::std::os::raw::c_int) -> *mut session;
}
extern "C" {
    pub fn session_alive(arg1: *mut session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn session_find(arg1: *const ::std::os::raw::c_char) -> *mut session;
}
extern "C" {
    pub fn session_find_by_id_str(arg1: *const ::std::os::raw::c_char) -> *mut session;
}
extern "C" {
    pub fn session_find_by_id(arg1: u_int) -> *mut session;
}
extern "C" {
    pub fn session_create(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
        arg4: *mut environ,
        arg5: *mut options,
        arg6: *mut termios,
    ) -> *mut session;
}
extern "C" {
    pub fn session_destroy(
        arg1: *mut session,
        arg2: ::std::os::raw::c_int,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn session_add_ref(arg1: *mut session, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn session_remove_ref(arg1: *mut session, arg2: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn session_check_name(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn session_update_activity(arg1: *mut session, arg2: *mut timeval);
}
extern "C" {
    pub fn session_next_session(arg1: *mut session) -> *mut session;
}
extern "C" {
    pub fn session_previous_session(arg1: *mut session) -> *mut session;
}
extern "C" {
    pub fn session_new(
        arg1: *mut session,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_char,
        arg5: *const ::std::os::raw::c_char,
        arg6: *const ::std::os::raw::c_char,
        arg7: ::std::os::raw::c_int,
        arg8: *mut *mut ::std::os::raw::c_char,
    ) -> *mut winlink;
}
extern "C" {
    pub fn session_attach(
        arg1: *mut session,
        arg2: *mut window,
        arg3: ::std::os::raw::c_int,
        arg4: *mut *mut ::std::os::raw::c_char,
    ) -> *mut winlink;
}
extern "C" {
    pub fn session_detach(arg1: *mut session, arg2: *mut winlink) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn session_has(arg1: *mut session, arg2: *mut window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn session_is_linked(arg1: *mut session, arg2: *mut window) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn session_next(arg1: *mut session, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn session_previous(
        arg1: *mut session,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn session_select(arg1: *mut session, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn session_last(arg1: *mut session) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn session_set_current(arg1: *mut session, arg2: *mut winlink) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn session_group_contains(arg1: *mut session) -> *mut session_group;
}
extern "C" {
    pub fn session_group_find(arg1: *const ::std::os::raw::c_char) -> *mut session_group;
}
extern "C" {
    pub fn session_group_new(arg1: *const ::std::os::raw::c_char) -> *mut session_group;
}
extern "C" {
    pub fn session_group_add(arg1: *mut session_group, arg2: *mut session);
}
extern "C" {
    pub fn session_group_synchronize_to(arg1: *mut session);
}
extern "C" {
    pub fn session_group_synchronize_from(arg1: *mut session);
}
extern "C" {
    pub fn session_group_count(arg1: *mut session_group) -> u_int;
}
extern "C" {
    pub fn session_renumber_windows(arg1: *mut session);
}
extern "C" {
    pub fn utf8_set(arg1: *mut utf8_data, arg2: u_char);
}
extern "C" {
    pub fn utf8_copy(arg1: *mut utf8_data, arg2: *const utf8_data);
}
extern "C" {
    pub fn utf8_open(arg1: *mut utf8_data, arg2: u_char) -> utf8_state;
}
extern "C" {
    pub fn utf8_append(arg1: *mut utf8_data, arg2: u_char) -> utf8_state;
}
extern "C" {
    pub fn utf8_combine(arg1: *const utf8_data, arg2: *mut wchar_t) -> utf8_state;
}
extern "C" {
    pub fn utf8_split(arg1: wchar_t, arg2: *mut utf8_data) -> utf8_state;
}
extern "C" {
    pub fn utf8_isvalid(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf8_strvis(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf8_stravis(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn utf8_sanitize(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn utf8_strlen(arg1: *const utf8_data) -> usize;
}
extern "C" {
    pub fn utf8_strwidth(arg1: *const utf8_data, arg2: isize) -> u_int;
}
extern "C" {
    pub fn utf8_fromcstr(arg1: *const ::std::os::raw::c_char) -> *mut utf8_data;
}
extern "C" {
    pub fn utf8_tocstr(arg1: *mut utf8_data) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn utf8_cstrwidth(arg1: *const ::std::os::raw::c_char) -> u_int;
}
extern "C" {
    pub fn utf8_padcstr(
        arg1: *const ::std::os::raw::c_char,
        arg2: u_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn osdep_get_name(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn osdep_get_cwd(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn osdep_event_init() -> *mut event_base;
}
extern "C" {
    pub fn log_add_level();
}
extern "C" {
    pub fn log_get_level() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn log_open(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn log_toggle(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn log_close();
}
extern "C" {
    pub fn log_debug(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn fatal(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn fatalx(arg1: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn style_parse(
        arg1: *mut style,
        arg2: *const grid_cell,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn style_tostring(arg1: *mut style) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn style_apply(
        arg1: *mut grid_cell,
        arg2: *mut options,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn style_apply_update(
        arg1: *mut grid_cell,
        arg2: *mut options,
        arg3: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn style_equal(arg1: *mut style, arg2: *mut style) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn style_set(arg1: *mut style, arg2: *const grid_cell);
}
extern "C" {
    pub fn style_copy(arg1: *mut style, arg2: *mut style);
}
extern "C" {
    pub fn style_is_default(arg1: *mut style) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn spawn_window(
        arg1: *mut spawn_context,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> *mut winlink;
}
extern "C" {
    pub fn spawn_pane(
        arg1: *mut spawn_context,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> *mut window_pane;
}
extern "C" {
    pub fn init_plugins();
}
extern "C" {
    pub fn load_plugin(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn load_plugin_dir(base: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn plugin_notify(ne: *mut notify_entry);
}
extern "C" {
    pub fn get_plugins_list(list: *mut *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn plugin_call(
        func: *const ::std::os::raw::c_char,
        arg: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn find_first_plugin_index(type_: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn find_next_plugin_index(
        type_: ::std::os::raw::c_int,
        from: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct format_plugin {
    pub name: *const ::std::os::raw::c_char,
    pub cb: format_cb,
}
#[test]
fn bindgen_test_layout_format_plugin() {
    assert_eq!(
        ::std::mem::size_of::<format_plugin>(),
        16usize,
        concat!("Size of: ", stringify!(format_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<format_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(format_plugin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_plugin>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(format_plugin),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<format_plugin>())).cb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(format_plugin),
            "::",
            stringify!(cb)
        )
    );
}
pub type plugin_function_cb = ::std::option::Option<
    unsafe extern "C" fn(arg: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct function_plugin {
    pub name: *const ::std::os::raw::c_char,
    pub cb: plugin_function_cb,
}
#[test]
fn bindgen_test_layout_function_plugin() {
    assert_eq!(
        ::std::mem::size_of::<function_plugin>(),
        16usize,
        concat!("Size of: ", stringify!(function_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<function_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(function_plugin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<function_plugin>())).name as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(function_plugin),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<function_plugin>())).cb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(function_plugin),
            "::",
            stringify!(cb)
        )
    );
}
pub type notification_cb = ::std::option::Option<unsafe extern "C" fn(ne: *mut notify_entry)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct notification_plugin {
    pub event: *const ::std::os::raw::c_char,
    pub cb: notification_cb,
}
#[test]
fn bindgen_test_layout_notification_plugin() {
    assert_eq!(
        ::std::mem::size_of::<notification_plugin>(),
        16usize,
        concat!("Size of: ", stringify!(notification_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<notification_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(notification_plugin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<notification_plugin>())).event as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(notification_plugin),
            "::",
            stringify!(event)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<notification_plugin>())).cb as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(notification_plugin),
            "::",
            stringify!(cb)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct multi_plugin {
    pub length: u_int,
    pub plugins: *mut plugin,
}
#[test]
fn bindgen_test_layout_multi_plugin() {
    assert_eq!(
        ::std::mem::size_of::<multi_plugin>(),
        16usize,
        concat!("Size of: ", stringify!(multi_plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<multi_plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(multi_plugin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multi_plugin>())).length as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(multi_plugin),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<multi_plugin>())).plugins as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(multi_plugin),
            "::",
            stringify!(plugins)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct plugin {
    pub type_: ::std::os::raw::c_int,
    pub __bindgen_anon_1: plugin__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union plugin__bindgen_ty_1 {
    pub format: format_plugin,
    pub function: function_plugin,
    pub cmd: cmd_entry,
    pub notify: notification_plugin,
    pub multi: multi_plugin,
    _bindgen_union_align: [u64; 10usize],
}
#[test]
fn bindgen_test_layout_plugin__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<plugin__bindgen_ty_1>(),
        80usize,
        concat!("Size of: ", stringify!(plugin__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<plugin__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(plugin__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<plugin__bindgen_ty_1>())).format as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin__bindgen_ty_1),
            "::",
            stringify!(format)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<plugin__bindgen_ty_1>())).function as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin__bindgen_ty_1),
            "::",
            stringify!(function)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<plugin__bindgen_ty_1>())).cmd as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin__bindgen_ty_1),
            "::",
            stringify!(cmd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<plugin__bindgen_ty_1>())).notify as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin__bindgen_ty_1),
            "::",
            stringify!(notify)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<plugin__bindgen_ty_1>())).multi as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin__bindgen_ty_1),
            "::",
            stringify!(multi)
        )
    );
}
#[test]
fn bindgen_test_layout_plugin() {
    assert_eq!(
        ::std::mem::size_of::<plugin>(),
        88usize,
        concat!("Size of: ", stringify!(plugin))
    );
    assert_eq!(
        ::std::mem::align_of::<plugin>(),
        8usize,
        concat!("Alignment of ", stringify!(plugin))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<plugin>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(plugin),
            "::",
            stringify!(type_)
        )
    );
}
pub type PLUGIN = plugin;
extern "C" {
    #[link_name = "\u{1}plugins_length"]
    pub static mut plugins_length: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}plugins"]
    pub static mut plugins: *mut plugin;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bufferevent_ops {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hooks {
    pub _address: u8,
}
